
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Isabel
 */
public class ColoradoBluesGUI extends javax.swing.JFrame {

    /**
     * Creates new form ColoradoBluesGUI
     */
    public ColoradoBluesGUI() {
        initComponents();
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        NameField = new javax.swing.JTextField();
        JobField = new javax.swing.JTextField();
        TraitField1 = new javax.swing.JTextField();
        TraitField2 = new javax.swing.JTextField();
        TraitField3 = new javax.swing.JTextField();
        TraitField4 = new javax.swing.JTextField();
        RandomizeButton = new javax.swing.JButton();
        GenerateButton = new javax.swing.JButton();
        CreditButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        OutputField = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        ItemField1 = new javax.swing.JTextField();
        ItemField2 = new javax.swing.JTextField();
        ItemField3 = new javax.swing.JTextField();
        FlightField = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        HordeItemField1 = new javax.swing.JTextField();
        HordeItemField2 = new javax.swing.JTextField();
        HordeItemField3 = new javax.swing.JTextField();
        HordeItemField4 = new javax.swing.JTextField();
        HordeItemField5 = new javax.swing.JTextField();
        HordeItemField6 = new javax.swing.JTextField();
        HordeItemField7 = new javax.swing.JTextField();
        HordeItemField8 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        ShortQuoteField = new javax.swing.JTextField();
        LongParagraphField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        TopField = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        BottomField = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        StrengthField = new javax.swing.JSlider();
        MagicField = new javax.swing.JSlider();
        DefenseField = new javax.swing.JSlider();
        CharismaField = new javax.swing.JSlider();
        IntelligenceField = new javax.swing.JSlider();
        jPanel7 = new javax.swing.JPanel();
        URLField = new javax.swing.JTextField();
        IMGField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        NameField.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        NameField.setBorder(javax.swing.BorderFactory.createTitledBorder("Name"));

        JobField.setBorder(javax.swing.BorderFactory.createTitledBorder("Job"));

        TraitField1.setBorder(javax.swing.BorderFactory.createTitledBorder("Trait 1"));

        TraitField2.setToolTipText("");
        TraitField2.setBorder(javax.swing.BorderFactory.createTitledBorder("Trait 2"));

        TraitField3.setBorder(javax.swing.BorderFactory.createTitledBorder("Trait 3"));

        TraitField4.setBorder(javax.swing.BorderFactory.createTitledBorder("Trait 4"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TraitField3, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(NameField)
                    .addComponent(TraitField1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TraitField2, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(TraitField4)
                    .addComponent(JobField))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JobField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TraitField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TraitField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TraitField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TraitField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        RandomizeButton.setText("Randomize");
        RandomizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomizeButtonActionPerformed(evt);
            }
        });

        GenerateButton.setText("Generate BBCode");
        GenerateButton.setToolTipText("");
        GenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateButtonActionPerformed(evt);
            }
        });

        CreditButton.setText("Made By VolatileMatter");
        CreditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreditButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("BBCode"));

        OutputField.setColumns(20);
        OutputField.setLineWrap(true);
        OutputField.setRows(5);
        OutputField.setWrapStyleWord(true);
        jScrollPane2.setViewportView(OutputField);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ItemField1.setText("light runestone");
        ItemField1.setBorder(javax.swing.BorderFactory.createTitledBorder("Side Item 1"));

        ItemField2.setText("light sprite");
        ItemField2.setBorder(javax.swing.BorderFactory.createTitledBorder("Side Item 2"));

        ItemField3.setText("Illuminated Emblem");
        ItemField3.setBorder(javax.swing.BorderFactory.createTitledBorder("Side Item 3"));

        FlightField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        FlightField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Light", "Ice", "Shadow", "Wind", "Water", "Nature", "Lightning", "Fire", "Arcane", "Plague", "Earth" }));
        FlightField.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FlightFieldItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ItemField2)
                    .addComponent(FlightField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ItemField1)
                    .addComponent(ItemField3, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ItemField1)
                    .addComponent(FlightField))
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ItemField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ItemField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        HordeItemField1.setBorder(javax.swing.BorderFactory.createTitledBorder("Horde Item"));

        HordeItemField2.setBorder(javax.swing.BorderFactory.createTitledBorder("Horde Item"));

        HordeItemField3.setBorder(javax.swing.BorderFactory.createTitledBorder("Horde Item"));

        HordeItemField4.setBorder(javax.swing.BorderFactory.createTitledBorder("Horde Item"));

        HordeItemField5.setBorder(javax.swing.BorderFactory.createTitledBorder("Horde Item"));

        HordeItemField6.setBorder(javax.swing.BorderFactory.createTitledBorder("Horde Item"));

        HordeItemField7.setBorder(javax.swing.BorderFactory.createTitledBorder("Horde Item"));

        HordeItemField8.setBorder(javax.swing.BorderFactory.createTitledBorder("Horde Item"));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(HordeItemField7, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(HordeItemField8, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(HordeItemField1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HordeItemField2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(HordeItemField3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HordeItemField4, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(HordeItemField5, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HordeItemField6, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HordeItemField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HordeItemField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HordeItemField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HordeItemField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HordeItemField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HordeItemField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HordeItemField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HordeItemField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ShortQuoteField.setText("\"Short Quote Here\"");
        ShortQuoteField.setBorder(javax.swing.BorderFactory.createTitledBorder("Short Quote"));

        LongParagraphField.setText("Long long long long long long long long long long long long Long long long long long long long long long long long long quote here");
        LongParagraphField.setBorder(javax.swing.BorderFactory.createTitledBorder("Long Quote"));

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Top Paragraph"));

        TopField.setColumns(20);
        TopField.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        TopField.setLineWrap(true);
        TopField.setRows(5);
        TopField.setText("Personality Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro ");
        TopField.setToolTipText("");
        TopField.setWrapStyleWord(true);
        jScrollPane3.setViewportView(TopField);

        jScrollPane4.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Bottom Paragraph"));

        BottomField.setColumns(20);
        BottomField.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        BottomField.setLineWrap(true);
        BottomField.setRows(5);
        BottomField.setText("History Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur?  Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur?  Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui. error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta. ");
        BottomField.setToolTipText("");
        BottomField.setWrapStyleWord(true);
        jScrollPane4.setViewportView(BottomField);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ShortQuoteField)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane4)
                    .addComponent(LongParagraphField, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ShortQuoteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LongParagraphField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        StrengthField.setBackground(new java.awt.Color(255, 255, 255));
        StrengthField.setMaximum(10);
        StrengthField.setMinorTickSpacing(1);
        StrengthField.setPaintLabels(true);
        StrengthField.setPaintTicks(true);
        StrengthField.setSnapToTicks(true);
        StrengthField.setValue(5);
        StrengthField.setBorder(javax.swing.BorderFactory.createTitledBorder("Strength"));

        MagicField.setBackground(new java.awt.Color(255, 255, 255));
        MagicField.setMaximum(10);
        MagicField.setMinorTickSpacing(1);
        MagicField.setPaintLabels(true);
        MagicField.setPaintTicks(true);
        MagicField.setSnapToTicks(true);
        MagicField.setValue(5);
        MagicField.setBorder(javax.swing.BorderFactory.createTitledBorder("Magic"));

        DefenseField.setBackground(new java.awt.Color(255, 255, 255));
        DefenseField.setMaximum(10);
        DefenseField.setMinorTickSpacing(1);
        DefenseField.setPaintLabels(true);
        DefenseField.setPaintTicks(true);
        DefenseField.setSnapToTicks(true);
        DefenseField.setValue(5);
        DefenseField.setBorder(javax.swing.BorderFactory.createTitledBorder("Defense"));

        CharismaField.setBackground(new java.awt.Color(255, 255, 255));
        CharismaField.setMaximum(10);
        CharismaField.setMinorTickSpacing(1);
        CharismaField.setPaintLabels(true);
        CharismaField.setPaintTicks(true);
        CharismaField.setSnapToTicks(true);
        CharismaField.setValue(5);
        CharismaField.setBorder(javax.swing.BorderFactory.createTitledBorder("Charisma"));

        IntelligenceField.setBackground(new java.awt.Color(255, 255, 255));
        IntelligenceField.setMaximum(10);
        IntelligenceField.setMinorTickSpacing(1);
        IntelligenceField.setPaintLabels(true);
        IntelligenceField.setPaintTicks(true);
        IntelligenceField.setSnapToTicks(true);
        IntelligenceField.setValue(5);
        IntelligenceField.setBorder(javax.swing.BorderFactory.createTitledBorder("Intelligence"));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StrengthField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MagicField, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                    .addComponent(DefenseField, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                    .addComponent(CharismaField, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                    .addComponent(IntelligenceField, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StrengthField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MagicField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DefenseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CharismaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IntelligenceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        URLField.setText("sta.sh");
        URLField.setBorder(javax.swing.BorderFactory.createTitledBorder("URL"));

        IMGField.setText("http://i.imgur.com/BljMFeJ.png");
        IMGField.setBorder(javax.swing.BorderFactory.createTitledBorder("IMG"));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(URLField)
                    .addComponent(IMGField))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(URLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IMGField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RandomizeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(GenerateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CreditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(RandomizeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(GenerateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CreditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RandomizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomizeButtonActionPerformed
        // TODO add your handling code here:
        NameField.setText(genName()); 
        String[] traits = {"Accessible", "Admirable", "Allocentric", "Anticipative", "Appreciative", "Articulate", "Aspiring", "Athletic", "Attractive", "Balanced", "Benevolent", "Brilliant", "Captivating", "Caring", "Challenging", "Charismatic", "Clean", "Clear-Headed", "Clever", "Colorful", "Companionly", "Conciliatory", "Constant", "Contemplative", "Curious", "Daring", "Decent", "Dedicated", "Deep", "Dignified", "Directed", "Disciplined", "Dramatic", "Dutiful", "Earnest", "Ebullient", "Educated", "Elegant", "Eloquent", "Empathetic", "Esthetic", "Exciting", "Extraordinary", "Farsighted", "Felicific", "Firm", "Flexible", "Focused", "Forecful", "Forgiving", "Forthright", "Freethinking", "Fun-Loving", "Gallant", "Genuine", "Good-Natured", "Gracious", "Hardworking", "Healthy", "Hearty", "Herioc", "High-Minded", "Humble", "Idealistic", "Impressive", "Incisive", "Incorruptible", "Individualistic", "Innovative", "Inoffensive", "Insightful", "Insouciant", "Invulnerable", "Knowledge", "Leaderly", "Leisurely", "Liberal", "Logical", "Lovable", "Lyrical", "Magnanimous", "Many-Sided", "Masculine  (Manly)", "Methodical", "Maticulous", "Moderate", "Multi-Leveled", "Nonauthoritarian", "Objective", "Observant", "Open", "Orderly", "Organized", "Original", "Patriotic", "Perceptive", "Perfectionist", "Personable", "Persuasive", "Planful", "Playful", "Polished", "Popular", "Precise", "Principled", "Profound", "Protean", "Providential", "Prudent", "Pruposeful", "Realistic", "Relaxed", "Respectful", "Responsive", "Reverential", "Rustic", "Sage", "Sane", "Scholarly", "Scrupulous", "Secure", "Selfless", "Self-Critical", "Self-Defacing", "Self-Denying", "Self-Reliant", "Self-Sufficent", "Sentimental", "Seraphic", "Serious", "Sexy", "Sharing", "Simple", "Skillful", "Sober", "Solid", "Sophisticated", "Spontaneous", "Sporting", "Stable", "Steady", "Stoic", "Strong", "Studious", "Suave", "Subtle", "Sweet", "Systematic", "Tasteful", "Teacherly", "Thorough", "Tolerant", "Tractable", "Trusting", "Uncomplaining", "Undogmatic", "Unfoolable", "Upright", "Urbane", "Venturesome", "Well-Bred", "Well-Read", "Well-Rounded", "Winning", "Youthful", "Absentminded", "Artful", "Ascetic", "Authoritarian", "Big-Thinking", "Boyish", "Breezy", "Businesslike", "Busy", "Casual", "Crebral", "Chummy", "Circumspect", "Competitive", "Complex", "Confidential", "Contradictory", "Crisp", "Cute", "Deceptive", "Dominating", "Dreamy", "Driving", "Droll", "Dry", "Earthy", "Effeminate", "Enigmatic", "Experimental", "Familial", "Folksy", "Formal", "Freewheeling", "Frugal", "Glamorous", "Guileless", "High-Spirited", "Huried", "Hypnotic", "Iconoclastic", "Idiosyncratic", "Impassive", "Impersonal", "Impressionable", "Intense", "Invisible", "Irreligious", "Irreverent", "Maternal", "Mellow", "Moralistic", "Mystical", "Neutral", "Noncommittal", "Noncompetitive", "Old-Fashined", "Ordinary", "Outspoken", "Paternalistic", "Physical", "Political", "Predictable", "Preoccupied", "Private", "Progressive", "Pure", "Questioning", "Religious", "Restrained", "Retiring", "Sarcastic", "Self-Conscious", "Sensual", "Skeptical", "Smooth", "Solemn", "Solitary", "Stern", "Stoiid", "Strict", "Stubborn", "Stylish", "Subjective", "Surprising", "Soft", "Unaggressive", "Unambitious", "Unceremonious", "Unchanging", "Undemanding", "Unfathomable", "Unhurried", "Uninhibited", "Unpatriotic", "Unpredicatable", "Unreligious", "Unsentimental", "Whimsical", "Agonizing", "Aimless", "Airy", "Amoral", "Apathetic", "Arbitrary", "Argumentative", "Arrogantt", "Artificial", "Asocial", "Assertive", "Astigmatic", "Barbaric", "Bewildered", "Bizarre", "Bland", "Blunt", "Biosterous", "Brittle", "Brutal", "Calculating", "Cantakerous", "Charmless", "Childish", "Coarse", "Cold", "Colorless", "Complacent", "Complaintive", "Conceited", "Condemnatory", "Conformist", "Contemptible", "Conventional", "Crafty", "Crass", "Criminal", "Critical", "Crude", "Decadent", "Delicate", "Demanding", "Dependent", "Desperate", "Destructive", "Devious", "Difficult", "Dirty", "Disconcerting", "Discontented", "Discouraging", "Discourteous", "Dishonest", "Disloyal", "Disobedient", "Disorderly", "Disorganized", "Disputatious", "Disrespectful", "Disruptive", "Dissolute", "Dissonant", "Distractible", "Disturbing", "Dogmatic", "Dull", "Easily Discouraged", "Egocentric", "Enervated", "Escapist", "Expedient", "Extravagant", "Extreme", "Faithless", "Fanciful", "Fatalistic", "Fawning", "Fearful", "Fickle", "Fiery", "Fixed", "Flamboyant", "Fraudulent", "Frightening", "Frivolous", "Gloomy", "Graceless", "Grand", "Grim", "Hateful", "Haughty", "Hedonistic", "Hidebound", "High-Handed", "Hostile", "Imitative", "Impatient", "Impractical", "Imprudent", "Impulsive", "Inconsiderate", "Incurious", "Indecisive", "Indulgent", "Inert", "Inhibited", "Insecure", "Insensitive", "Insincere", "Insulting", "Intolerant", "Irascible", "Irrational", "Irresponsible", "Irritable", "Libidinous", "Loquacious", "Mannered", "Mannerless", "Mawkish", "Mealymouthed", "Mechanical", "Meddlesome", "Melancholic", "Meretricious", "Messy", "Miserable", "Miserly", "Misguided", "Mistaken", "Money-Minded", "Monstrous", "Moody", "Morbid", "Muddle-Headed", "Narcissistic", "Narrow", "Narrow-Minded", "Natty", "Negativistic", "Neglectful", "Neurotic", "Nihilistic", "Obsessive", "Obvious", "Odd", "Offhand", "One-Dimensional", "One-Sided", "Opinionated", "Opportunistic", "Oppressed", "Overimaginative", "Paranoid", "Passive", "Pedantic", "Perverse", "Petty", "Pharissical", "Phlegmatic", "Plodding", "Pompous", "Power-Hungry", "Predatory", "Prejudiced", "Presumptuous", "Pretentious", "Prim", "Procrastinating", "Profligate", "Provocative", "Pugnacious", "Puritanical", "Quirky", "Reactionary", "Reactive", "Regimental", "Regretful", "Repentant", "Repressed", "Resentful", "Ridiculous", "Rigid", "Ritualistic", "Rowdy", "Ruined", "Sadistic", "Sanctimonious", "Scheming", "Scornful", "Sedentary", "Self-Indulgent", "Shallow", "Shortsighted", "Single-Minded", "Sloppy", "Sly", "Small-Thinking", "Softheaded", "Sordid", "Steely", "Stiff", "Strong-Willed", "Stupid", "Submissive", "Superficial", "Superstitious", "Suspicious", "Tactless", "Tasteless", "Thievish", "Transparent", "Treacherous", "Trendy", "Troublesome", "Unappreciative", "Uncaring", "Uncharitable", "Unconvincing", "Uncooperative", "Uncreative", "Uncritical", "Unctuous", "Undisciplined", "Unfriendly", "Ungrateful", "Unhealthy", "Unimaginative", "Unimpressive", "Unlovable", "Unpolished", "Unprincipled", "Unrealistic", "Unreflective", "Unreliable", "Unrestrained", "Unself-Critical", "Unstable", "Vacuous", "Venal", "Vindictive", "Vulnerable", "Weak-Willed", "Well-Meaning", "Willful", "Wishful", "Affable", "Amiable", "Amicable", "Broad-Minded", "Careful", "Communicative", "Compassionate", "Conscientious", "Considerate", "Convivial", "Courteous", "Diplomatic", "Easygoing", "Emotional", "Fair-Minded", "Forceful", "Gregarious", "Hard-Working", "Honest", "Humorous", "Imaginative", "Independent", "Intellectual", "Intelligent", "Intuitive", "Inventive", "Loyal", "Modest", "Neat", "Optimistic", "Passionate", "Patient", "Persistent", "Pioneering", "Philosophical", "Polite", "Powerful", "Practical", "Pro-Active", "Quick-Witted", "Rational", "Reliable", "Reserved", "Resourceful", "Self-Confident", "Self-Disciplined", "Sensible", "Shy", "Sociable", "Straightforward", "Sympathetic", "Tidy", "Unassuming", "Understanding", "Versatile", "Warmhearted", "Adaptable", "Adorable", "Agreeable", "Alert", "Alluring", "Amusing", "Boundless", "Bright", "Capable", "Coherent", "Cooperative", "Credible", "Cultured", "Dashing", "Dazzling", "Debonair", "Decorous", "Delightful", "Diligent", "Discreet", "Dynamic", "Eager", "Efficient", "Enchanting", "Encouraging", "Enduring", "Energetic", "Entertaining", "Enthusiastic", "Excellent", "Excitable", "Exuberant", "Fabulous", "Fair", "Faithful", "Fantastic", "Fearless", "Frank", "Friendly", "Funny", "Generous", "Gentle", "Good", "Happy", "Harmonious", "Helpful", "Hilarious", "Honorable", "Impartial", "Industrious", "Instinctive", "Jolly", "Joyous", "Kind", "Kind-Hearted", "Knowledgeable", "Likeable", "Lively", "Lovely", "Loving", "Lucky", "Mature", "Modern", "Nice", "Obedient", "Painstaking", "Peaceful", "Perfect", "Placid", "Plausible", "Pleasant", "Plucky", "Productive", "Protective", "Proud", "Punctual", "Quiet", "Receptive", "Reflective", "Relieved", "Resolute", "Responsible", "Righteous", "Romantic", "Sedate", "Selective", "Self-Assured", "Sensitive", "Shrewd", "Sincere", "Skilful", "Splendid", "Steadfast", "Stimulating", "Talented", "Thoughtful", "Thrifty", "Tough", "Trustworthy", "Unbiased", "Unusual", "Upbeat", "Vigorous", "Vivacious", "Warm", "Willing", "Wise", "Witty", "Wonderful", "Zany", "Zealous", "Abrasive", "Abrupt", "Aloof", "Ambiguous", "Angry", "Annoyed", "Arrogant", "Awful", "Bad", "Belligerent", "Boorish", "Boring", "Callous", "Careless", "Clumsy", "Combative", "Confused", "Crazy", "Creepy", "Dangerous", "Deceitful", "Defective", "Defiant", "Depressed", "Deranged", "Disagreeable", "Disillusioned", "Disturbed", "Domineering", "Draconian", "Embarrassing", "Envious", "Erratic", "Evasive", "Evil", "Fanatical", "Fierce", "Finicky", "Flashy", "Flippant", "Foolish", "Forgetful", "Frantic", "Fretful", "Frightened", "Furtive", "Greedy", "Grieving", "Grouchy", "Gruesome", "Grumpy", "Guarded", "Gullible", "Helpless", "Hesitant", "Horrible", "Hurtful", "Ignorant", "Irresolute", "Jealous", "Jittery", "Lacking", "Lazy", "Lonely", "Malicious", "Materialistic", "Mean", "Mysterious", "Naive", "Nasty", "Naughty", "Nervous", "Noisy", "Obnoxious", "Outrageous", "Over Zealous", "Panicky", "Pathetic", "Possessive", "Quarrelsome", "Repulsive", "Ruthless", "Sad", "Scary", "Secretive", "Selfish", "Silly", "Slow", "Sneaky", "Snobbish", "Spendthrift", "Squeamish", "Stingy", "Strange", "Sulky", "Tacky", "Tense", "Terrible", "Testy", "Thick-Skinned", "Thoughtless", "Threatening", "Tight", "Timid", "Tired", "Tiresome", "Troubled", "Truculent", "Typical", "Uptight", "Vague", "Vengeful", "Venomous", "Volatile", "Voracious", "Vulgar", "Wary", "Wasteful", "Weak", "Wicked", "Worthless", "Wretched", "Abusive", "Active", "Adventurous", "Affectionate", "Aggressive", "Ambitious", "Annoying", "Anxious", "Artistic", "Bossy", "Brave", "Calm", "Cautious", "Charming", "Cheerful", "Compulsive", "Confident", "Conservative", "Courageous", "Cowardly", "Creative", "Cruel", "Cynical", "Decisive", "Determined", "Direct", "Able", "Absent-Minded", "Affected", "Afraid", "Animated", "Committed", "Competent", "Concerned", "Consistent", "Contented", "Effervescent", "Embarrased", "Equable", "Ethical", "Exacting", "Excessive", "Excited", "Guilty", "Handsome", "Hardy", "Harried", "Harsh", "Languid", "Leader", "Lean", "Left-Brain", "Liar", "Licentious", "Light", "Light-Hearted", "Limited", "Loud", "Pleasing", "Poor", "Positive", "Pretty", "Primitive", "Proper", "Short", "Simple-Minded", "Smart", "Soft-Hearted", "Sorry", "Unhappy", "Unkind", "Unmerciful", "Unselfish", "Unsuitable", "Upset", "Useful", "Vacant", "Violent", "Virtuous", "Wild", "Apologetic", "Attentive", "Austere", "Average", "Awkward", "Babyish", "Bashful", "Blasé", "Blowhard", "Cross", "Dainty", "Dark", "Dauntless", "Deferential", "Expert", "Facetious", "Feisty", "Ferocious", "Fidgety", "Fighter", "Hopeful", "Hopeless", "Hospitable", "Hot-Tempered", "Ill-Bred", "Immaculate", "Immature", "Immobile", "Impolite", "Loves Challenge", "Mannerly", "Meek", "Merciful", "Meticulous", "Mischievous", "Purposeful", "Quick", "Quick-Tempered", "Reasonable", "Reckless", "Repugnant", "Spoiled", "Sterile", "Successful", "Supportive", "Wishy-Washy", "Withdrawn", "Worried", "Wrong", "Young", "Boastful", "Bold", "Bored", "Brainy", "Brutish", "Candid", "Carefree", "Dependable", "Desiccated", "Despondent", "Devoted", "Disaffected", "Discerning", "Discouraged", "Fortunate", "Foul", "Fresh", "Frustrated", "Fun Loving", "Furious", "Impudent", "Inactive", "Inconsistent", "Indiscriminate", "Indolent", "Inefficient", "Inimitable", "Innocent", "Nagging", "Naïve", "Negligent", "No Purpose", "Not Trustworthy", "Obliging", "Restless", "Rich", "Risk-Taking", "Rough", "Rude", "Safe", "Satisfied", "Scared", "Scatty", "Tactful", "Talkative", "Tall", "Tardy", "Temperate", "Thankful", "Thrilled", "Caustic", "Changeable", "Civilised", "Cold-Hearted", "Commitment-Phobe", "Dismayed", "Disparaging", "Dissatisfied", "Distressed", "Doubtful", "Dreamer", "Fussy", "Garrulous", "Giddy", "Gives Up Easily", "Giving", "Glum", "Graceful", "Insipid", "Insistent", "Insolent", "Intrepid", "Jovial", "Joyful", "Keen", "Kindly", "Lackadaisical", "Organised", "Perserverant", "Pessimistic", "Picky", "Pitiful", "Plain", "Scrawny", "Scruffy", "Self-Centered", "Self-Controlling", "Sharp", "Sharp-Witted", "Shiftless", "Tireless", "Touchy", "Truthful", "Ugly", "Unconcerned", "Uncoordinated", "Undependable", "Unforgiving"};
        TraitField1.setText(genThing(traits)); TraitField2.setText(genThing(traits));TraitField3.setText(genThing(traits));TraitField4.setText(genThing(traits));
        String[] jobs = {"Accountant", "Actor", "Adviser", "Aerial Scout", "Alchemist", "Anarchist", "Apiarist", "Apothecary", "Aquarist", "Arborist", "Arcanist", "Archaelogist", "Archivist", "Archmage", "Arsonist", "Artist", "Astronmer", "Astronomer", "Aviary Keeper", "Baker", "Bandit", "Barber", "Bard", "Beast Master", "Beekeeper", "Bishop", "Blackmailer", "Blacksmith", "Bodyguard", "Borderwatching", "Botanist", "Bouncer", "Brewmaster", "Brewster", "Butcher", "Candlemaker", "Caravan Leader", "Carpenter", "Cartographer", "Cavelier", "Chariot Driver", "Cheesemaker", "Chef", "Chemist", "Cleric", "Coach", "Collector", "Composer", "Conjuerer", "Conman", "Consigliere", "Consort", "Cook", "Cooper", "Counselor", "Courier", "Courtier", "Dancer", "Daredevil", "Dark Illusionists", "Deepsea Diver", "Dentist", "Diplomat", "Disguiser", "Doctor", "Dragonologist", "Druid", "Drummer", "Dyer", "Educator", "Electrician", "Embroiderer", "Engineer", "Escort", "Espionage", "Exalter", "Excavator", "Executioner", "Exotic Dancer", "Explorer", "Fairy Chaser", "Familiar Caretaker", "Farmer", "Farrier", "Fashion Designer", "Festival Keeper", "Fisher", "Fletcher", "Florist", "Forager", "Forger", "Fortune-Teller", "Framer", "Fungiculturalist", "Gamekeeper", "Gardener", "Gatherer", "Genealogist", "Gladiator", "Glass Blower", "Godfather", "Gravedigger", "Guard", "Haberdasher", "Hairdresser", "Harvester", "Hatchling Sitter", "Healer", "Herbalist", "Herbologist", "Historian", "Hoarder", "Hobbyist", "Housekeeper", "Hunter", "Illusionist", "Imagineer", "Innkeeper", "Investigator", "Invoker", "Jailor", "Janitor", "Jester", "Jeweler", "Jinx", "Kennel Master", "Kennel Masters", "Kite-Maker", "Knickknack Maker", "Knight", "Lair Construction Crew", "Lawyer", "Leather Worker", "Librarian", "Lich", "Limo Driver", "Locksmith", "Logger", "Lookout", "Luthier", "Mafia", "Mafioso", "Mage", "Magi", "Magician", "Maid", "Manager", "Mason", "Master-At-Arms", "Matchmaker", "Mathematician", "Mayor", "Mechanic", "Mediator", "Medium", "Mentor", "Mercenary", "Merchant", "Messenger", "Metallurgist", "Microbiologist", "Miner", "Mineralogist", "Monk", "Muscian", "Musketeer", "Mycologist", "Mystic", "Nanny", "Necromancer", "Nest Sitter", "Night Watchman", "Ninja", "Novelist", "Nurse", "Occultist", "Optician", "Oracle", "Paladin", "Paper Maker", "Peacemaker", "Pedagogue", "Philosopher", "Pickpocket", "Pillager", "Piolot", "Pirate", "Playwright", "Poacher", "Poet", "Potion Master", "Potter", "Prankster", "Priest", "Proctor", "Professional Appraiser", "Professional Racer", "Professor", "Purifier", "Ranger", "Reaper", "Reporter", "Retributionist", "Ritualist", "Rogue", "Sage", "Saint", "Salsedragon", "Samurai", "Savager", "Savant", "Scavenger", "Scholar", "Scientist", "Scout", "Scribe", "Scribne", "Scryer", "Seafarer", "Seamstress", "Seer", "Serial Killer", "Shaman", "Shepherd", "Sheriff", "Ship Captain", "Shopkeeper", "Silk-Worm Keeper", "Singer", "Slayer", "Soap Maker", "Sorcerer", "Spell Weaver", "Spellcaster", "Spider Keeper", "Spinner", "Sprite", "Spy", "Stalker", "Storyteller", "Stripper", "Summoner", "Surgeon", "Survivalist", "Sylph", "Tailor", "Tanner", "Teacher", "Theif", "Tinker", "Tracker", "Trader", "Trainer", "Translator", "Transporter", "Trap Maker", "Trapper", "Trauma Surgeon", "Treasurer", "Tree-Keeper", "Trickster", "Undertaker", "Vampire", "Vampire Hunter", "Vault Guard", "Veteran", "Vigilante", "Viking", "Volcanologist", "Ward Crafter", "Warden", "Warlock", "Warrior", "Weaver", "Werewolf", "Wine Master", "Witch", "Witch Doctor", "Wizard", "Woodcarver", "Writer", "Zealot", "Almoner", "Atiliator", "Baliff", "Bottler", "Butler", "Carder", "Carters", "Castellan", "Chamberlain", "Chaplain", "Clerk", "Constable", "Cottar", "Ditcher", "Ewerer", "Falconer", "Fuller", "Glazier", "Gong Farmer", "Hayward", "Herald", "Keeper Of The Wardrobe", "Kinight", "Laird", "Marshal", "Master Mason", "Minstrel", "Porter", "Reeve", "Sapper", "Scullion", "Shearman", "Shoemaker", "Spinster", "Steward", "Squire", "Watchman", "Woodworker", "Tanners", "Soap Makers", "Cask Makers", "Cloth Makers", "Candle Makers (Chandlers)", "Gold And Silver Smiths", "Laundresses", "Bakers", "Grooms", "Pages", "Huntsmen", "Doctors", "Painters", "Plasterers", "And Painters", "Potters", "Brick And Tile Makers", "Glass Makers", "Shipwrights", "Sailors", "Butchers", "Fishmongers", "Farmers", "Herdsmen", "Millers", "The Clergy", "Parish Priests", "Members Of The Monastic Orders", "Innkeepers", "Roadmenders", "Woodwards (For The Forests). Slingers", "Lady-In-Waiting", "Chamber Maid", "Doctors", "Brewer", "Poulterer", "Fruiterer", "Slaughterer", "Dispenser", "Cupbearerer"};
        JobField.setText(genThing(jobs));
        String[] items = {"Darktide Jellyfish", "Mana Thief", "Maidens Blush", "Spathiphyllum", "Raspberry", "Bee Orchid", "Chalcedony Craylet", "Delta Orchid", "Emetic Russula", "Fallout Whisper", "Petalwing Matriarch", "Sakura Owlet", "Scarlet Mussels", "Southern Gull", "Small Block of Granite", "Rose Quartz", "Corundum Chameleon", "Mesacliff Harpy", "Jeweled Octoflyer", "Maren Wavesinger", "Juvenile Starsweeper", "Fluted Pukasloth", "Candycane Xolo", "Irradiated Astronomer", "Arcane Sprite", "Hibernal Starbear", "Pink Highnoon Hank", "Pink & Purple Flair Scarf", "Pink Satin Tunic", "Blushing Pink Rose", "Pink Daisy Cabbie", "Ethereal Entourage", "Archivist's Spellscroll", "Companion Comet", "Rune Slash", "Mana Bolt", "Enfeeble", "Bowman's Leggings", "Sweetheart Lace Waist Frill", "Sweetheart Lace Anklet", "Sweetheart Lace Wristlet", "Sweetheart Lace Collar", "Gossamer Flame Cloak", "Mage's Peony Socks", "Mage's Peony Gloves", "Arcane Tome", "Soft Pink Silk Scarf", "Soft Pink Wing Silks", "Rose Tail Feathers", "Rose Feathered Wings", "Pretty Pink Tail Bow", "Pink Wooly Tail", "Pink Wooly Coat", "Pink Wooly Antennae", "Sakura Lei", "Sakura Flower Crown", "Sakura Corsage", "Pink Satin Tunic", "Archivists Spellscroll", "Starseer's Emblem", "Pink Highnoon Hank", "Pink Daisy Cabbie", "Pretty Pink Arm Bow", "Pretty Pink Neck Bow", "Sweetheart Swan", "Ultraram", "Deeprealm Hunter", "Daydream Puffer", "Enchanting Goblin", "Marbled Serpenta", "Maren Currentfinder", "Deadly Reflection", "Granite Guardian", "Chalcedony Snipper", "Hawksbill Goliath", "Rhodochrosite Crane", "Spellbound Golem", "Mottled Buttersnake", "Dreameater","Amethyst Striker", "Bog Canary", "Weird Purple Skink", "Julii Corycat", "Aether Hermit", "Snowflake Urchin", "Egghead Infiltrator", "Subterranean Clover", "Black Tulip", "Peace Lily", "Blackberry", "Star Moss", "Leechroot Mushroom", "Starfall Blossom", "Engineered Strawberry", "Dark Creeper", "Aether Cherries", "Chewy Tentacle", "Cicada", "Cliffside Milkweed", "Crowntail Wanderer", "Decorated Turtle Shell", "Haunted Stone Orb", "Magical Shards", "Dark-Tufted Sparrowmouse", "Nightsky Fuiran", "Shadow Serpent", "Zeeba", "Rainbow Sprite", "Abyss Striker", "Maned Cobra", "Anomalous Skink", "Arcane Sprite", "Ethereal Trickster", "Mist Slash", "Dark Bolt", "Shroud", "Dark Might Fragment", "Dark Acuity Fragment", "Obsidian Hybrid Fragment", "Tricktrouper Crown", "Companion Comet", "Trickster's Magic Cards", "Mage's Nightshade Tunic", "Mage's Nightshade Overcoat", "Mage's Nightshade Hat", "Mage's Nightshade Bag", "Swallow's Shoulder Pads", "Twilight Sylvan Wings", "Twilight Sylvan Bracelets", "Twilight Sylvan Anklets", "Duskcheer Colony", "Prismatic Silk Scarf", "Prismatic Wing Silks", "Prismatic Arm Silks", "Bright Rogue Trousers", "Glowing Purple Clawtips", "Pretty Purple Tail Bow", "Pink and Purple Flair Scarf", "Purple Birdskull Legband", "Purple Birdskull Headdress", "Pink Satin Tunic", "Violet Flowerfall", "Shady Armband", "Pretty Purple Arm Bow", "Pretty Purple Neck Bow", "Hippalectryon", "Calculating Candelabra", "Painted Marionette", "Enamored Swan", "Shadow Sprite", "Bellus Glamortail", "Anomalous Skink", "Tender Larail","Olive Sea Snake", "Magpie", "Crested Newt", "Black Capped Budgie", "Blue Throated Budgie", "Mute Swan", "Juvenile Prairie Skink", "River Warden", "Moonbeam Sardines", "Sardines", "Clown Shrimp", "Flying Fish", "Glowslug", "Sea Fae", "Stubby Squid", "Green Corycat", "Blue Swimmer Crab", "Lagoon Guppy", "Blue Dragon Seaslug", "Crystal Jellyfish", "Wild Green Discus", "Snowflake Urchin", "Glow Star", "Frostbite Beetle", "Tundra Grub", "Blue Cricket", "Lunar Lacewing", "Wasteland Pauper", "Snowkissed Centipede", "Silt Sifter", "Zebra Caterpillar", "Water Strider", "Giant Darner", "Marsh Choker", "Glow Mushroom", "Blue Parrot Tulip", "Sour Spinach", "Stellaria Media", "Seaberry", "Spearmint", "Lume Daffodil", "Charged Duneberry", "Perfect Skipping Stone", "Skipping Stone", "Blue Quartz", "Labradorite", "Raw Lapis Lazuli", "Azurite", "Faded Blue Fabric", "Discarded Ribbon", "Snakeskin Cloth", "Apatite", "Celestine", "Blue Goo", "Blue Ooze", "Blue Sludge", "Bluefin Charger Fin", "Bluestreaked Shell", "Coal Carpenter", "Dwarf Truffle", "Blue Dragon Reef Snail", "Bramble Guardian", "River Muck", "Zalis", "Permafrost Impaler", "Venerable Shalebuck", "Bluemoon Aviar", "Snow Streak", "Poisonous Toridae", "Wartoad", "Octoflyer", "Maren Scout", "Construction Mith", "Frost Delver", "Blue Vein Pansy", "Gaseous Megashrimp", "Hippojay", "Nephrite Chameleon", "Snowsquall Floracat", "Leftover Residue", "Lesser Wisp", "Tourmaline Vulstal", "Frostbite Hummingbird", "Shimmering Xolo", "Roundhorn Melprin", "Hati", "Rivermouth Flatbill", "Bucktooth Digger", "Ice Sprite", "Water Sprite", "Polarfreeze Defender", "Wavebreak Snarler", "Ectoplasmine", "Jadecarved Decoy", "Slumbering Charlatan", "Fawn Fox Rat", "Mantarune", "Great Blue Waveskimmer", "Lightning Sprite", "Lightning Lancer", "Azure Highnoon Hank", "Cobalt Deepsea Bulb", "Laureate's Cap", "Blue Satin Tunic", "Blue Bandana", "Alchemist's Fez", "Umbral Wreath", "Blue Renaissance Shirt", "Blue Breeches", "Cobalt Shades", "Winter Wind", "Waverider Cape", "Yelling Wyrmpeck", "Pixie Procession", "Cloudy Feathered Wings", "Charged Might & Acuity Fragments", "Shock Bolt", "Thunder Slash", "Shock", "Frozen Might & Acuity Fragments", "Frigid Bolt", "Freezing Slash", "Congeal", "Aquatic Might & Acuity Fragments", "Hydro Bolt", "Wave Slash", "Drown", "Meditate", "Guard", "Ward", "Concentration", "Cleansing Elixir","Sunset Sea Dragon", "Deepsea Cucumber", "Dumpling Squid", "Corycat", "Golden Cushionfish", "Luminous Shortfin", "Golden Reefprince", "Canopy Darter", "Albino Dasher", "Dark-bordered Beauty", "Reedcleft Sparkler", "Jungle Mantis", "Wild Mustard", "Ashfall Prickler", "Granny Smith Apple", "Daffodil", "Sour Strawberry", "Sacridite", "Fool's Gold", "Canopic Jar", "Amber-Trapped Fly", "Gold Ore", "Turtle Shell", "Ancestral Incense", "Chrysoberyl", "Yellow Goo", "Yellow Ooze", "Yellow Sludge", "Yellow-Throated Sparrowmouse", "Cockatrice", "Longneck Wanderer", "Sunspot Clouddancer", "Brilliant Psywurm", "Salve Kamaitachi", "Wetland Unicorn", "Coppercoil Creeper", "Cheerful Residue", "Dwarf Unicorn", "Sköll", "Light Sprite", "Sunbeam Soldier", "Golden Idol", "Grasslands Trunker", "Gilded Crown", "Gold Wolf Cape", "Autumnal Wreath", "Golden Deepsea Bulb", "Amber Delver's Lamp", "Brass Cornet", "Wooden Pipeflute", "Gold Satin Tunic", "Gold Renaissance Shirt", "Gold Breeches", "Festival Jewelry", "Illuminated Emblem", "Sunchaser Jewelry", "Sunguard Chest", "Flame Bolt", "Bright Bolt", "Blinding Slash", "Bolster", "Clobber", "Major Health Potion","Balsas Anole", "Zephyr Sparrow", "Brown Spot Toad", "Toad", "Ruby-Throated Hummingbird", "White-Eared Hummingbird", "Emerald Ratsnake", "Tree Gecko", "Newt", "Emerald Striker", "Reedhopper", "Steppes Pincher", "Everglade Shortfin", "Glade Swarmer", "Leaf Beetle", "Cricket", "Grasshopper", "Alder Spittlebug", "Rhododendron Leafhopper", "Black Swallowtail Caterpillar", "Waterbug", "Runic Pug Moth", "Glowbug", "Highgrass Priest", "Cliff Lion", "Light's Breath", "Clover", "Jungle Grass", "Sea Grass", "Sweet Grass", "Diseased Fungus", "Crisp-Leaf Amaranth", "Greenstripe Amaranth", "Spinach", "Green Shoots", "Greater Plantain", "Broadleaf Plantain", "Arctic Scrub", "Green Algae", "Notocactus", "Tundra Cactus", "Sour Green Apple", "Prickly Pear", "Peppermint", "Green Plantain", "Jungle Lilies", "Pinwheel Paddies", "Jungle Raincatch", "Minty Jadevine", "Ivy", "Sand Creeper", "Malachite Agate", "Jade", "Raw Jade", "Moth-Eaten Rug", "Pine Branch", "Bamboo Shoot", "Bamboo Cluster", "Emerald", "Green Goo", "Green Ooze", "Green Sludge", "Leafy Moth", "Luna Mith", "Tufted Leaf Beetle", "Dryad", "Wildwood Owl", "Greenroot Janustrap", "Opheodrys Serthis", "Fuiran", "Gale Wolf", "Radioactive Slime", "Warcat Protector", "Budwing Morpho", "Hippocampus", "Harvest Floracat", "Heartred Croaker", "Cloud Chaser", "Mistral Minion", "Ringlet Amphithere", "King Parda", "Tuxedo Floracat", "Peacock Firebird", "Wind Sprite", "Nature Sprite", "Spined Cobra", "Red-Footed Akirbeak", "Boolean", "Fungusbearing Phony", "Strangler", "Woodland Headband", "Green Highnoon Hank", "Emerald Deepsea Bulb", "Poet's Tam", "Green and White Flair Scarf", "Blue and Green Flair Scarf", "Emerald Green Satin Tunic", "Green Olive Wreath", "Gladewalker Cape", "Paunchy Green Percher", "Emerald Talonclasp Pendant", "Cyan Delver's Lamp", "Canorous Spats", "Festival Items", "Electricians Emblem", "Electrified Sash", "Whirlwind Emblem", "Whirlwind Armband", "Windbound Plumage", "Druidic Emblem", "Druidic Armband", "Naturalist's Adornments", "Zephyr Bolt", "Gust Slash", "Disorient", "Leaf Bolt", "Jungle Slash", "Envenom", "Aid", "Regeneration", "Reflect","Fire Ant", "Harlequin Ladybug", "Earwig", "Red and Black Froghopper", "Lava Strider", "Wetland Vampire", "Ruby Tetras", "Red Emperor Tulip", "Blood Spath", "Winter's Delight", "Red Delicious Apple", "Strawberry", "Flameweed", "Coral Snake", "Rhodochrosite", "Bloodstone", "Jasper", "Red Linen Fabric Scrap", "Good Eater Award", "Ruby Ring", "Red Goo", "Red Ooze", "Red Sludge", "Iron Ore", "Tiny Feathers", "Sentinel Armor", "Sizzling Phosphorus", "Intricate Weaving", "Berserker's Belt", "Cerdae Sparkle", "Ornamental Sash", "Sakura Moss", "Simple Raptorik Sash", "Carmine Serthis", "Ancient Fungus", "Scarlet Flycatcher", "Crimson Reef Snail", "Cardinal Hippogriff", "Ruby Webwing", "Red-Breasted Hainu", "Bloodstone Beetle", "Nochnyr", "Molten Wartoad", "Magma Embear", "Firebreather Cape", "Corsair's Seaspray Kerchief", "Red Warrior Face Mask", "Infectionist's Emblem", "Infectionist's Armband", "Paunchy Red Percher", "Rose-Colored Shades", "Melodious Vest", "Nomad's Sandwastes Vest", "Cursed Talonclasp Pendant", "Rose Highnoon Hank", "Romantic Red Rose", "Little Red Riding Hood", "Ruby Deepsea Bulb", "Red Renaissance Shirt", "Red Breeches", "Seafarer's Shirt", "Red and Gold Flair Scarf", "Red Fedora", "Scarlet Satin Tunic", "Blood Red Wolf Cape", "Minor Health Potion", "Scratch", "Shred", "Eliminate","Panther Anole", "Firebearer", "Singed Lemming", "Glass Minnows", "Brilliant Bobtail Squid", "Serpae Tetras", "Chromodori Swimmer", "Discus", "Fire Ant", "Ladybug", "Cindershroom", "Wasteland Pear", "Copper Ore", "Infused Crystal", "Eye Agate", "Amber-Trapped Mosquito", "Banded Sardonyx", "Mangled Textile", "Painted Turtle Shell", "Aged Tome", "Amber", "Orange Goo", "Orange Ooze", "Orange Sludge", "Autumn Dryad", "Orange Blotch Pansy", "Clown Charger", "Baku", "Clown Hippocampus", "Proto Manticore", "Ultramel Amphithere", "Golden Porpoise", "Conjoined Skink", "Fire Sprite", "Molten Marauder", "Mock Firebird", "Autumn Breeze", "Sunrise Hibiscus", "Runebead Necklace", "Searing Armband & Necklace", "Citrine Talonclasp Pendant", "Gold Satin Tunic", "Copper Glasses", "Copper Halfmoon Spectacles", "Hip Copper Frames", "Blazing Slash", "Sear", "Rally", "Health Potion", "Berserker"};
        HordeItemField1.setText(genThing(items));	HordeItemField2.setText(genThing(items));	HordeItemField3.setText(genThing(items));	HordeItemField4.setText(genThing(items));	HordeItemField5.setText(genThing(items));	HordeItemField6.setText(genThing(items));	HordeItemField7.setText(genThing(items));	HordeItemField8.setText(genThing(items));
      int sum = 0; 
        do { sum = 0; 
        int n = (int)(Math.random()*10); StrengthField.setValue(n); sum += n;
        n = (int)(Math.random()*10); MagicField.setValue(n); sum += n; 
        n = (int)(Math.random()*10); DefenseField.setValue(n); sum += n;
        n = (int)(Math.random()*10); CharismaField.setValue(n); sum += n;
        n = (int)(Math.random()*10); IntelligenceField.setValue(n); sum += n; }  while (sum != 25);
    }//GEN-LAST:event_RandomizeButtonActionPerformed

    private void GenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateButtonActionPerformed
        // TODO add your handling code here:
        
        String a[] = {"Name 0","Trait1 1","Trait2 2","Trait3 3","Trait4 4","Job 5","Item1 6","Item2 7","Item3 8","Strength 9","Magic 10","Defense 11","Charisma 12","Intelligence 13"};
        String b[] = new String[8]; //hoard items
        String c[] = {"ShortQuote 0","LongQuote 1","TopPara 2","BottomPara 3"};
        a[0] = NameField.getText(); a[1] = TraitField1.getText(); a[2] = TraitField2.getText(); a[3] = TraitField3.getText(); a[4] = TraitField4.getText();
        a[5] = JobField.getText(); a[6] = ItemField1.getText(); a[7] = ItemField2.getText(); a[8] = ItemField3.getText(); 
        b[0] = HordeItemField1.getText(); b[1] = HordeItemField2.getText();	b[2] = HordeItemField3.getText();	b[3] = HordeItemField4.getText();	b[4] = HordeItemField5.getText();	b[5] = HordeItemField6.getText();	b[6] = HordeItemField7.getText();	b[7] = HordeItemField8.getText();
        c[0] = ShortQuoteField.getText(); c[1] = LongParagraphField.getText(); c[2] = TopField.getText(); c[3] = BottomField.getText(); 
        
        String d[][] = {{"light","light runestone","light sprite","Illuminated Emblem","http://i.imgur.com/04zuVdZ.png","http://www1.flightrising.com/static/layout/revamp/banners/light_small.png","http://i.imgur.com/xmfHZR7.png","http://i951.photobucket.com/albums/ad355/Liirarwen/lightbannerv_zpsdqpkxwdc.png"},{"ice","ice runestone","ice sprite","Frigid Emblem","http://i.imgur.com/W5yYt67.png","http://www1.flightrising.com/static/layout/revamp/banners/ice_small.png","http://i.imgur.com/x2VUE5b.png","http://i951.photobucket.com/albums/ad355/Liirarwen/icebannerv_zpsyni27tz0.png"},{"shadow","shadow runestone","shadow sprite","Shady Emblem","http://i.imgur.com/Svh7LqW.png","http://www1.flightrising.com/static/layout/revamp/banners/shadow_small.png","http://i.imgur.com/e2k5iaE.png","http://i951.photobucket.com/albums/ad355/Liirarwen/shadowbannerv2_zpspfwr8vah.png"},{"wind","wind runestone","wind sprite","Whirlwind Emblem","http://i.imgur.com/XNkqRjm.png","http://www1.flightrising.com/static/layout/revamp/banners/wind_small.png","http://www1.flightrising.com/static/cms/familiar/art/21979.png","http://i951.photobucket.com/albums/ad355/Liirarwen/winddividerv_zpsrplmbxtq.png"},{"water","water runestone","water sprite","Diver Emblem","http://i.imgur.com/Tr7vGlh.png","http://www1.flightrising.com/static/layout/revamp/banners/water_small.png","http://i.imgur.com/DvqvtNq.png","http://i951.photobucket.com/albums/ad355/Liirarwen/waterbannerv2_zpseeuinqnt.png"},{"nature","nature runestone","nature sprite","Druidic Emblem","http://i.imgur.com/tgc0F1b.png","http://www1.flightrising.com/static/layout/revamp/banners/nature_small.png","http://i.imgur.com/91gaEsf.png","http://i951.photobucket.com/albums/ad355/Liirarwen/naturebannerv2_zpsi4bvnh6w.png"},{"lightning","lightning runestone","lightning sprite","Electricians Emblem","http://i.imgur.com/LVW7sXb.png","http://www1.flightrising.com/static/layout/revamp/banners/lightning_small.png","http://i.imgur.com/bX6L9tp.png","http://i951.photobucket.com/albums/ad355/Liirarwen/lightningbannerv_zpsukoefsoj.png"},{"fire","fire runestone","fire sprite","Searing Emblem","http://i.imgur.com/evHfac0.png","http://www1.flightrising.com/static/layout/revamp/banners/fire_small.png","http://i.imgur.com/nAgw7xX.png","http://i951.photobucket.com/albums/ad355/Liirarwen/firebannerv1_zpsbvwcwmel.png"},{"arcane","arcane runestone","arcane sprite","Starseer's Emblem","http://i.imgur.com/TqqIOsb.png","http://www1.flightrising.com/static/layout/revamp/banners/arcane_small.png","http://i.imgur.com/6GqpNyr.png","http://i951.photobucket.com/albums/ad355/Liirarwen/arcanebannerv2_zpsloezslef.png"},{"plague","plague runestone","plague sprite","Infectionist's Emblem","http://i.imgur.com/Dy1LUFE.png","http://www1.flightrising.com/static/layout/revamp/banners/plague_small.png","http://i.imgur.com/raGXmZZ.png","http://i951.photobucket.com/albums/ad355/Liirarwen/plaguebannerv1_zpsegczsgqn.png"},{"earth","earth runestone","earth sprite","Stonekeeper's Emblem","http://i.imgur.com/sX4Ho7I.png","http://www1.flightrising.com/static/layout/revamp/banners/earth_small.png","http://i.imgur.com/wjnuI2M.png","http://i951.photobucket.com/albums/ad355/Liirarwen/earthdividerv2_zpszvpcyrle.png"}};
        //{"Flight 0","Flight Runestone 1","Flight Familiar 2","Flight Emblem 3","Horizontal Divider 4","Flag 5","Goblin 6","Sidebar 7"};
        Map<String, String> map = new HashMap<String, String>();
        map.put("light","0");	map.put("ice","1");	map.put("shadow","2");	map.put("wind","3");	map.put("water","4");	map.put("nature","5");	map.put("lightning","6");	map.put("fire","7");	map.put("arcane","8");	map.put("plague","9");	map.put("earth","10");
        String flight = FlightField.getSelectedItem().toString().toLowerCase(); 
        String e[][] = {{"#A99323","#F9F1AA"},{"#425A89","#C2DAFF"},{"#663E78","#D4B0E9"},{"#6C7C2B","#CADD86"},{"#2368BE","#8FDCF3"},{"#327536","#90D66B"},{"#297A7B","#92E6DB"},{"#DC541E","#F4CA55"},{"#81246C","#F88DD2"},{"#672910","#DD6B66"},{"#80674A","#D9D0AE"}};
        String dc = e[Integer.parseInt(map.get(flight))][0]; String ac = e[Integer.parseInt(map.get(flight))][1];
        
        a[0] = a[0].toUpperCase();
        String temp = "";
        for(int i = 0; i < a[0].length(); i++) {
            temp += a[0].charAt(i)+" ";
        }
        a[0] = temp;
        
        temp = "";
        for (int i = 0; i<StrengthField.getValue(); i++) {
            temp += "✦";
        }
        temp += "[/color][color="+ac+"]";
        for (int i = 0; i<10-StrengthField.getValue(); i++) {
            temp += "✧";
        }
        a[9] = temp;
        
        temp = "";
        for (int i = 0; i<MagicField.getValue(); i++) {
            temp += "✦";
        }
        temp += "[/color][color="+ac+"]";
        for (int i = 0; i<10-MagicField.getValue(); i++) {
            temp += "✧";
        }
        a[10] = temp;
        
        temp = "";
        for (int i = 0; i<DefenseField.getValue(); i++) {
            temp += "✦";
        }
        temp += "[/color][color="+ac+"]";
        for (int i = 0; i<10-DefenseField.getValue(); i++) {
            temp += "✧";
        }
        a[11] = temp;
        
        temp = "";
        for (int i = 0; i<CharismaField.getValue(); i++) {
            temp += "✦";
        }
        temp += "[/color][color="+ac+"]";
        for (int i = 0; i<10-CharismaField.getValue(); i++) {
            temp += "✧";
        }
        a[12] = temp;
        
        temp = "";
        for (int i = 0; i<IntelligenceField.getValue(); i++) {
            temp += "✦";
        }
        temp += "[/color][color="+ac+"]";
        for (int i = 0; i<10-IntelligenceField.getValue(); i++) {
            temp += "✧";
        }
        a[13] = temp;
        
        String bio = "";
        bio += "[center][color=black][size=6][b]"+a[0]+"[/b][/size]\n" +
""+a[1]+" | "+a[2]+" | "+a[3]+" | "+a[4]+" | "+a[5]+"\n" +
"\n" +
"[columns]\n" +
"[Color="+dc+"]Strength\n" +
""+a[9]+"[/color]\n" +
"[color="+dc+"]Magic\n" +
""+a[10]+"[/color]\n" +
"[color="+dc+"]Defense\n" +
""+a[11]+"[/color]\n" +
"[color="+dc+"]Charisma\n" +
""+a[12]+"[/color]\n" +
"[color="+dc+"]Intelligence\n" +
""+a[13]+"[/color]\n" +
"\n" +
"[url="+URLField.getText()+"][img]"+IMGField.getText()+"[/img][/url]\n" +
"[size=1]Gallery[/size]\n" +
"[nextcol][size=3][b]Personality[/b] "+c[2]+"[/size]\n" +
"\n" +
"[nextcol]\n" +
"[i]"+c[0]+"[/i]\n" +
"\n" +
"[center]\n" +
"[item="+a[6]+"]\n" +
"[item="+a[7]+"]\n" +
"[item="+a[8]+"][/center]\n" +
"[/columns]\n" +
"\n" +
"[img]"+d[Integer.parseInt(map.get(flight))][4]+"[/img]\n" +
"\n" +
"[columns][img]"+d[Integer.parseInt(map.get(flight))][5]+"[/img][nextcol][size=3]Long long long long long long long long long long long long Long long long long long long long long long long long long quote here[/size][nextcol][img]"+d[Integer.parseInt(map.get(flight))][5]+"[/img][/columns]\n" +
"\n" +
"[columns]\n" +
"[img]"+d[Integer.parseInt(map.get(flight))][6]+"[/img]\n" +
"[nextcol]\n" +
"[b]Hoard[/b]\n" +
"[item="+b[0]+"][item="+b[1]+"][item="+b[2]+"][item="+b[3]+"][item="+b[4]+"][item="+b[5]+"][item="+b[6]+"][item="+b[7]+"]\n" +
"[/columns]\n" +
"\n" +
"[img]"+d[Integer.parseInt(map.get(flight))][4]+"[/img]\n" +
"\n" +
"[columns]\n" +
"[img]"+d[Integer.parseInt(map.get(flight))][7]+"[/img]\n" +
"[nextcol]\n" +
"[left][size=3][b]History[/b] "+c[3]+"\n" +
"\n[/columns]" +
"[img]"+d[Integer.parseInt(map.get(flight))][4]+"[/img]";
        OutputField.setText(bio);
    }//GEN-LAST:event_GenerateButtonActionPerformed

    private void CreditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreditButtonActionPerformed
        // TODO add your handling code here:
          String url = "http://flightrising.com/main.php?p=lair&tab=userpage&id=160158";
        try {
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        } catch (IOException ex) {
            Logger.getLogger(ColoradoBluesGUI.class.getName()).log(Level.SEVERE, null, ex); } 
        
    }//GEN-LAST:event_CreditButtonActionPerformed

    private void FlightFieldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FlightFieldItemStateChanged
        // TODO add your handling code here:
        String d[][] = {{"light","light runestone","light sprite","Illuminated Emblem","http://i.imgur.com/04zuVdZ.png","http://www1.flightrising.com/static/layout/revamp/banners/light_small.png","http://i.imgur.com/xmfHZR7.png","http://i951.photobucket.com/albums/ad355/Liirarwen/lightbannerv_zpsdqpkxwdc.png"},{"ice","ice runestone","ice sprite","Frigid Emblem","http://i.imgur.com/W5yYt67.png","http://www1.flightrising.com/static/layout/revamp/banners/ice_small.png","http://i.imgur.com/x2VUE5b.png","http://i951.photobucket.com/albums/ad355/Liirarwen/icebannerv_zpsyni27tz0.png"},{"shadow","shadow runestone","shadow sprite","Shady Emblem","http://i.imgur.com/Svh7LqW.png","http://www1.flightrising.com/static/layout/revamp/banners/shadow_small.png","http://i.imgur.com/e2k5iaE.png","http://i951.photobucket.com/albums/ad355/Liirarwen/shadowbannerv2_zpspfwr8vah.png"},{"wind","wind runestone","wind sprite","Whirlwind Emblem","http://i.imgur.com/XNkqRjm.png","http://www1.flightrising.com/static/layout/revamp/banners/wind_small.png","http://www1.flightrising.com/static/cms/familiar/art/21979.png","http://i951.photobucket.com/albums/ad355/Liirarwen/winddividerv_zpsrplmbxtq.png"},{"water","water runestone","water sprite","Diver Emblem","http://i.imgur.com/Tr7vGlh.png","http://www1.flightrising.com/static/layout/revamp/banners/water_small.png","http://i.imgur.com/DvqvtNq.png","http://i951.photobucket.com/albums/ad355/Liirarwen/waterbannerv2_zpseeuinqnt.png"},{"nature","nature runestone","nature sprite","Druidic Emblem","http://i.imgur.com/tgc0F1b.png","http://www1.flightrising.com/static/layout/revamp/banners/nature_small.png","http://i.imgur.com/91gaEsf.png","http://i951.photobucket.com/albums/ad355/Liirarwen/naturebannerv2_zpsi4bvnh6w.png"},{"lightning","lightning runestone","lightning sprite","Electrician's Emblem","http://i.imgur.com/LVW7sXb.png","http://www1.flightrising.com/static/layout/revamp/banners/lightning_small.png","http://i.imgur.com/bX6L9tp.png","http://i951.photobucket.com/albums/ad355/Liirarwen/lightningbannerv_zpsukoefsoj.png"},{"fire","fire runestone","fire sprite","Searing Emblem","http://i.imgur.com/evHfac0.png","http://www1.flightrising.com/static/layout/revamp/banners/fire_small.png","http://i.imgur.com/nAgw7xX.png","http://i951.photobucket.com/albums/ad355/Liirarwen/firebannerv1_zpsbvwcwmel.png"},{"arcane","arcane runestone","arcane sprite","Starseer's Emblem","http://i.imgur.com/TqqIOsb.png","http://www1.flightrising.com/static/layout/revamp/banners/arcane_small.png","http://i.imgur.com/6GqpNyr.png","http://i951.photobucket.com/albums/ad355/Liirarwen/arcanebannerv2_zpsloezslef.png"},{"plague","plague runestone","plague sprite","Infectionist's Emblem","http://i.imgur.com/Dy1LUFE.png","http://www1.flightrising.com/static/layout/revamp/banners/plague_small.png","http://i.imgur.com/raGXmZZ.png","http://i951.photobucket.com/albums/ad355/Liirarwen/plaguebannerv1_zpsegczsgqn.png"},{"earth","earth runestone","earth sprite","Stonekeeper Emblem","http://i.imgur.com/sX4Ho7I.png","http://www1.flightrising.com/static/layout/revamp/banners/earth_small.png","http://i.imgur.com/wjnuI2M.png","http://i951.photobucket.com/albums/ad355/Liirarwen/earthdividerv2_zpszvpcyrle.png"}};
        //{"Flight 0","Flight Runestone 1","Flight Familiar 2","Flight Emblem 3","Horizontal Divider 4","Flag 5","Goblin 6","Sidebar 7"};
        Map<String, String> map = new HashMap<String, String>();
        map.put("light","0");	map.put("ice","1");	map.put("shadow","2");	map.put("wind","3");	map.put("water","4");	map.put("nature","5");	map.put("lightning","6");	map.put("fire","7");	map.put("arcane","8");	map.put("plague","9");	map.put("earth","10");
        String flight = FlightField.getSelectedItem().toString().toLowerCase(); 
        ItemField1.setText(d[Integer.parseInt(map.get(flight))][1]);
        ItemField2.setText(d[Integer.parseInt(map.get(flight))][2]);
        ItemField3.setText(d[Integer.parseInt(map.get(flight))][3]);
    }//GEN-LAST:event_FlightFieldItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ColoradoBluesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ColoradoBluesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ColoradoBluesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ColoradoBluesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ColoradoBluesGUI().setVisible(true);
            }
        });
    }
        public static String genThing(String[] mats) {
        int num = (int)(Math.random()*mats.length);
        return mats[num];
        }
    public static String genName() {
  String[] prefix = {"anti","auto","de","dis","down","extra","hyper","il","im","in","ir","inter","mega","mid","mis","non","over","out","post","pre","pro","re","semi","sub","sub","super","tele","trans","ultra","un","under","up"};
  String[] firCon = {"t", "n", "s", "r", "d", "f", "c", "b", "z"};
  String[] secCon = {"r", "h", "s","v"};
  String[] firVow = {"e", "a", "i", "o", "oo", "u"};
  String[] thiCon = {"t", "v", "w", "x", "ck", "g", "p", "ch", "sh","ph","rr",};
  String[] secVow = {"e", "i", "o","a","u"}; 
  String[] fouCon = {"r", "s", "y","de","x","ra","le",};
  String[] suffix = {"iode","able","ac","acity","ocity","ade","age","aholic","oholic","al","algia","an","ian","ance","ant","ar","ard","arian","arium","orium","ary","ation","ate","ative","cide","cracy","crat","cule","cy","cycle","dom","dox","ed","ee","ectomy","eer","emia","en","ence","ency","ent","er","ern","escence","ese","esque","ess","est","etic","ette","ful","fy","gam","gamy","gon","gonic","hood","ial","ian","iasis","iatric","ible","ic","ical","ile","ily","ine","ing","ion","ious","ish","ism","ist","ite","itis","ity","ive","ization","ize","less","let","like","ling","loger","logist","log","ly","ment","ness","oid","ology","oma","onym","opia","opsy","or","ory","osis","ostomy","otomy","ous","path","pathy","phile","phobia","phone","phyte","plegia","plegic","pnea","scopy","scope","scribe","script","sect","ship","sion","some","sophy","sophic","th","tion","tome","tomy","tude","trophy","tude","ty","ular","uous","ure","ward","ware","wise"};
  int numnum = (int)(Math.random() * 100000);  
  String result = " ";         
        //start with the prefix
        if(Math.random() < .5) {
            result += prefix[(int)(Math.random() * prefix.length)];
        }
        
        //then the first consonant
        if(Math.random() < .7) {
            result += firCon[(int)(Math.random() * firCon.length)];
        }
        
        //then the possible second consonant
        if(Math.random() < .4) {
            result += secCon[(int)(Math.random() * secCon.length)];
        }
        
        //then the first vowel
        if(Math.random() < .9) {
            result += firVow[(int)(Math.random() * firVow.length)];
        }
        
        //then the third consonant
        if(Math.random() < .8) {
            result += thiCon[(int)(Math.random() * thiCon.length)];
        }
        
        //then the second vowel
        if(Math.random() < .6) {
            result += secVow[(int)(Math.random() * secVow.length)];
        }
        
        //then the fourth consonant
        if(Math.random() < .5) {
            result += fouCon[(int)(Math.random() * fouCon.length)];
        }
        
        //possibly another vowel?
        if(Math.random() < .5) {
            result += secVow[(int)(Math.random() * secVow.length)];
        }
        
        //then the suffix
        if (Math.random() < .5) {
            result += suffix[(int)(Math.random() * suffix.length)];
        }
        
        //if it's short, then maybe repeat it. (Seg -> Segseg)
        if (Math.random() < .7 && (result.length() < 6)) {
        result += result.substring(1,result.length());
        }
        
        //lastly, capitalize the first letter.
        String temp1 = result.substring(1,2);
        String temp2 = result.substring(2,result.length());
        temp1 = temp1.toUpperCase();
        result = temp1 + temp2;
        
        //if it's too long, delete it. 
        if (result.length() > 9) {
             result = result.substring(0,8);
        }  
        return result;     
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea BottomField;
    private javax.swing.JSlider CharismaField;
    private javax.swing.JButton CreditButton;
    private javax.swing.JSlider DefenseField;
    private javax.swing.JComboBox<String> FlightField;
    private javax.swing.JButton GenerateButton;
    private javax.swing.JTextField HordeItemField1;
    private javax.swing.JTextField HordeItemField2;
    private javax.swing.JTextField HordeItemField3;
    private javax.swing.JTextField HordeItemField4;
    private javax.swing.JTextField HordeItemField5;
    private javax.swing.JTextField HordeItemField6;
    private javax.swing.JTextField HordeItemField7;
    private javax.swing.JTextField HordeItemField8;
    private javax.swing.JTextField IMGField;
    private javax.swing.JSlider IntelligenceField;
    private javax.swing.JTextField ItemField1;
    private javax.swing.JTextField ItemField2;
    private javax.swing.JTextField ItemField3;
    private javax.swing.JTextField JobField;
    private javax.swing.JTextField LongParagraphField;
    private javax.swing.JSlider MagicField;
    private javax.swing.JTextField NameField;
    private javax.swing.JTextArea OutputField;
    private javax.swing.JButton RandomizeButton;
    private javax.swing.JTextField ShortQuoteField;
    private javax.swing.JSlider StrengthField;
    private javax.swing.JTextArea TopField;
    private javax.swing.JTextField TraitField1;
    private javax.swing.JTextField TraitField2;
    private javax.swing.JTextField TraitField3;
    private javax.swing.JTextField TraitField4;
    private javax.swing.JTextField URLField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}

