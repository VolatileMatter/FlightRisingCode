
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Isabel
 */
public class gui extends javax.swing.JFrame {

    /**
     * Creates new form gui
     */
    
    bio current = new bio();
    
    public gui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        HealthField = new javax.swing.JSlider();
        StrengthField = new javax.swing.JSlider();
        SpeedField = new javax.swing.JSlider();
        AgilityField = new javax.swing.JSlider();
        ReflexesField = new javax.swing.JSlider();
        MagicField = new javax.swing.JSlider();
        IntellectField = new javax.swing.JSlider();
        CharismaField = new javax.swing.JSlider();
        WillpowerField = new javax.swing.JSlider();
        LuckField = new javax.swing.JSlider();
        jPanel3 = new javax.swing.JPanel();
        NameField = new javax.swing.JTextField();
        JobField = new javax.swing.JTextField();
        FactionField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        FlightField = new javax.swing.JComboBox<>();
        AlignField = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        MadeButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        OutputField = new javax.swing.JTextArea();
        GenerateButton = new javax.swing.JButton();
        HoardColorField = new javax.swing.JComboBox<>();
        RandomButton = new javax.swing.JButton();
        RanRatToggle = new javax.swing.JToggleButton();
        jPanel6 = new javax.swing.JPanel();
        Like1Field = new javax.swing.JTextField();
        Like2Field = new javax.swing.JTextField();
        Like3Field = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        Dislike1Field = new javax.swing.JTextField();
        Dislike2Field = new javax.swing.JTextField();
        Dislike3Field = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        Fear1Field = new javax.swing.JTextField();
        Fear2Field = new javax.swing.JTextField();
        Fear3Field = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        Hoard1Field = new javax.swing.JTextField();
        Hoard2Field = new javax.swing.JTextField();
        Hoard3Field = new javax.swing.JTextField();
        Hoard4Field = new javax.swing.JTextField();
        Hoard5Field = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        r1tField = new javax.swing.JTextField();
        r1uField = new javax.swing.JTextField();
        r2tField = new javax.swing.JTextField();
        r2uField = new javax.swing.JTextField();
        r3tField = new javax.swing.JTextField();
        r3uField = new javax.swing.JTextField();
        r4tField = new javax.swing.JTextField();
        r4uField = new javax.swing.JTextField();
        r5tField = new javax.swing.JTextField();
        r5uField = new javax.swing.JTextField();
        r6tField = new javax.swing.JTextField();
        r6uField = new javax.swing.JTextField();
        r7tField = new javax.swing.JTextField();
        r7uField = new javax.swing.JTextField();
        r8uField = new javax.swing.JTextField();
        r8tField = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        l1Field = new javax.swing.JTextField();
        l2Field = new javax.swing.JTextField();
        l3Field = new javax.swing.JTextField();
        l4Field = new javax.swing.JTextField();
        l5Field = new javax.swing.JTextField();
        l6Field = new javax.swing.JTextField();
        l7Field = new javax.swing.JTextField();
        l8Field = new javax.swing.JTextField();
        l9Field = new javax.swing.JTextField();
        l10Field = new javax.swing.JTextField();
        l11Field = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        ThemeURLField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        HealthField.setBackground(new java.awt.Color(255, 255, 255));
        HealthField.setMajorTickSpacing(1);
        HealthField.setMaximum(10);
        HealthField.setPaintLabels(true);
        HealthField.setPaintTicks(true);
        HealthField.setSnapToTicks(true);
        HealthField.setValue(5);
        HealthField.setBorder(javax.swing.BorderFactory.createTitledBorder("Health"));

        StrengthField.setBackground(new java.awt.Color(255, 255, 255));
        StrengthField.setMajorTickSpacing(1);
        StrengthField.setMaximum(10);
        StrengthField.setPaintLabels(true);
        StrengthField.setPaintTicks(true);
        StrengthField.setSnapToTicks(true);
        StrengthField.setValue(5);
        StrengthField.setBorder(javax.swing.BorderFactory.createTitledBorder("Strength"));

        SpeedField.setBackground(new java.awt.Color(255, 255, 255));
        SpeedField.setMajorTickSpacing(1);
        SpeedField.setMaximum(10);
        SpeedField.setPaintLabels(true);
        SpeedField.setPaintTicks(true);
        SpeedField.setSnapToTicks(true);
        SpeedField.setValue(5);
        SpeedField.setBorder(javax.swing.BorderFactory.createTitledBorder("Speed"));

        AgilityField.setBackground(new java.awt.Color(255, 255, 255));
        AgilityField.setMajorTickSpacing(1);
        AgilityField.setMaximum(10);
        AgilityField.setPaintLabels(true);
        AgilityField.setPaintTicks(true);
        AgilityField.setSnapToTicks(true);
        AgilityField.setValue(5);
        AgilityField.setBorder(javax.swing.BorderFactory.createTitledBorder("Agility"));

        ReflexesField.setBackground(new java.awt.Color(255, 255, 255));
        ReflexesField.setMajorTickSpacing(1);
        ReflexesField.setMaximum(10);
        ReflexesField.setPaintLabels(true);
        ReflexesField.setPaintTicks(true);
        ReflexesField.setSnapToTicks(true);
        ReflexesField.setValue(5);
        ReflexesField.setBorder(javax.swing.BorderFactory.createTitledBorder("Reflexes"));

        MagicField.setBackground(new java.awt.Color(255, 255, 255));
        MagicField.setMajorTickSpacing(1);
        MagicField.setMaximum(10);
        MagicField.setPaintLabels(true);
        MagicField.setPaintTicks(true);
        MagicField.setSnapToTicks(true);
        MagicField.setValue(5);
        MagicField.setBorder(javax.swing.BorderFactory.createTitledBorder("Magic"));

        IntellectField.setBackground(new java.awt.Color(255, 255, 255));
        IntellectField.setMajorTickSpacing(1);
        IntellectField.setMaximum(10);
        IntellectField.setPaintLabels(true);
        IntellectField.setPaintTicks(true);
        IntellectField.setSnapToTicks(true);
        IntellectField.setValue(5);
        IntellectField.setBorder(javax.swing.BorderFactory.createTitledBorder("Intellect"));

        CharismaField.setBackground(new java.awt.Color(255, 255, 255));
        CharismaField.setMajorTickSpacing(1);
        CharismaField.setMaximum(10);
        CharismaField.setPaintLabels(true);
        CharismaField.setPaintTicks(true);
        CharismaField.setSnapToTicks(true);
        CharismaField.setValue(5);
        CharismaField.setBorder(javax.swing.BorderFactory.createTitledBorder("Charisma"));

        WillpowerField.setBackground(new java.awt.Color(255, 255, 255));
        WillpowerField.setMajorTickSpacing(1);
        WillpowerField.setMaximum(10);
        WillpowerField.setPaintLabels(true);
        WillpowerField.setPaintTicks(true);
        WillpowerField.setSnapToTicks(true);
        WillpowerField.setValue(5);
        WillpowerField.setBorder(javax.swing.BorderFactory.createTitledBorder("Willpower"));

        LuckField.setBackground(new java.awt.Color(255, 255, 255));
        LuckField.setMajorTickSpacing(1);
        LuckField.setMaximum(10);
        LuckField.setPaintLabels(true);
        LuckField.setPaintTicks(true);
        LuckField.setSnapToTicks(true);
        LuckField.setValue(5);
        LuckField.setBorder(javax.swing.BorderFactory.createTitledBorder("Luck"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HealthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StrengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SpeedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AgilityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ReflexesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MagicField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IntellectField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CharismaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WillpowerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LuckField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(HealthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StrengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SpeedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AgilityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ReflexesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MagicField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IntellectField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CharismaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WillpowerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LuckField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        NameField.setText("Unnamed");
        NameField.setBorder(javax.swing.BorderFactory.createTitledBorder("Name"));

        JobField.setText("None");
        JobField.setBorder(javax.swing.BorderFactory.createTitledBorder("Job"));

        FactionField.setText("N/A");
        FactionField.setBorder(javax.swing.BorderFactory.createTitledBorder("Faction"));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NameField, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(JobField)
                    .addComponent(FactionField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JobField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FactionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        FlightField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fire", "Ice", "Shadow", "Light", "Lightning", "Plague", "Arcane", "Earth", "Nature", "Water", "Wind", "" }));

        AlignField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Neutral Neutral", "Lawful Neutral", "Chaotic Neutral", "Lawful Evil", "Chaotic Evil", "Neutral Evil", "Lawful Good", "Neutral Good", "Chaotic Good" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FlightField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AlignField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FlightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AlignField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setRollover(true);

        MadeButton.setText("Made by VolatileMatter #160158");
        MadeButton.setFocusable(false);
        MadeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        MadeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        MadeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MadeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(MadeButton);

        ExitButton.setText("Exit");
        ExitButton.setFocusable(false);
        ExitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ExitButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(ExitButton);

        OutputField.setColumns(20);
        OutputField.setLineWrap(true);
        OutputField.setRows(5);
        OutputField.setWrapStyleWord(true);
        jScrollPane2.setViewportView(OutputField);

        GenerateButton.setText("Generate");
        GenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateButtonActionPerformed(evt);
            }
        });

        HoardColorField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Orange", "Yellow", "Green", "Blue", "Purple", "Pink" }));
        HoardColorField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoardColorFieldActionPerformed(evt);
            }
        });

        RandomButton.setText("Random");
        RandomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomButtonActionPerformed(evt);
            }
        });

        RanRatToggle.setText("Randomize Relationship Titles?");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(RandomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GenerateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(RanRatToggle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(HoardColorField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RanRatToggle)
                .addGap(1, 1, 1)
                .addComponent(HoardColorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RandomButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GenerateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Like1Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Like 1"));

        Like2Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Like 2"));

        Like3Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Like 3"));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Like1Field)
                    .addComponent(Like2Field)
                    .addComponent(Like3Field))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Like1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Like2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Like3Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Dislike1Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Dislike 1"));

        Dislike2Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Dislike 2"));

        Dislike3Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Dislike 3"));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Dislike1Field, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Dislike2Field)
                    .addComponent(Dislike3Field))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Dislike1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Dislike2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Dislike3Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Fear1Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Fear 1"));

        Fear2Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Fear 2"));

        Fear3Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Fear 3"));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Fear1Field)
                    .addComponent(Fear2Field)
                    .addComponent(Fear3Field))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Fear1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Fear2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Fear3Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Hoard1Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Hoard Item 1"));

        Hoard2Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Hoard Item 2"));

        Hoard3Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Hoard Item 3"));

        Hoard4Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Hoard Item 4"));

        Hoard5Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Hoard Item 5"));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Hoard1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hoard2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hoard3Field, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hoard4Field, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hoard5Field, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Hoard1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Hoard2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Hoard3Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Hoard4Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Hoard5Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        r1tField.setText("Mate");
        r1tField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 1 Title"));

        r1uField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 1 URL"));

        r2tField.setText("Best Friend");
        r2tField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 2 Title"));

        r2uField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 2 URL"));

        r3tField.setText("Friend");
        r3tField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 3 Title"));

        r3uField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 3 URL"));

        r4tField.setText("Friend");
        r4tField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 4 Title"));

        r4uField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 4 URL"));

        r5tField.setText("Friend");
        r5tField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 5 Title"));

        r5uField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 5 URL"));

        r6tField.setText("Colleague");
        r6tField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 6 Title"));

        r6uField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 6 URL"));

        r7tField.setText("Colleague");
        r7tField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 7 Title"));

        r7uField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 7 URL"));

        r8uField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 8 URL"));

        r8tField.setText("Enemy");
        r8tField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relationship 8 Title"));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r1tField)
                    .addComponent(r1uField)
                    .addComponent(r2tField, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(r2uField)
                    .addComponent(r3tField)
                    .addComponent(r3uField)
                    .addComponent(r4tField)
                    .addComponent(r4uField)
                    .addComponent(r5tField)
                    .addComponent(r5uField)
                    .addComponent(r6tField)
                    .addComponent(r6uField)
                    .addComponent(r7tField)
                    .addComponent(r7uField)
                    .addComponent(r8tField)
                    .addComponent(r8uField))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(r1tField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r1uField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r2tField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r2uField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r3tField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r3uField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r4tField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r4uField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r5tField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r5uField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r6tField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r6uField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r7tField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r7uField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r8tField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(r8uField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        l1Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Link 1"));

        l2Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Link 2"));

        l3Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Link 3"));

        l4Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Link 4"));

        l5Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Link 5"));

        l6Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Link 6"));

        l7Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Link 7"));

        l8Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Link 8"));

        l9Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Link 9"));

        l10Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Link 10"));

        l11Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Link 11"));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l1Field)
                    .addComponent(l2Field)
                    .addComponent(l3Field)
                    .addComponent(l4Field)
                    .addComponent(l5Field)
                    .addComponent(l6Field)
                    .addComponent(l7Field)
                    .addComponent(l8Field, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(l9Field)
                    .addComponent(l10Field)
                    .addComponent(l11Field, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(l1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l3Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l4Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l5Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l6Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l7Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l8Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l9Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l10Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l11Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ThemeURLField.setText("https://www.youtube.com");
        ThemeURLField.setToolTipText("");
        ThemeURLField.setBorder(javax.swing.BorderFactory.createTitledBorder("Theme Music URL"));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ThemeURLField, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ThemeURLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 86, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1132, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HoardColorFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoardColorFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HoardColorFieldActionPerformed

    private void RandomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomButtonActionPerformed
        // TODO add your handling code here:
        current.genName(); current.genTraits(); current.setCol(HoardColorField.getSelectedItem().toString()); current.genHoard(); current.genStats(); current.genAlign();
        NameField.setText(current.getTrait(0)); JobField.setText(current.getTrait(1));
        Like1Field.setText(current.getTrait(5)); Like2Field.setText(current.getTrait(6)); Like3Field.setText(current.getTrait(7));
        Dislike1Field.setText(current.getTrait(8)); Dislike2Field.setText(current.getTrait(9)); Dislike3Field.setText(current.getTrait(10));
        Fear1Field.setText(current.getTrait(11)); Fear2Field.setText(current.getTrait(12)); Fear3Field.setText(current.getTrait(13));
        
        Hoard1Field.setText(current.getTrait(14)); Hoard2Field.setText(current.getTrait(15)); Hoard3Field.setText(current.getTrait(16)); 
        Hoard4Field.setText(current.getTrait(17)); Hoard5Field.setText(current.getTrait(18));
        
        FlightField.setSelectedItem(current.getTrait(3)); AlignField.setSelectedItem(current.getTrait(2));
        
        HealthField.setValue(Integer.parseInt(current.getStat(0, 1))); StrengthField.setValue(Integer.parseInt(current.getStat(1, 1))); 
        SpeedField.setValue(Integer.parseInt(current.getStat(2, 1))); AgilityField.setValue(Integer.parseInt(current.getStat(3, 1)));
        ReflexesField.setValue(Integer.parseInt(current.getStat(4, 1))); MagicField.setValue(Integer.parseInt(current.getStat(5, 1)));
        IntellectField.setValue(Integer.parseInt(current.getStat(6, 1))); CharismaField.setValue(Integer.parseInt(current.getStat(7, 1)));
        WillpowerField.setValue(Integer.parseInt(current.getStat(8, 1))); LuckField.setValue(Integer.parseInt(current.getStat(9, 1)));
        
        if(RanRatToggle.isSelected()) { current.genRelat(); 
        r1tField.setText(current.getRelat(0,0)); r2tField.setText(current.getRelat(1,0)); r3tField.setText(current.getRelat(2,0));
        r4tField.setText(current.getRelat(3,0)); r5tField.setText(current.getRelat(4,0)); r6tField.setText(current.getRelat(5,0));
        r7tField.setText(current.getRelat(6,0)); r8tField.setText(current.getRelat(7,0));
        }
    }//GEN-LAST:event_RandomButtonActionPerformed

    private void GenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateButtonActionPerformed
        // TODO add your handling code here:
        current.setLink(0, l1Field.getText()); current.setLink(1, l2Field.getText()); current.setLink(2, l3Field.getText());
        current.setLink(3, l4Field.getText()); current.setLink(4, l5Field.getText()); current.setLink(5, l6Field.getText()); 
        current.setLink(6, l7Field.getText()); current.setLink(7, l8Field.getText()); current.setLink(8, l9Field.getText());
        current.setLink(9, l10Field.getText()); current.setLink(10, l11Field.getText()); current.makeURL(); 
       
        current.setTrait(0, NameField.getText()); current.setTrait(1, JobField.getText());
        current.setTrait(2, AlignField.getSelectedItem().toString()); current.setTrait(3, FlightField.getSelectedItem().toString());
        current.setTrait(4, FactionField.getText()); current.setTrait(5, Like1Field.getText());
        current.setTrait(6, Like2Field.getText()); current.setTrait(7, Like3Field.getText());
        current.setTrait(8, Dislike1Field.getText()); current.setTrait(9, Dislike2Field.getText());
        current.setTrait(10, Dislike3Field.getText()); current.setTrait(11, Fear1Field.getText());
        current.setTrait(12, Fear2Field.getText()); current.setTrait(13, Fear3Field.getText());
        current.setTrait(14, Hoard1Field.getText()); current.setTrait(15, Hoard2Field.getText());
        current.setTrait(16, Hoard3Field.getText()); current.setTrait(17, Hoard4Field.getText());
        current.setTrait(18, Hoard5Field.getText()); current.setTrait(19, ThemeURLField.getText());
        
        current.setStat(0, 1, HealthField.getValue()+""); current.setStat(1, 1, StrengthField.getValue()+"");
        current.setStat(2, 1, SpeedField.getValue()+""); current.setStat(3, 1, AgilityField.getValue()+"");
        current.setStat(4, 1, ReflexesField.getValue()+""); current.setStat(5, 1, MagicField.getValue()+"");
        current.setStat(6, 1, IntellectField.getValue()+""); current.setStat(7, 1, CharismaField.getValue()+"");
        current.setStat(8, 1, WillpowerField.getValue()+""); current.setStat(9, 1, LuckField.getValue()+"");
        
        current.setRelat(0,0,r1tField.getText()); current.setRelat(1,0,r2tField.getText());
        current.setRelat(2,0,r3tField.getText()); current.setRelat(3,0,r4tField.getText());
        current.setRelat(4,0,r5tField.getText()); current.setRelat(5,0,r6tField.getText());
        current.setRelat(6,0,r7tField.getText()); current.setRelat(7,0,r8tField.getText());
        
        current.setRelat(0,1,r1uField.getText()); current.setRelat(1,1,r2uField.getText());
        current.setRelat(2,1,r3uField.getText()); current.setRelat(3,1,r4uField.getText());
        current.setRelat(4,1,r5uField.getText()); current.setRelat(5,1,r6uField.getText());
        current.setRelat(6,1,r7uField.getText()); current.setRelat(7,1,r8uField.getText());
            current.makeRelats();
            
        current.setLink(0,l1Field.getText()); current.setLink(1,l2Field.getText());
        current.setLink(2,l3Field.getText()); current.setLink(3,l4Field.getText());
        current.setLink(4,l5Field.getText()); current.setLink(5,l6Field.getText());
        current.setLink(6,l7Field.getText()); current.setLink(7,l8Field.getText());
        current.setLink(8,l9Field.getText());
            current.makeURL();      
                    
        OutputField.setText(current.makeBio());
    }//GEN-LAST:event_GenerateButtonActionPerformed

    private void MadeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MadeButtonActionPerformed
        // TODO add your handling code here:
        String url = "http://flightrising.com/main.php?p=lair&tab=userpage&id=160158";
        try {
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        } catch (IOException ex) {
            Logger.getLogger(gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_MadeButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider AgilityField;
    private javax.swing.JComboBox<String> AlignField;
    private javax.swing.JSlider CharismaField;
    private javax.swing.JTextField Dislike1Field;
    private javax.swing.JTextField Dislike2Field;
    private javax.swing.JTextField Dislike3Field;
    private javax.swing.JButton ExitButton;
    private javax.swing.JTextField FactionField;
    private javax.swing.JTextField Fear1Field;
    private javax.swing.JTextField Fear2Field;
    private javax.swing.JTextField Fear3Field;
    private javax.swing.JComboBox<String> FlightField;
    private javax.swing.JButton GenerateButton;
    private javax.swing.JSlider HealthField;
    private javax.swing.JTextField Hoard1Field;
    private javax.swing.JTextField Hoard2Field;
    private javax.swing.JTextField Hoard3Field;
    private javax.swing.JTextField Hoard4Field;
    private javax.swing.JTextField Hoard5Field;
    private javax.swing.JComboBox<String> HoardColorField;
    private javax.swing.JSlider IntellectField;
    private javax.swing.JTextField JobField;
    private javax.swing.JTextField Like1Field;
    private javax.swing.JTextField Like2Field;
    private javax.swing.JTextField Like3Field;
    private javax.swing.JSlider LuckField;
    private javax.swing.JButton MadeButton;
    private javax.swing.JSlider MagicField;
    private javax.swing.JTextField NameField;
    private javax.swing.JTextArea OutputField;
    private javax.swing.JToggleButton RanRatToggle;
    private javax.swing.JButton RandomButton;
    private javax.swing.JSlider ReflexesField;
    private javax.swing.JSlider SpeedField;
    private javax.swing.JSlider StrengthField;
    private javax.swing.JTextField ThemeURLField;
    private javax.swing.JSlider WillpowerField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField l10Field;
    private javax.swing.JTextField l11Field;
    private javax.swing.JTextField l1Field;
    private javax.swing.JTextField l2Field;
    private javax.swing.JTextField l3Field;
    private javax.swing.JTextField l4Field;
    private javax.swing.JTextField l5Field;
    private javax.swing.JTextField l6Field;
    private javax.swing.JTextField l7Field;
    private javax.swing.JTextField l8Field;
    private javax.swing.JTextField l9Field;
    private javax.swing.JTextField r1tField;
    private javax.swing.JTextField r1uField;
    private javax.swing.JTextField r2tField;
    private javax.swing.JTextField r2uField;
    private javax.swing.JTextField r3tField;
    private javax.swing.JTextField r3uField;
    private javax.swing.JTextField r4tField;
    private javax.swing.JTextField r4uField;
    private javax.swing.JTextField r5tField;
    private javax.swing.JTextField r5uField;
    private javax.swing.JTextField r6tField;
    private javax.swing.JTextField r6uField;
    private javax.swing.JTextField r7tField;
    private javax.swing.JTextField r7uField;
    private javax.swing.JTextField r8tField;
    private javax.swing.JTextField r8uField;
    // End of variables declaration//GEN-END:variables
}

class bio { 
    public static String[] trait = {"Name 0", "Job 1", "Alignment 2", "Deity 3", "Faction 4", "Like1 5", "Like2 6", "Like3 7", "Dislike1 8", "Dislike2 9", "Dislike3 10", "Fear1 11", "Fear2 12", "Fear3 13", "Hoard1 14", "Hoard2 15", "Hoard3 16", "Hoard4 17", "Hoard5 18", "Themeurl 19"};
    public static String getTrait(int i) { return trait[i]; }
    public static void setTrait(int i, String a) { trait[i] = a; }
    
    public static String[][] stat = {{"Health 0", "5","✦","✧"}, {"Strength 1", "5","✦","✧"}, {"Speed 2", "5","✦","✧"}, {"Agility 3", "5","✦","✧"}, {"Reflexes 4", "5","✦","✧"}, {"Magic 5", "5","✦","✧"}, {"Intellect 6", "5","✦","✧"}, {"Charisma 7", "5","✦","✧"}, {"Willpower 8", "5","✦","✧"}, {"Luck 9", "5","✦","✧"}};
    public static String getStat(int x, int y) { return stat[x][y]; }
    public static void setStat(int x, int y, String a) { stat[x][y] = a; }
    
    public static String[] link = {"Link1 0", "Link2 1", "Link3 2", "Link4 3", "Link5 4", "Link6 5", "Link7 6", "Link8 7", "Link9 8", "Link10 9", "Link11 10"};
    public static String getLink(int i) { return link[i]; }
    public static void setLink(int i, String a) { link[i] = a; } 
    
    public static String[][] relat = {{"Mate 0", "URL"}, {"Best Friend 1", "URL"}, {"Friend 2", "URL"}, {"Friend 3", "URL"}, {"Friend 4", "URL"}, {"Colleague 5", "URL"}, {"Colleague 6", "URL"}, {"Enemy 7", "URL"}};
    public static String getRelat(int x, int y) { return relat[x][y]; }
    public static void setRelat(int x, int y, String a) { relat[x][y] = a; }
    
    public static String col = "blue";
    public static String getCol() {return col;}
    public static void setCol(String a) {col = a;}
    
    String[] jobs = {"Accountant", "Actor", "Adviser", "Aerial Scout", "Alchemist", "Anarchist", "Apiarist", "Apothecary", "Aquarist", "Arborist", "Arcanist", "Archaelogist", "Archivist", "Archmage", "Arsonist", "Artist", "Astronmer", "Astronomer", "Aviary Keeper", "Baker", "Bandit", "Barber", "Bard", "Beast Master", "Beekeeper", "Bishop", "Blackmailer", "Blacksmith", "Bodyguard", "Borderwatching", "Botanist", "Bouncer", "Brewmaster", "Brewster", "Butcher", "Candlemaker", "Caravan Leader", "Carpenter", "Cartographer", "Cavelier", "Chariot Driver", "Cheesemaker", "Chef", "Chemist", "Cleric", "Coach", "Collector", "Composer", "Conjuerer", "Conman", "Consigliere", "Consort", "Cook", "Cooper", "Counselor", "Courier", "Courtier", "Dancer", "Daredevil", "Dark Illusionists", "Deepsea Diver", "Dentist", "Diplomat", "Disguiser", "Doctor", "Dragonologist", "Druid", "Drummer", "Dyer", "Educator", "Electrician", "Embroiderer", "Engineer", "Escort", "Espionage", "Exalter", "Excavator", "Executioner", "Exotic Dancer", "Explorer", "Fairy Chaser", "Familiar Caretaker", "Farmer", "Farrier", "Fashion Designer", "Festival Keeper", "Fisher", "Fletcher", "Florist", "Forager", "Forger", "Fortune-Teller", "Framer", "Fungiculturalist", "Gamekeeper", "Gardener", "Gatherer", "Genealogist", "Gladiator", "Glass Blower", "Godfather", "Gravedigger", "Guard", "Haberdasher", "Hairdresser", "Harvester", "Hatchling Sitter", "Healer", "Herbalist", "Herbologist", "Historian", "Hoarder", "Hobbyist", "Housekeeper", "Hunter", "Illusionist", "Imagineer", "Innkeeper", "Investigator", "Invoker", "Jailor", "Janitor", "Jester", "Jeweler", "Jinx", "Kennel Master", "Kennel Masters", "Kite-Maker", "Knickknack Maker", "Knight", "Lair Construction Crew", "Lawyer", "Leather Worker", "Librarian", "Lich", "Limo Driver", "Locksmith", "Logger", "Lookout", "Luthier", "Mafia", "Mafioso", "Mage", "Magi", "Magician", "Maid", "Manager", "Mason", "Master-At-Arms", "Matchmaker", "Mathematician", "Mayor", "Mechanic", "Mediator", "Medium", "Mentor", "Mercenary", "Merchant", "Messenger", "Metallurgist", "Microbiologist", "Miner", "Mineralogist", "Monk", "Muscian", "Musketeer", "Mycologist", "Mystic", "Nanny", "Necromancer", "Nest Sitter", "Night Watchman", "Ninja", "Novelist", "Nurse", "Occultist", "Optician", "Oracle", "Paladin", "Paper Maker", "Peacemaker", "Pedagogue", "Philosopher", "Pickpocket", "Pillager", "Piolot", "Pirate", "Playwright", "Poacher", "Poet", "Potion Master", "Potter", "Prankster", "Priest", "Proctor", "Professional Appraiser", "Professional Racer", "Professor", "Purifier", "Ranger", "Reaper", "Reporter", "Retributionist", "Ritualist", "Rogue", "Sage", "Saint", "Salsedragon", "Samurai", "Savager", "Savant", "Scavenger", "Scholar", "Scientist", "Scout", "Scribe", "Scribne", "Scryer", "Seafarer", "Seamstress", "Seer", "Serial Killer", "Shaman", "Shepherd", "Sheriff", "Ship Captain", "Shopkeeper", "Silk-Worm Keeper", "Singer", "Slayer", "Soap Maker", "Sorcerer", "Spell Weaver", "Spellcaster", "Spider Keeper", "Spinner", "Sprite", "Spy", "Stalker", "Storyteller", "Stripper", "Summoner", "Surgeon", "Survivalist", "Sylph", "Tailor", "Tanner", "Teacher", "Theif", "Tinker", "Tracker", "Trader", "Trainer", "Translator", "Transporter", "Trap Maker", "Trapper", "Trauma Surgeon", "Treasurer", "Tree-Keeper", "Trickster", "Undertaker", "Vampire", "Vampire Hunter", "Vault Guard", "Veteran", "Vigilante", "Viking", "Volcanologist", "Ward Crafter", "Warden", "Warlock", "Warrior", "Weaver", "Werewolf", "Wine Master", "Witch", "Witch Doctor", "Wizard", "Woodcarver", "Writer", "Zealot", "Almoner", "Atiliator", "Baliff", "Bottler", "Butler", "Carder", "Carters", "Castellan", "Chamberlain", "Chaplain", "Clerk", "Constable", "Cottar", "Ditcher", "Ewerer", "Falconer", "Fuller", "Glazier", "Gong Farmer", "Hayward", "Herald", "Keeper Of The Wardrobe", "Kinight", "Laird", "Marshal", "Master Mason", "Minstrel", "Porter", "Reeve", "Sapper", "Scullion", "Shearman", "Shoemaker", "Spinster", "Steward", "Squire", "Watchman", "Woodworker", "Tanners", "Soap Makers", "Cask Makers", "Cloth Makers", "Candle Makers (Chandlers)", "Gold And Silver Smiths", "Laundresses", "Bakers", "Grooms", "Pages", "Huntsmen", "Doctors", "Painters", "Plasterers", "And Painters", "Potters", "Brick And Tile Makers", "Glass Makers", "Shipwrights", "Sailors", "Butchers", "Fishmongers", "Farmers", "Herdsmen", "Millers", "The Clergy", "Parish Priests", "Members Of The Monastic Orders", "Innkeepers", "Roadmenders", "Woodwards (For The Forests). Slingers", "Lady-In-Waiting", "Chamber Maid", "Doctors", "Brewer", "Poulterer", "Fruiterer", "Slaughterer", "Dispenser", "Cupbearerer"};
    String[] likes = {"Cuddling", "Music", "Hot Chocolate", "Long Walks", "Dogs", "Significant Other", "Animals", "Sweaters", "Nature", "Swimming", "Sweet Tea", "Smiling", "Laughing", "Jokes", "Long Hair", "Good Vibes", "Day Dreaming", "Sleeping", "Food", "Blogging", "Photography", "Fuzzy Blankets", "Kissing", "Sex", "Hugs", "Hand Holding", "Money", "Clothes", "Football", "Basketball", "Baseball", "Kickball", "Dodge Ball", "Concerts", "Partying", "Weed", "Drugs", "Guys", "Girls", "Texting", "Dancing", "Shoes", "Fashion", "Acting", "Modeling", "Helping Others", "Kissing In The Rain", "Painting", "Drawing", "Romantic Movies", "Comedies", "Ice Cold Water", "Instant Tea", "Vivaldi", "Rap Music", "Bruegel & Vermeer", "Picasso", "Room Service", "Waiting", "Siena", "Mixed Vegetables", "Leonard Cohen’S Lyrics", "Ambulance Sirens", "Candles", "Telephone Solicitations", "Kites", "Junk Mail", "Apples", "Insurance", "All Things Apple", "Being Put On “Hold”", "Chocolate", "Colorized Movies", "Rainbows", "Strawberries", "Used Book Stores", "Crickets", "Good Manners", "“Sucks”", "Handmade Quilts", "Daily Oklahoman", "Cats", "Mice", "Jewelry", "Rolypoly Bugs", "Lapel Buttons", "Reruns", "Quotations", "Know-It-All’S", "“Slasher” Films", "Boiled Okra", "Shakespeare", "The Simpsons", "Post-It Notes", "Whining", "Garden Tomatoes", "Cigarettes", "Comfortable Shoes", "New Shoes", "Gossip", "Elmer’S Glue", "Cartridge Pens", "Snoring", "Mystery", "Whistling", "Quiet", "Trivial Trivia", "Chinese Elms", "Golf", "Roses", "Elvis Presley", "Body Hair", "Body Odor", "Germs", "Liars", "Hypocrites", "Drama", "Studying", "Being Alone", "Crowded Rooms", "People", "Mushrooms", "Bugs", "Wet Socks", "Crying", "Being Touched", "Rain", "Thunder Storms", "The Cold", "The Heat", "Summer", "Winter", "Spring", "Fall", "Water", "Reading", "School", "Sweating", "(Movie)", "(Artist)", "(Actor/Actress)", "Smoking", "Drinking", "Cheaters", "Kids", "Sad Movies", "Horror Movies", "Annoying People", "Puking", "Being Sick", "Rough Textures", "Funerals", "Boats", "Airplanes"};
    String[] flights = {"Fire", "Ice", "Shadow", "Light", "Lightning", "Plague", "Arcane", "Earth", "Nature", "Water", "Wind"};
    String[] fears = {"Anatidaephobia", "Pyrophobia ", "Galeophobia ", "Arachnophobia", "Katsaridaphobia ", "Anthophobia", "Astrapophobia", "Achondroplasiaphobia", "Mottephobia ", "Zoophobia ", "Bananaphobia ", "Sidonglobophobia ", "Scelerophobia ", "Cibophobia ", "Phasmophobia ", "Equinophobia ", "Musophobia ", "Catoptrophobia ", "Agliophobia ", "Tokophobia ", "Telephonophobia ", "Pogonophobia ", "Omphalophobia ", "Pseudodysphagia ", "Bathophobia ", "Cacomorphobia ", "Gerascophobia ", "Chaetophobia ", "Nosocomephobia ", "Ligyrophobia ", "Didaskaleinophobia ", "Technophobia ", "Chronophobia ", "Spheksophobia ", "Ergophobia ", "Coulrophobia ", "Allodoxaphobia ", "Samhainophobia ", "Photophobia ", "Disposophobia ", "Numerophobia ", "Ombrophobia ", "Coasterphobia ", "Thalassophobia ", "Scoleciphobia ", "Kinemortophobia ", "Myrmecophobia ", "Taphophobia ", "Thanatophobia ", "Thantophobia", "Ablutophobia", "Acarophobia", "Acerophobia", "Achluophobia", "Acousticophobia", "Acrophobia", "Aerophobia", "Aeroacrophobia", "Aeronausiphobia", "Agateophobia", "Agliophobia", "Agoraphobia", "Agraphobia", "Agrizoophobia", "Agyrophobia", "Aichmophobia", "Ailurophobia", "Albuminurophobia", "Alektorophobia", "Algophobia", "Alliumphobia", "Allodoxaphobia", "Altophobia", "Amathophobia", "Amaxophobia", "Ambulophobia", "Amnesiphobia", "Amychophobia", "Anablephobia", "Ancraophobia", "Androphobia", "Anemophobia", "Anginophobia", "Anglophobia", "Angrophobia", "Ankylophobia", "Anthrophobia", "Anthropophobia", "Antlophobia", "Anuptaphobia", "Apeirophobia", "Aphenphosmphobia", "Apiphobia", "Apotemnophobia", "Arachibutyrophobia", "Arachnephobia", "Arithmophobia", "Arrhenphobia", "Arsonphobia", "Asthenophobia", "Astraphobia", "Astrophobia", "Asymmetriphobia", "Ataxiophobia", "Ataxophobia", "Atelophobia", "Atephobia", "Athazagoraphobia", "Atomosophobia", "Atychiphobia", "Aulophobia", "Aurophobia", "Auroraphobia", "Autodysomophobia", "Automatonophobia", "Automysophobia", "Autophobia", "Aviophobia", "Aviatophobia", "Keraunophobia", "Bacillophobia", "Bacteriophobia", "Ballistophobia", "Bolshephobia", "Barophobia", "Basophobia", "Bathmophobia", "Bathophobia", "Batophobia", "Batrachophobia", "Belonephobia", "Bibliophobia", "Blennophobia", "Bogyphobia", "Botanophobia", "Bromidrosiphobia", "Brontophobia", "Bufonophobia", "Basiphobia", "Bromidrophobia", "Cainotophobia", "Carcinophobia", "Centophobia", "Cheimatophobia", "Cacophobia", "Cainophobia", "Caligynephobia", "Cancerophobia", "Cardiophobia", "Carnophobia", "Catagelophobia", "Catapedaphobia", "Cathisophobia", "Catoptrophobia", "Cenophobia", "Ceraunophobia", "Chaetophobia", "Cheimaphobia", "Chemophobia", "Cherophobia", "Chionophobia", "Chiraptophobia", "Chirophobia", "Chiroptophobia", "Cholerophobia", "Chorophobia", "Chrometophobia", "Chromophobia", "Chronophobia", "Chronomentrophobia", "Cibophobia", "Claustrophobia", "Cleithrophobia", "Cleptophobia", "Climacophobia", "Clinophobia", "Clithrophobia", "Cnidophobia", "Cometophobia", "Coimetrophobia", "Coitophobia", "Contreltophobia", "Coprastasophobia", "Coprophobia", "Consecotaleophobia", "Coulrophobia", "Counterphobia", "Cremnophobia", "Cryophobia", "Crystallophobia", "Cyberphobia", "Cyclophobia", "Cymophobia", "Cynophobia", "Cypridophobia", "Decidophobia", "Defecaloesiophobia", "Deipnophobia", "Dementophobia", "Demonophobia", "Demophobia", "Dendrophobia", "Dentophobia", "Dermatophobia", "Dermatosiophobia", "Dextrophobia", "Diabetophobia", "Didaskaleinophobia", "Dikephobia", "Dinophobia", "Diplophobia", "Dipsophobia", "Dishabiliophobia", "Disposophobia", "Domatophobia", "Doraphobia", "Doxophobia", "Dromophobia", "Dutchphobia", "Dysmorphophobia", "Dystychiphobia", "Ecclesiophobia", "Ecophobia", "Eicophobia", "Eisoptrophobia", "Electrophobia", "Eleutherophobia", "Elurophobia", "Emetophobia", "Enetophobia", "Enochlophobia", "Enosiophobia", "Entomophobia", "Eosophobia", "Ephebiphobia", "Epistaxiophobia", "Epistemophobia", "Equinophobia", "Eremophobia", "Ereuthrophobia", "Ergasiophobia", "Ergophobia", "Erotophobia", "Euphobia", "Eurotophobia", "Erythrophobia", "Febriphobia", "Felinophobia", "Francophobia", "Frigophobia", "Galeophobia", "Gallophobia", "Gamophobia", "Geliophobia", "Gelotophobia", "Geniophobia", "Genophobia", "Genuphobia", "Gephyrophobia", "Germanophobia", "Gerascophobia", "Gerontophobia", "Geumaphobia", "Glossophobia", "Gnosiophobia", "Graphophobia", "Gymnophobia", "Gynephobia", "Hadephobia", "Hagiophobia", "Hamartophobia", "Haphephobia", "Harpaxophobia", "Hedonophobia", "Heliophobia", "Hellenologophobia", "Helminthophobia", "Hemophobia", "Heresyphobia", "Herpetophobia", "Heterophobia", "Hexakosioihexekontahexaphobia", "Hierophobia", "Hippophobia", "Hippopotomonstrosesquipedaliophobia", "Hobophobia", "Hodophobia", "Hormephobia", "Homichlophobia", "Homilophobia", "Hominophobia", "Homophobia", "Hoplophobia", "Hydrargyophobia", "Hydrophobia", "Hydrophobophobia", "Hyelophobia", "Hygrophobia", "Hylephobia", "Hylophobia", "Hypengyophobia", "Hypnophobia", "Hypsiphobia", "Iatrophobia", "Ichthyophobia", "Ideophobia", "Illyngophobia", "Iophobia", "Insectophobia", "Isolophobia", "Isopterophobia", "Ithyphallophobia", "Japanophobia", "Judeophobia", "Kainolophobia", "Kakorrhaphiophobia", "Katagelophobia", "Kathisophobia", "Katsaridaphobia", "Kenophobia", "Kinetophobia", "Kleptophobia", "Koinoniphobia", "Kolpophobia", "Kopophobia", "Koniophobia", "Kosmikophobia", "Kymophobia", "Kynophobia", "Kyphophobia", "Lachanophobia", "Laliophobia", "Leprophobia", "Leukophobia", "Levophobia", "Ligyrophobia", "Lilapsophobia", "Limnophobia", "Linonophobia", "Liticaphobia", "Lockiophobia", "Logizomechanophobia", "Logophobia", "Luiphobia", "Lutraphobia", "Lygophobia", "Lyssophobia", "Macrophobia", "Mageirocophobia", "Maieusiophobia", "Malaxophobia", "Maniaphobia", "Mastigophobia", "Mechanophobia", "Medomalacuphobia", "Medorthophobia", "Megalophobia", "Melissophobia", "Melanophobia", "Melophobia", "Meningitophobia", "Menophobia", "Merinthophobia", "Metallophobia", "Metathesiophobia", "Meteorophobia", "Methyphobia", "Metrophobia", "Microbiophobia", "Microphobia", "Misophobia", "Mnemophobia", "Molysmophobia", "Monophobia", "Monopathophobia", "Motorphobia", "Mottephobia", "Musophobia", "Mycophobia", "Mycrophobia", "Myctophobia", "Myrmecophobia", "Mythophobia", "Myxophobia", "Nebulaphobia", "Necrophobia", "Nelophobia", "Neopharmaphobia", "Neophobia", "Nephophobia", "Noctiphobia", "Nomatophobia", "Nosocomephobia", "Nosophobia", "Nostophobia", "Novercaphobia", "Nucleomituphobia", "Nudophobia", "Numerophobia", "Nyctohylophobia", "Nyctophobia", "Obesophobia", "Ochlophobia", "Ochophobia", "Octophobia", "Odontophobia", "Odynophobia", "Oenophobia", "Oikophobia", "Olfactophobia", "Ombrophobia", "Ommetaphobia", "Omphalophobia", "Oneirophobia", "Oneirogmophobia", "Onomatophobia", "Ophidiophobia", "Ophthalmophobia", "Opiophobia", "Optophobia", "Ornithophobia", "Orthophobia", "Osmophobia", "Ostraconophobia", "Ouranophobia", "Pagophobia", "Panthophobia", "Panophobia", "Papaphobia", "Papyrophobia", "Paralipophobia", "Paraphobia", "Parasitophobia", "Paraskavedekatriaphobia", "Parthenophobia", "Pathophobia", "Patroiophobia", "Parturiphobia", "Peccatophobia", "Pediculophobia", "Pediophobia", "Pedophobia", "Peladophobia", "Pellagrophobia", "Peniaphobia", "Pentheraphobia", "Phagophobia", "Phalacrophobia", "Phallophobia", "Phasmophobia", "Phengophobia", "Philemaphobia", "Philophobia", "Philosophobia", "Phobophobia", "Photoaugliaphobia", "Photophobia", "Phonophobia", "Phronemophobia", "Phthiriophobia", "Phthisiophobia", "Placophobia", "Plutophobia", "Pluviophobia", "Pneumatiphobia", "Pnigophobia", "Pocrescophobia", "Pogonophobia", "Poliosophobia", "Politicophobia", "Polyphobia", "Poinephobia", "Ponophobia", "Porphyrophobia", "Potamophobia", "Potophobia", "Pharmacophobia", "Proctophobia", "Prosophobia", "Psellismophobia", "Psychophobia", "Psychrophobia", "Pteromerhanophobia", "Pteronophobia", "Pupaphobia", "Pyrexiophobia", "Pyrophobia", "Quadraphobia", "Quadriplegiphobia", "Quintaphobia", "Radiophobia", "Ranidaphobia", "Rectophobia", "Rhabdophobia", "Rhypophobia", "Rhytiphobia", "Rupophobia", "Russophobia", "Sarmassophobia", "Satanophobia", "Scabiophobia", "Scatophobia", "Scelerophibia", "Sciophobia Sciaphobia", "Scoleciphobia", "Scolionophobia", "Scopophobia", "Scotomaphobia", "Scotophobia", "Scriptophobia", "Selachophobia", "Selaphobia", "Selenophobia", "Seplophobia", "Sesquipedalophobia", "Sexophobia", "Siderodromophobia", "Siderophobia", "Sinistrophobia", "Sinophobia", "Sitophobia", "Snakephobia", "Soceraphobia", "Social Phobia", "Sociophobia", "Somniphobia", "Sophophobia", "Soteriophobia", "Spacephobia", "Spectrophobia", "Spermatophobia", "Spheksophobia", "Stasibasiphobia", "Staurophobia", "Stenophobia", "Stygiophobia", "Suriphobia", "Symbolophobia", "Symmetrophobia", "Syngenesophobia", "Syphilophobia", "Tachophobia", "Taeniophobia", "Taphephobia Taphophobia", "Tapinophobia", "Taurophobia", "Technophobia", "Teleophobia", "Telephonophobia", "Teratophobia", "Testophobia", "Tetanophobia", "Teutophobia", "Textophobia", "Thaasophobia", "Thalassophobia", "Thanatophobia", "Theatrophobia", "Theologicophobia", "Theophobia", "Thermophobia", "Tocophobia", "Tomophobia", "Tonitrophobia", "Topophobia", "Toxiphobia", "Traumatophobia", "Tremophobia", "Trichinophobia", "Trichopathophobia", "Triskaidekaphobia", "Tropophobia", "Trypanophobia", "Tuberculophobia", "Tyrannophobia", "Uranophobia", "Urophobia", "Vaccinophobia", "Venustraphobia", "Verbophobia", "Verminophobia", "Vestiphobia", "Virginitiphobia", "Vitricophobia", "Walloonphobia", "Xanthophobia", "Xenoglossophobia", "Xenophobia", "Xerophobia", "Xylophobia", "Xyrophobi", "Zelophobia", "Zeusophobia", "Zemmiphobia", "Zoophobia", "Chrematophobia", "Chromatophobia", "Cleisiophobia", "Cypriphobia", "Cyprianophobia", "Cyprinophobia", "Daemonophobia", "Dermatopathophobia", "Enissophobia", "Erytophobia", "Ereuthophobia", "Fibriphobia", "Fibriophobia", "Gatophobia", "Galiophobia", "Gephydrophobia", "Gephysrophobia", "Geumophobia", "Gynophobia", "Haptephobia", "Hemaphobia", "Hematophobia", "Hereiophobia", "Hyalophobia", "Hypegiaphobia", "Kainophobia", "Kinesophobia", "Lalophobia", "Lepraphobia", "Mysophobia", "Molysomophobia", "Muriphobia", "Nosemaphobia", "Odynephobia", "Ommatophobia", "Osphresiophobia", "Pantophobia", "Philematophobia", "Pnigerophobia", "Scoptophobia", "Sitiophobia", "Spermophobia", "Stasiphobia", "Stigiophobia", "Teniophobia", "Toxophobia", "Toxicophobia", "Trichophobia"};
    
    String[] pink = {"Darktide Jellyfish", "Mana Thief", "Maidens Blush", "Spathiphyllum", "Raspberry", "Bee Orchid", "Chalcedony Craylet", "Delta Orchid", "Emetic Russula", "Fallout Whisper", "Petalwing Matriarch", "Sakura Owlet", "Scarlet Mussels", "Southern Gull", "Small Block of Granite", "Rose Quartz", "Corundum Chameleon", "Mesacliff Harpy", "Jeweled Octoflyer", "Maren Wavesinger", "Juvenile Starsweeper", "Fluted Pukasloth", "Candycane Xolo", "Irradiated Astronomer", "Arcane Sprite", "Hibernal Starbear", "Pink Highnoon Hank", "Pink & Purple Flair Scarf", "Pink Satin Tunic", "Blushing Pink Rose", "Pink Daisy Cabbie", "Ethereal Entourage", "Archivist's Spellscroll", "Companion Comet", "Rune Slash", "Mana Bolt", "Enfeeble"};
    String[] purp = {"Amethyst Striker", "Bog Canary", "Weird Purple Skink", "Julii Corycat", "Aether Hermit", "Snowflake Urchin", "Egghead Infiltrator", "Subterranean Clover", "Black Tulip", "Peace Lily", "Blackberry", "Star Moss", "Leechroot Mushroom", "Starfall Blossom", "Engineered Strawberry", "Dark Creeper", "Aether Cherries", "Chewy Tentacle", "Cicada", "Cliffside Milkweed", "Crowntail Wanderer", "Decorated Turtle Shell", "Haunted Stone Orb", "Magical Shards", "Dark-Tufted Sparrowmouse", "Nightsky Fuiran", "Shadow Serpent", "Zeeba", "Rainbow Sprite", "Abyss Striker", "Maned Cobra", "Anomalous Skink", "Arcane Sprite", "Ethereal Trickster", "Mist Slash", "Dark Bolt", "Shroud", "Dark Might Fragment", "Dark Acuity Fragment", "Obsidian Hybrid Fragment", "Tricktrouper Crown", "Companion Comet"};
    String[] blue = {"Olive Sea Snake", "Magpie", "Crested Newt", "Black Capped Budgie", "Blue Throated Budgie", "Mute Swan", "Juvenile Prairie Skink", "River Warden", "Moonbeam Sardines", "Sardines", "Clown Shrimp", "Flying Fish", "Glowslug", "Sea Fae", "Stubby Squid", "Green Corycat", "Blue Swimmer Crab", "Lagoon Guppy", "Blue Dragon Seaslug", "Crystal Jellyfish", "Wild Green Discus", "Snowflake Urchin", "Glow Star", "Frostbite Beetle", "Tundra Grub", "Blue Cricket", "Lunar Lacewing", "Wasteland Pauper", "Snowkissed Centipede", "Silt Sifter", "Zebra Caterpillar", "Water Strider", "Giant Darner", "Marsh Choker", "Glow Mushroom", "Blue Parrot Tulip", "Sour Spinach", "Stellaria Media", "Seaberry", "Spearmint", "Lume Daffodil", "Charged Duneberry", "Perfect Skipping Stone", "Skipping Stone", "Blue Quartz", "Labradorite", "Raw Lapis Lazuli", "Azurite", "Faded Blue Fabric", "Discarded Ribbon", "Snakeskin Cloth", "Apatite", "Celestine", "Blue Goo", "Blue Ooze", "Blue Sludge", "Bluefin Charger Fin", "Bluestreaked Shell", "Coal Carpenter", "Dwarf Truffle", "Blue Dragon Reef Snail", "Bramble Guardian", "River Muck", "Zalis", "Permafrost Impaler", "Venerable Shalebuck", "Bluemoon Aviar", "Snow Streak", "Poisonous Toridae", "Wartoad", "Octoflyer", "Maren Scout", "Construction Mith", "Frost Delver", "Blue Vein Pansy", "Gaseous Megashrimp", "Hippojay", "Nephrite Chameleon", "Snowsquall Floracat", "Leftover Residue", "Lesser Wisp", "Tourmaline Vulstal", "Frostbite Hummingbird", "Shimmering Xolo", "Roundhorn Melprin", "Hati", "Rivermouth Flatbill", "Bucktooth Digger", "Ice Sprite", "Water Sprite", "Polarfreeze Defender", "Wavebreak Snarler", "Ectoplasmine", "Jadecarved Decoy", "Slumbering Charlatan", "Fawn Fox Rat", "Mantarune", "Great Blue Waveskimmer", "Lightning Sprite", "Lightning Lancer", "Azure Highnoon Hank", "Cobalt Deepsea Bulb", "Laureate's Cap", "Blue Satin Tunic", "Blue Bandana", "Alchemist's Fez", "Umbral Wreath", "Blue Renaissance Shirt", "Blue Breeches", "Cobalt Shades", "Winter Wind", "Waverider Cape", "Yelling Wyrmpeck", "Pixie Procession", "Cloudy Feathered Wings", "Charged Might & Acuity Fragments", "Shock Bolt", "Thunder Slash", "Shock", "Frozen Might & Acuity Fragments", "Frigid Bolt", "Freezing Slash", "Congeal", "Aquatic Might & Acuity Fragments", "Hydro Bolt", "Wave Slash", "Drown", "Meditate", "Guard", "Ward", "Concentration", "Cleansing Elixir"};
    String[] yell = {"Sunset Sea Dragon", "Deepsea Cucumber", "Dumpling Squid", "Corycat", "Golden Cushionfish", "Luminous Shortfin", "Golden Reefprince", "Canopy Darter", "Albino Dasher", "Dark-bordered Beauty", "Reedcleft Sparkler", "Jungle Mantis", "Wild Mustard", "Ashfall Prickler", "Granny Smith Apple", "Daffodil", "Sour Strawberry", "Sacridite", "Fool's Gold", "Canopic Jar", "Amber-Trapped Fly", "Gold Ore", "Turtle Shell", "Ancestral Incense", "Chrysoberyl", "Yellow Goo", "Yellow Ooze", "Yellow Sludge", "Yellow-Throated Sparrowmouse", "Cockatrice", "Longneck Wanderer", "Sunspot Clouddancer", "Brilliant Psywurm", "Salve Kamaitachi", "Wetland Unicorn", "Coppercoil Creeper", "Cheerful Residue", "Dwarf Unicorn", "Sköll", "Light Sprite", "Sunbeam Soldier", "Golden Idol", "Grasslands Trunker", "Gilded Crown", "Gold Wolf Cape", "Autumnal Wreath", "Golden Deepsea Bulb", "Amber Delver's Lamp", "Brass Cornet", "Wooden Pipeflute", "Gold Satin Tunic", "Gold Renaissance Shirt", "Gold Breeches", "Festival Jewelry", "Illuminated Emblem", "Sunchaser Jewelry", "Sunguard Chest", "Flame Bolt", "Bright Bolt", "Blinding Slash", "Bolster", "Clobber", "Major Health Potion"};
    String[] gree = {"Balsas Anole", "Zephyr Sparrow", "Brown Spot Toad", "Toad", "Ruby-Throated Hummingbird", "White-Eared Hummingbird", "Emerald Ratsnake", "Tree Gecko", "Newt", "Emerald Striker", "Reedhopper", "Steppes Pincher", "Everglade Shortfin", "Glade Swarmer", "Leaf Beetle", "Cricket", "Grasshopper", "Alder Spittlebug", "Rhododendron Leafhopper", "Black Swallowtail Caterpillar", "Waterbug", "Runic Pug Moth", "Glowbug", "Highgrass Priest", "Cliff Lion", "Light's Breath", "Clover", "Jungle Grass", "Sea Grass", "Sweet Grass", "Diseased Fungus", "Crisp-Leaf Amaranth", "Greenstripe Amaranth", "Spinach", "Green Shoots", "Greater Plantain", "Broadleaf Plantain", "Arctic Scrub", "Green Algae", "Notocactus", "Tundra Cactus", "Sour Green Apple", "Prickly Pear", "Peppermint", "Green Plantain", "Jungle Lilies", "Pinwheel Paddies", "Jungle Raincatch", "Minty Jadevine", "Ivy", "Sand Creeper", "Malachite Agate", "Jade", "Raw Jade", "Moth-Eaten Rug", "Pine Branch", "Bamboo Shoot", "Bamboo Cluster", "Emerald", "Green Goo", "Green Ooze", "Green Sludge", "Leafy Moth", "Luna Mith", "Tufted Leaf Beetle", "Dryad", "Wildwood Owl", "Greenroot Janustrap", "Opheodrys Serthis", "Fuiran", "Gale Wolf", "Radioactive Slime", "Warcat Protector", "Budwing Morpho", "Hippocampus", "Harvest Floracat", "Heartred Croaker", "Cloud Chaser", "Mistral Minion", "Ringlet Amphithere", "King Parda", "Tuxedo Floracat", "Peacock Firebird", "Wind Sprite", "Nature Sprite", "Spined Cobra", "Red-Footed Akirbeak", "Boolean", "Fungusbearing Phony", "Strangler", "Woodland Headband", "Green Highnoon Hank", "Emerald Deepsea Bulb", "Poet's Tam", "Green and White Flair Scarf", "Blue and Green Flair Scarf", "Emerald Green Satin Tunic", "Green Olive Wreath", "Gladewalker Cape", "Paunchy Green Percher", "Emerald Talonclasp Pendant", "Cyan Delver's Lamp", "Canorous Spats", "Festival Items", "Electrician's Emblem", "Electrified Sash", "Whirlwind Emblem", "Whirlwind Armband", "Windbound Plumage", "Druidic Emblem", "Druidic Armband", "Naturalist's Adornments", "Zephyr Bolt", "Gust Slash", "Disorient", "Leaf Bolt", "Jungle Slash", "Envenom", "Aid", "Regeneration", "Reflect"};
    String[] redd = {"Fire Ant", "Harlequin Ladybug", "Earwig", "Red and Black Froghopper", "Lava Strider", "Wetland Vampire", "Ruby Tetras", "Red Emperor Tulip", "Blood Spath", "Winter's Delight", "Red Delicious Apple", "Strawberry", "Flameweed", "Coral Snake", "Rhodochrosite", "Bloodstone", "Jasper", "Red Linen Fabric Scrap", "Good Eater Award", "Ruby Ring", "Red Goo", "Red Ooze", "Red Sludge", "Iron Ore", "Tiny Feathers", "Sentinel Armor", "Sizzling Phosphorus", "Intricate Weaving", "Berserker's Belt", "Cerdae Sparkle", "Ornamental Sash", "Sakura Moss", "Simple Raptorik Sash", "Carmine Serthis", "Ancient Fungus", "Scarlet Flycatcher", "Crimson Reef Snail", "Cardinal Hippogriff", "Ruby Webwing", "Red-Breasted Hainu", "Bloodstone Beetle", "Nochnyr", "Molten Wartoad", "Magma Embear", "Firebreather Cape", "Corsair's Seaspray Kerchief", "Red Warrior Face Mask", "Infectionist's Emblem", "Infectionist's Armband", "Paunchy Red Percher", "Rose-Colored Shades", "Melodious Vest", "Nomad's Sandwastes Vest", "Cursed Talonclasp Pendant", "Rose Highnoon Hank", "Romantic Red Rose", "Little Red Riding Hood", "Ruby Deepsea Bulb", "Red Renaissance Shirt", "Red Breeches", "Seafarer's Shirt", "Red and Gold Flair Scarf", "Red Fedora", "Scarlet Satin Tunic", "Blood Red Wolf Cape", "Minor Health Potion", "Scratch", "Shred", "Eliminate"};
    String[] oran = {"Panther Anole", "Firebearer", "Singed Lemming", "Glass Minnows", "Brilliant Bobtail Squid", "Serpae Tetras", "Chromodori Swimmer", "Discus", "Fire Ant", "Ladybug", "Cindershroom", "Wasteland Pear", "Copper Ore", "Infused Crystal", "Eye Agate", "Amber-Trapped Mosquito", "Banded Sardonyx", "Mangled Textile", "Painted Turtle Shell", "Aged Tome", "Amber", "Orange Goo", "Orange Ooze", "Orange Sludge", "Autumn Dryad", "Orange Blotch Pansy", "Clown Charger", "Baku", "Clown Hippocampus", "Proto Manticore", "Ultramel Amphithere", "Golden Porpoise", "Conjoined Skink", "Fire Sprite", "Molten Marauder", "Mock Firebird", "Autumn Breeze", "Sunrise Hibiscus", "Runebead Necklace", "Searing Armband & Necklace", "Citrine Talonclasp Pendant", "Gold Satin Tunic", "Copper Glasses", "Copper Halfmoon Spectacles", "Hip Copper Frames", "Blazing Slash", "Sear", "Rally", "Health Potion", "Berserker"};
    
    static String[] relatss = {"1", "2", "3", "4", "5", "6", "7", "8"};
    
    public void genHoard() {
        if (col.equals("Pink")) {
            int num = (int)(Math.random()*pink.length); trait[14] = pink[num]; 
            num = (int)(Math.random()*pink.length); trait[15] = pink[num]; 
            num = (int)(Math.random()*pink.length); trait[16] = pink[num]; 
            num = (int)(Math.random()*pink.length); trait[17] = pink[num]; 
            num = (int)(Math.random()*pink.length); trait[18] = pink[num]; }
        if (col.equals("Purple")) {
            int num = (int)(Math.random()*purp.length); trait[14] = purp[num]; 
            num = (int)(Math.random()*purp.length); trait[15] = purp[num]; 
            num = (int)(Math.random()*purp.length); trait[16] = purp[num]; 
            num = (int)(Math.random()*purp.length); trait[17] = purp[num]; 
            num = (int)(Math.random()*purp.length); trait[18] = purp[num]; }
        if (col.equals("Blue")) {
            int num = (int)(Math.random()*blue.length); trait[14] = blue[num]; 
            num = (int)(Math.random()*blue.length); trait[15] = blue[num]; 
            num = (int)(Math.random()*blue.length); trait[16] = blue[num]; 
            num = (int)(Math.random()*blue.length); trait[17] = blue[num]; 
            num = (int)(Math.random()*blue.length); trait[18] = blue[num]; }
        if (col.equals("Yellow")) {
            int num = (int)(Math.random()*yell.length); trait[14] = yell[num]; 
            num = (int)(Math.random()*yell.length); trait[15] = yell[num]; 
            num = (int)(Math.random()*yell.length); trait[16] = yell[num]; 
            num = (int)(Math.random()*yell.length); trait[17] = yell[num]; 
            num = (int)(Math.random()*yell.length); trait[18] = yell[num]; }
        if (col.equals("Green")) {
            int num = (int)(Math.random()*gree.length); trait[14] = gree[num]; 
            num = (int)(Math.random()*gree.length); trait[15] = gree[num]; 
            num = (int)(Math.random()*gree.length); trait[16] = gree[num]; 
            num = (int)(Math.random()*gree.length); trait[17] = gree[num]; 
            num = (int)(Math.random()*gree.length); trait[18] = gree[num]; }
        if (col.equals("Red")) {
            int num = (int)(Math.random()*redd.length); trait[14] = redd[num]; 
            num = (int)(Math.random()*redd.length); trait[15] = redd[num]; 
            num = (int)(Math.random()*redd.length); trait[16] = redd[num]; 
            num = (int)(Math.random()*redd.length); trait[17] = redd[num]; 
            num = (int)(Math.random()*redd.length); trait[18] = redd[num]; }
        if (col.equals("Orange")) {
            int num = (int)(Math.random()*oran.length); trait[14] = oran[num]; 
            num = (int)(Math.random()*oran.length); trait[15] = oran[num]; 
            num = (int)(Math.random()*oran.length); trait[16] = oran[num]; 
            num = (int)(Math.random()*oran.length); trait[17] = oran[num]; 
            num = (int)(Math.random()*oran.length); trait[18] = oran[num]; }  
        }
    
    public void genTraits() {
        int num = (int)(Math.random()*jobs.length);
        trait[1] = jobs[num];
        num = (int)(Math.random()*flights.length);
        trait[3] = flights[num];
        num = (int)(Math.random()*likes.length);
        trait[5] = likes[num];
        num = (int)(Math.random()*likes.length);
        trait[6] = likes[num];
        num = (int)(Math.random()*likes.length);
        trait[7] = likes[num];
        num = (int)(Math.random()*likes.length);
        trait[8] = likes[num];
        num = (int)(Math.random()*likes.length);
        trait[9] = likes[num];
        num = (int)(Math.random()*likes.length);
        trait[10] = likes[num];
        num = (int)(Math.random()*fears.length);
        trait[11] = fears[num];
         num = (int)(Math.random()*fears.length);
        trait[12] = fears[num];
         num = (int)(Math.random()*fears.length);
        trait[13] = fears[num];
    }
    public static void genName() {
  String[] prefix = {"anti","auto","de","dis","down","extra","hyper","il","im","in","ir","inter","mega","mid","mis","non","over","out","post","pre","pro","re","semi","sub","sub","super","tele","trans","ultra","un","under","up"};
  String[] firCon = {"t", "n", "s", "r", "d", "f", "c", "b", "z"};
  String[] secCon = {"r", "h", "s","v"};
  String[] firVow = {"e", "a", "i", "o", "oo", "u"};
  String[] thiCon = {"t", "v", "w", "x", "ck", "g", "p", "ch", "sh","ph","rr",};
  String[] secVow = {"e", "i", "o","a","u"}; 
  String[] fouCon = {"r", "s", "y","de","x","ra","le",};
  String[] suffix = {"iode","able","ac","acity","ocity","ade","age","aholic","oholic","al","algia","an","ian","ance","ant","ar","ard","arian","arium","orium","ary","ation","ate","ative","cide","cracy","crat","cule","cy","cycle","dom","dox","ed","ee","ectomy","eer","emia","en","ence","ency","ent","er","ern","escence","ese","esque","ess","est","etic","ette","ful","fy","gam","gamy","gon","gonic","hood","ial","ian","iasis","iatric","ible","ic","ical","ile","ily","ine","ing","ion","ious","ish","ism","ist","ite","itis","ity","ive","ization","ize","less","let","like","ling","loger","logist","log","ly","ment","ness","oid","ology","oma","onym","opia","opsy","or","ory","osis","ostomy","otomy","ous","path","pathy","phile","phobia","phone","phyte","plegia","plegic","pnea","scopy","scope","scribe","script","sect","ship","sion","some","sophy","sophic","th","tion","tome","tomy","tude","trophy","tude","ty","ular","uous","ure","ward","ware","wise"};
  int numnum = (int)(Math.random() * 100000);  
  String result = " ";         
        //start with the prefix
        if(Math.random() < .5) {
            result += prefix[(int)(Math.random() * prefix.length)];
        }
        
        //then the first consonant
        if(Math.random() < .7) {
            result += firCon[(int)(Math.random() * firCon.length)];
        }
        
        //then the possible second consonant
        if(Math.random() < .4) {
            result += secCon[(int)(Math.random() * secCon.length)];
        }
        
        //then the first vowel
        if(Math.random() < .9) {
            result += firVow[(int)(Math.random() * firVow.length)];
        }
        
        //then the third consonant
        if(Math.random() < .8) {
            result += thiCon[(int)(Math.random() * thiCon.length)];
        }
        
        //then the second vowel
        if(Math.random() < .6) {
            result += secVow[(int)(Math.random() * secVow.length)];
        }
        
        //then the fourth consonant
        if(Math.random() < .5) {
            result += fouCon[(int)(Math.random() * fouCon.length)];
        }
        
        //possibly another vowel?
        if(Math.random() < .5) {
            result += secVow[(int)(Math.random() * secVow.length)];
        }
        
        //then the suffix
        if (Math.random() < .5) {
            result += suffix[(int)(Math.random() * suffix.length)];
        }
        
        //if it's short, then maybe repeat it. (Seg -> Segseg)
        if (Math.random() < .7 && (result.length() < 6)) {
        result += result.substring(1,result.length());
        }
        
        //lastly, capitalize the first letter.
        String temp1 = result.substring(1,2);
        String temp2 = result.substring(2,result.length());
        temp1 = temp1.toUpperCase();
        result = temp1 + temp2;
        
        //if it's too long, delete it. 
        if (result.length() > 9) {
             result = result.substring(0,8);
        }  
        trait[0] = result;       
    }
    public static void genStats() {
        for(int i = 0; i < stat.length; i++) { stat[i][1] = (int)(Math.random()*10)+""; }
        for(int i = 0; i < stat.length; i++) { stat[i][2] = ""; for(int ii = 1; ii<Integer.parseInt(stat[i][1]);ii++) { stat[i][2] += "✦"; } } 
        for(int i = 0; i < stat.length; i++) { stat[i][3] = ""; for(int ii = 1; ii<10-Integer.parseInt(stat[i][1]);ii++) { stat[i][3] += "✧"; } }
    }
    public static void genRelat() {
        String[] relats = {"Mate", "Nemesis", "Child", "Sibling", "Coworker", "Comrade", "Spouse", "Parent", "Grandparent", "Cousin", "Caregiver", "Peer", "Neighbor", "Friendship", "Roommate", "Confidant", "Soulmate", "Mistress", "Companion", "Friend", "Best Friend", "Enemy", "Ex-Significant Other", "Significant Other", "Ex-Best Friend", "Ex-Friend", "Arch Enemy"};
        for(int i = 0; i < relat.length; i++) { relat[i][0] = relats[(int)(Math.random()*relats.length)]; }
    }
    public static void genAlign() { String[] a = {"Neutral","Chaotic","Lawful"}; String[] b = {"Neutral","Evil","Good"}; trait[2] = a[(int)(Math.random()*a.length)]+" "+b[(int)(Math.random()*b.length)];  }
 
    public static void makeURL() {
        for (int i = 0; i < link.length; i++){
            if (link[i].equals("")) {link[i] = " X ";} else { link[i] = "[url="+link[i]+"] X [/url]"; }
        }
    }
    public static void makeRelats() { 
        for (int i =0; i < relat.length; i++) {
            if(relat[i][1].equals("")) {relatss[i] = relat[i][0]; } else { relatss[i] = "[url="+relat[i][1]+"]"+relat[i][0]+"[/url]"; }
        }
    }
    
    public static String makeBio() {
        String bio = "";
        bio += "[center][COLOR=BLACK][FONT=TimesNewRoman][size=7]"+trait[0]+"[/size]\n" +
"[size=3] "+trait[1]+" • "+trait[2]+" [/size]\n" +
"[/center]\n" +
"[columns]\n" +
"[center][url="+trait[19]+"][img]http://68.media.tumblr.com/1855b743d08b64c9f62d1967b0feb160/tumblr_inline_o3lhdfyATU1tqyuge_500.gif[/img][/url][/center]\n" +
"╭━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]DEITY[/size]\n" +
"[i]"+trait[3]+"[/i][/center]\n" +
"╰━━━━━━━━━╯\n" +
"╭━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]FACTION[/size]\n" +
"[i]"+trait[4]+"[/i][/center]\n" +
"╰━━━━━━━━━╯\n" +
"╭━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]STATS[/size]\n" +
"[i]Health[/i]\n" +
""+stat[0][2]+stat[0][3]+"\n" +
"[i]Strength[/i]\n" +
""+stat[1][2]+stat[1][3]+"\n" +
"[i]Speed[/i]\n" +
""+stat[2][2]+stat[2][3]+"\n" +
"[i]Agility[/i]\n" +
""+stat[3][2]+stat[3][3]+"\n" +
"[i]Reflexes[/i]\n" +
""+stat[4][2]+stat[4][3]+"\n" +
"[i]Magic[/i]\n" +
""+stat[5][2]+stat[5][3]+"\n" +
"[i]Intellect[/i]\n" +
""+stat[6][2]+stat[6][3]+"\n" +
"[i]Charisma[/i]\n" +
""+stat[7][2]+stat[7][3]+"\n" +
"[i]Willpower[/i]\n" +
""+stat[8][2]+stat[8][3]+"\n" +
"[i]Luck[/i]\n" +
""+stat[9][2]+stat[9][3]+"[/center]\n" +
"╰━━━━━━━━━╯\n" +
"╭━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]RELATIONS[/size]\n" +
relatss[0]+"\n" +
relatss[1]+"\n" +
relatss[2]+"\n" +
relatss[3]+"\n" +
relatss[4]+"\n" +
relatss[5]+"\n" +
relatss[6]+"\n" +
relatss[7]+"[/center]\n" +
"╰━━━━━━━━━╯\n" +
"╭━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]LIKES[/size][FONT=TimesNewRoman]\n" +
"[i]"+trait[5]+"[/i]\n" +
"[i]"+trait[6]+"[/i]\n" +
"[i]"+trait[7]+"[/i][/center]\n" +
"╰━━━━━━━━━╯\n" +
"╭━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]DISLIKES[/size]\n" +
"[i]"+trait[8]+"[/i]\n" +
"[i]"+trait[9]+"[/i]\n" +
"[i]"+trait[10]+"[/i][/center]\n" +
"╰━━━━━━━━━╯\n" +
"╭━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]FEARS[/size]\n" +
"[i]"+trait[11]+"[/i]\n" +
"[i]"+trait[12]+"[/i]\n" +
"[i]"+trait[13]+"[/i][/center]\n" +
"╰━━━━━━━━━╯\n" +
"╭━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]LINKS[/size]\n" +
link[0]+link[1]+link[2]+link[3]+link[4]+link[5]+link[6]+link[7]+link[8]+"\n" +
"[/center]\n" +
"╰━━━━━━━━━╯\n" +
"[nextcol]\n" +
"[img]https://68.media.tumblr.com/9485703620d4491b5aedad5acbe15746/tumblr_inline_o4klsqkhpM1tv4ncb_540.png[/img]\n" +
"[img]https://68.media.tumblr.com/9485703620d4491b5aedad5acbe15746/tumblr_inline_o4klsqkhpM1tv4ncb_540.png[/img]\n" +
"[nextcol]\n" +
"╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]Personality[/size]\n" +
"Lorem ipsum dolor sit amet, at vidit platonem rationibus eum, ad summo graece regione nec, no pro salutatus principes. Mea vivendo eloquentiam voluptatibus at. Esse veniam deterruisset at est, malis putent periculis ad usu. Has facer utamur ea. Enim soleat qualisque ex mel, in nec hinc democritum. Ex solum homero qui, ea vix quis aliquid invidunt, commodo quaerendum eum ex.\n" +
"Vivendo perfecto inciderint ad vim, tritani adolescens efficiantur id usu. Sea ex consul laudem, admodum maiorum vel eu. Pro ut eirmod posidonium, graece hendrerit mei ei. At has virtute sadipscing, id eros eruditi nec. Ei eum reque minim aliquando, mel ex menandri vituperata.[/center]\n" +
"╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\n" +
"╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]Early Years[/size]\n" +
"Lorem ipsum dolor sit amet, at vidit platonem rationibus eum, ad summo graece regione nec, no pro salutatus principes. Mea vivendo eloquentiam voluptatibus at. Esse veniam deterruisset at est, malis putent periculis ad usu. Has facer utamur ea. Enim soleat qualisque ex mel, in nec hinc democritum. Ex solum homero qui, ea vix quis aliquid invidunt, commodo quaerendum eum ex.\n" +
"Vivendo perfecto inciderint ad vim, tritani adolescens efficiantur id usu. Sea ex consul laudem, admodum maiorum vel eu. Pro ut eirmod posidonium, graece hendrerit mei ei. At has virtute sadipscing, id eros eruditi nec. Ei eum reque minim aliquando, mel ex menandri vituperata. admodum maiorum vel eu. Pro ut eirmod posidonium, graece hendrerit mei ei. At has virtute sadipscing, id eros eruditi nec. Ei eum reque minim aliquando, mel ex menandri vituperata.[/center]\n" +
"╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\n" +
"╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]Triva[/size]\n" +
"Lorem ipsum dolor sit amet, at vidit platonem rationibus eum, ad summo graece regione nec, no pro salutatus principes. Mea vivendo eloquentiam voluptatibus at. Esse veniam deterruisset at est, malis putent periculis ad usu. Has facer utamur ea. Enim soleat qualisque ex mel, in nec hinc democritum. Ex solum homero qui, ea vix quis aliquid invidunt, commodo quaerendum eum ex. Lorem ipsum dolor sit amet, at vidit platonem rationibus eum, ad summo graece regione nec, no pro.[/center]\n" +
"╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\n" +
"╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]Triva[/size]\n" +
"Lorem ipsum dolor sit amet, at vidit platonem rationibus eum, ad summo graece regione nec, no pro salutatus principes. Mea vivendo eloquentiam voluptatibus at. Esse veniam deterruisset at est, malis putent periculis ad usu. Has facer utamur ea. Enim soleat qualisque ex mel, in nec hinc democritum. Ex solum homero qui, ea vix quis aliquid invidunt, commodo quaerendum eum ex. Lorem ipsum dolor sit amet, at vidit platonem rationibus eum, ad summo graece regione nec, no pro.[/center]\n" +
"╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\n" +
"╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]Triva[/size]\n" +
"Lorem ipsum dolor sit amet, at vidit platonem rationibus eum, ad summo graece regione nec, no pro salutatus principes. Mea vivendo eloquentiam voluptatibus at. Esse veniam deterruisset at est, malis putent periculis ad usu. Has facer utamur ea. Enim soleat qualisque ex mel, in nec hinc democritum. Ex solum homero qui, ea vix quis aliquid invidunt, commodo quaerendum eum ex. Lorem ipsum dolor sit amet, at vidit platonem rationibus eum, ad summo graece regione nec, no pro.[/center]\n" +
"╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\n" +
"╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][size=5]HOARD[/size]\n" +
"[item="+trait[14]+"] [item="+trait[15]+"] [item="+trait[16]+"] [item="+trait[17]+"] [item="+trait[18]+"][/center]\n" +
"╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\n" +
"[/columns]\n" +
"[COLOR=BLACK]\n" +
"╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][COLOR=BLACK][size=5]Current[/size]\n" +
"Lorem ipsum dolor sit amet, at vidit platonem rationibus eum, ad summo graece regione nec, no pro salutatus principes. Mea vivendo eloquentiam voluptatibus at. Esse veniam deterruisset at est, malis putent periculis ad usu. Has facer utamur ea. Enim soleat qualisque ex mel, in nec hinc democritum. Ex solum homero qui, ea vix quis aliquid invidunt, commodo quaerendum eum ex.\n" +
"Vivendo perfecto inciderint ad vim, tritani adolescens efficiantur id usu. Sea ex consul laudem, admodum maiorum vel eu. Pro ut eirmod posidonium, graece hendrerit mei ei. At has virtute sadipscing, id eros eruditi nec. Ei eum reque minim aliquando, mel ex menandri vituperata.\n" +
"Vivendo perfecto inciderint ad vim, tritani adolescens efficiantur id usu. Sea ex consul laudem, admodum maiorum vel eu. Pro ut eirmod posidonium, graece hendrerit mei ei. At has virtute sadipscing, id eros eruditi nec. Ei eum reque minim aliquando, mel ex menandri vituperata.\n" +
"Vivendo perfecto inciderint ad vim, tritani adolescens efficiantur id usu. Sea ex consul laudem, admodum maiorum vel eu. Pro ut eirmod posidonium, graece hendrerit mei ei. At has virtute sadipscing, id eros eruditi nec. Ei eum reque minim aliquando, mel ex menandri vituperata.\n" +
"[/COLOR][/center][COLOR=BLACK]╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯[/COLOR]\n" +
"[COLOR=BLACK]\n" +
"╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][COLOR=BLACK][size=5]Job Description[/size]\n" +
"Lorem ipsum dolor sit amet, at vidit platonem rationibus eum, ad summo graece regione nec, no pro salutatus principes. Mea vivendo eloquentiam voluptatibus at. Esse veniam deterruisset at est, malis putent periculis ad usu. Has facer utamur ea. Enim soleat qualisque ex mel, in nec hinc democritum. Ex solum homero qui, ea vix quis aliquid invidunt, commodo quaerendum eum ex.[/COLOR][/center][COLOR=BLACK]╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯[/COLOR]\n" +
"[COLOR=BLACK]\n" +
"╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][COLOR=BLACK][size=5]Day in The Life Of[/size]\n" +
"Lorem ipsum dolor sit amet, at vidit platonem rationibus eum, ad summo graece regione nec, no pro salutatus principes. Mea vivendo eloquentiam voluptatibus at. Esse veniam deterruisset at est, malis putent periculis ad usu. Has facer utamur ea. Enim soleat qualisque ex mel, in nec hinc democritum. Ex solum homero qui, ea vix quis aliquid invidunt, commodo quaerendum eum ex.\n" +
"Vivendo perfecto inciderint ad vim, tritani adolescens efficiantur id usu. Sea ex consul laudem, admodum maiorum vel eu. Pro ut eirmod posidonium, graece hendrerit mei ei. At has virtute sadipscing, id eros eruditi nec. Ei eum reque minim aliquando, mel ex menandri vituperata.\n" +
"Vivendo perfecto inciderint ad vim, tritani adolescens efficiantur id usu. Sea ex consul laudem, admodum maiorum vel eu. Pro ut eirmod posidonium, graece hendrerit mei ei. At has virtute sadipscing, id eros eruditi nec. Ei eum reque minim aliquando, mel ex menandri vituperata.\n" +
"Vivendo perfecto inciderint ad vim, tritani adolescens efficiantur id usu. Sea ex consul laudem, admodum maiorum vel eu. Pro ut eirmod posidonium, graece hendrerit mei ei. At has virtute sadipscing, id eros eruditi nec. Ei eum reque minim aliquando, mel ex menandri vituperata.\n" +
"[/COLOR][/center][COLOR=BLACK]╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯[/COLOR]\n" +
"[COLOR=BLACK]\n" +
"╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮\n" +
"[center][FONT=TimesNewRoman][COLOR=BLACK][size=5]ART[/size]\n" +
"ALL ART GOES HERE\n" +
"[/COLOR][/center][COLOR=BLACK]╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯[/COLOR]\n" +
"[COLOR=BLACK]╭━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╮[center][FONT=TimesNewRoman][COLOR=BLACK]\n" +
"NOTES\n" +
"[/center]\n" +
"[COLOR=BLACK]╰━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╯\n" +
"[COLOR=BLACK]\n" +
"[FONT=TimesNewRoman][size=3]Bio By: [url=http://flightrising.com/main.php?p=lair&tab=userpage&id=215765][FONT=TimesNewRoman]CityTurtle[/FONT][/url]";
        return bio;
    }
}
