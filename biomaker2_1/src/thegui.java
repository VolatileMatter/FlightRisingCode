/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Isabel
 */
public class thegui extends javax.swing.JFrame {

    /**
     * Creates new form thegui
     */
    static bio current = new bio();
    
    public thegui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        NicknameField = new javax.swing.JTextField();
        AgeField = new javax.swing.JTextField();
        PronounsField = new javax.swing.JTextField();
        SexualityField = new javax.swing.JTextField();
        GenderField = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        ResidenceField = new javax.swing.JTextField();
        BirthplaceField = new javax.swing.JTextField();
        LikesField = new javax.swing.JTextField();
        DislikesField = new javax.swing.JTextField();
        SympField = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        OriField = new javax.swing.JTextField();
        AlignField = new javax.swing.JTextField();
        VirtueField = new javax.swing.JTextField();
        ViceField = new javax.swing.JTextField();
        JobField = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        ScentField = new javax.swing.JTextField();
        SizeField = new javax.swing.JTextField();
        SpeedField = new javax.swing.JTextField();
        OOAField = new javax.swing.JTextField();
        HatcheryIMGField = new javax.swing.JTextField();
        HatcheryURLField = new javax.swing.JTextField();
        Item1Field = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BBCodeField = new javax.swing.JTextArea();
        GenerateButton = new javax.swing.JButton();
        RandomizeButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField37 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(600, 400));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setAutoscrolls(true);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        NicknameField.setText("None");
        NicknameField.setBorder(javax.swing.BorderFactory.createTitledBorder("Nickname"));

        AgeField.setText("Adult");
        AgeField.setBorder(javax.swing.BorderFactory.createTitledBorder("Age"));

        PronounsField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        PronounsField.setText("She/Her");
        PronounsField.setBorder(javax.swing.BorderFactory.createTitledBorder("Pronouns"));

        SexualityField.setText("Asexual");
        SexualityField.setBorder(javax.swing.BorderFactory.createTitledBorder("Sexuality"));

        GenderField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        GenderField.setText("Female");
        GenderField.setBorder(javax.swing.BorderFactory.createTitledBorder("Gender"));
        GenderField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenderFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NicknameField)
                    .addComponent(AgeField)
                    .addComponent(SexualityField)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(GenderField, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PronounsField, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NicknameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AgeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PronounsField)
                    .addComponent(GenderField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SexualityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ResidenceField.setText("Sornieth");
        ResidenceField.setBorder(javax.swing.BorderFactory.createTitledBorder("Residence"));

        BirthplaceField.setText("Sornieth");
        BirthplaceField.setBorder(javax.swing.BorderFactory.createTitledBorder("Birthplace"));

        LikesField.setText("Unknown");
        LikesField.setBorder(javax.swing.BorderFactory.createTitledBorder("Likes"));

        DislikesField.setText("Unknown");
        DislikesField.setBorder(javax.swing.BorderFactory.createTitledBorder("Dislikes"));

        SympField.setBorder(javax.swing.BorderFactory.createTitledBorder("Sympathies"));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ResidenceField)
                    .addComponent(BirthplaceField)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(LikesField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DislikesField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(SympField))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ResidenceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BirthplaceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LikesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DislikesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SympField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));
        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        OriField.setText("Unknown");
        OriField.setBorder(javax.swing.BorderFactory.createTitledBorder("Origin"));

        AlignField.setText("Neutral Good");
        AlignField.setBorder(javax.swing.BorderFactory.createTitledBorder("Align"));
        AlignField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlignFieldActionPerformed(evt);
            }
        });

        VirtueField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        VirtueField.setText("None");
        VirtueField.setBorder(javax.swing.BorderFactory.createTitledBorder("Virtue"));

        ViceField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        ViceField.setText("None");
        ViceField.setToolTipText("");
        ViceField.setBorder(javax.swing.BorderFactory.createTitledBorder("Vice"));

        JobField.setText("Unknown");
        JobField.setBorder(javax.swing.BorderFactory.createTitledBorder("Job"));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(OriField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel13Layout.createSequentialGroup()
                            .addComponent(VirtueField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(ViceField, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                        .addComponent(AlignField, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(JobField, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AlignField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VirtueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ViceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OriField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JobField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));
        jPanel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ScentField.setText("Pine Trees");
        ScentField.setBorder(javax.swing.BorderFactory.createTitledBorder("Scent"));

        SizeField.setBorder(javax.swing.BorderFactory.createTitledBorder("Size Class"));

        SpeedField.setBorder(javax.swing.BorderFactory.createTitledBorder("Speed Class"));

        OOAField.setBorder(javax.swing.BorderFactory.createTitledBorder("OOA Class"));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScentField)
                    .addComponent(SizeField)
                    .addComponent(SpeedField)
                    .addComponent(OOAField))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(ScentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(SpeedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OOAField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        HatcheryIMGField.setText("http://orig14.deviantart.net/f3d4/f/2016/232/4/5/oie_oie_overlay__1__by_intimer_genetics_inc-daens5k.gif");
        HatcheryIMGField.setBorder(javax.swing.BorderFactory.createTitledBorder("Hatchery IMG Link"));

        HatcheryURLField.setText("http://www1.flightrising.com/forums/baz/1532088");
        HatcheryURLField.setBorder(javax.swing.BorderFactory.createTitledBorder("Hatchery URL Link"));

        Item1Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Three Items"));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Item1Field)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(HatcheryIMGField, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(HatcheryURLField, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HatcheryIMGField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HatcheryURLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Item1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("BB Code"));

        BBCodeField.setColumns(20);
        BBCodeField.setRows(5);
        jScrollPane1.setViewportView(BBCodeField);

        GenerateButton.setText("Generate Code");
        GenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateButtonActionPerformed(evt);
            }
        });

        RandomizeButton.setText("Randomize");
        RandomizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomizeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(GenerateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RandomizeButton)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GenerateButton)
                    .addComponent(RandomizeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Template Sources - Do not edit, just copy");

        jTextField7.setText("http://flightrising.com/main.php?p=lair&id=30450&tab=dragon&did=10311349");
        jTextField7.setBorder(javax.swing.BorderFactory.createTitledBorder("Horizontal Banner"));

        jTextField8.setText("http://flightrising.com/main.php?p=lair&id=30450&tab=dragon&did=20281372");
        jTextField8.setBorder(javax.swing.BorderFactory.createTitledBorder("Vertical Banner"));

        jTextField9.setText("http://ammoth.tumblr.com/post/110092763801");
        jTextField9.setBorder(javax.swing.BorderFactory.createTitledBorder("Flight Dividers"));

        jTextField37.setText("http://glowingdragons.tumblr.com/post/139502595245/flight-frithsamur-little-lanterns-for-your-bio");
        jTextField37.setToolTipText("");
        jTextField37.setBorder(javax.swing.BorderFactory.createTitledBorder("Flight Lantern Dividers"));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jTextField9, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jTextField37, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField37, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateButtonActionPerformed
        // TODO add your handling code here:
        BBCodeField.setText(" ");
        
        current.setTrait(1 , AgeField.getText());
        current.setTrait(12, AlignField.getText());
        current.setTrait(0 , NicknameField.getText());
        current.setTrait(2 , GenderField.getText());
        current.setTrait(3 , PronounsField.getText());
        current.setTrait(4 , SexualityField.getText());
        current.setTrait(5 , ResidenceField.getText());
        current.setTrait(6 , BirthplaceField.getText());
        current.setTrait(7 , LikesField.getText());
        current.setTrait(8 , DislikesField.getText());
        current.setTrait(10, JobField.getText());
        current.setTrait(14, ViceField.getText());
        current.setTrait(13, VirtueField.getText());
        current.setTrait(9 , OriField.getText());
        current.setTrait(15, ScentField.getText());
        current.setTrait(19, Item1Field.getText());
        current.setHatchery(HatcheryURLField.getText(),HatcheryIMGField.getText());
        BBCodeField.setText(current.makeBio());
        
    }//GEN-LAST:event_GenerateButtonActionPerformed

    private void GenderFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenderFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GenderFieldActionPerformed

    private void RandomizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomizeButtonActionPerformed
        // TODO add your handling code here:        
        current.genAge();
        AgeField.setText(current.getTrait(1));
        
        current.genGen();
        GenderField.setText(current.getTrait(2));
        
        current.genSexuality();
        SexualityField.setText(current.getTrait(4));
        
        current.genlikes();
        LikesField.setText(current.getTrait(7));
        DislikesField.setText(current.getTrait(8));
        
        current.genJob();
        JobField.setText(current.getTrait(10));
        
        current.genSymp();
        SympField.setText(current.getTrait(11));
        
        current.genAlign();
        AlignField.setText(current.getTrait(12));
        
        current.genVirtue();
        VirtueField.setText(current.getTrait(13));
        
        current.genVice();
        ViceField.setText(current.getTrait(14));
        
        current.genScents();
        ScentField.setText(current.getTrait(15));
        
        current.genSize();
        SizeField.setText(current.getTrait(16));
       
        current.genSpeed();
        SpeedField.setText(current.getTrait(17));
        
        current.genOOA();
        OOAField.setText(current.getTrait(18));
        
        current.genMats();
        Item1Field.setText(current.getTrait(19));
        
    }//GEN-LAST:event_RandomizeButtonActionPerformed

    private void AlignFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlignFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AlignFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(thegui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(thegui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(thegui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(thegui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new thegui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AgeField;
    private javax.swing.JTextField AlignField;
    private javax.swing.JTextArea BBCodeField;
    private javax.swing.JTextField BirthplaceField;
    private javax.swing.JTextField DislikesField;
    private javax.swing.JTextField GenderField;
    private javax.swing.JButton GenerateButton;
    private javax.swing.JTextField HatcheryIMGField;
    private javax.swing.JTextField HatcheryURLField;
    private javax.swing.JTextField Item1Field;
    private javax.swing.JTextField JobField;
    private javax.swing.JTextField LikesField;
    private javax.swing.JTextField NicknameField;
    private javax.swing.JTextField OOAField;
    private javax.swing.JTextField OriField;
    private javax.swing.JTextField PronounsField;
    private javax.swing.JButton RandomizeButton;
    private javax.swing.JTextField ResidenceField;
    private javax.swing.JTextField ScentField;
    private javax.swing.JTextField SexualityField;
    private javax.swing.JTextField SizeField;
    private javax.swing.JTextField SpeedField;
    private javax.swing.JTextField SympField;
    private javax.swing.JTextField ViceField;
    private javax.swing.JTextField VirtueField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField37;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
} 

    class bio {
        //static String flag = "http://orig04.deviantart.net/9133/f/2016/290/9/0/verticalbannertemplate_by_intimer_genetics_inc-dalc0rn.png";
        static String flag = "http://orig01.deviantart.net/1e47/f/2017/103/0/5/verticalbannertemplate_by_intimer_genetics_inc-db5oues.png";
        
        public static String hatchery = "hatchery";
        public static String getHatchery(){return hatchery;}
        public static void setHatchery(String a, String b){hatchery = "[url="+a+"][img]"+b+"[/img][/url]";}
        
        public static String[] traits = {"0nickname","1age","2gender","3prnouns","4sexuality","5residence","6birthplace","7likes","8dislikes","9origin","10job","11sympathies","12align","13virtue","14vice","15scent","16size","17speed","18ooa","19hoard"};
        public static String getTrait(int index) {return traits[index]; }
        public static void setTrait(int index, String a) {traits[index] = a; }
       
        public static void genMats(){
        String[] mats = {"Olive Sea Snake", "Magpie", "Crested Newt", "Black Capped Budgie", "Blue Throated Budgie", "Mute Swan", "Juvenile Prairie Skink", "River Warden", "Moonbeam Sardines", "Sardines", "Clown Shrimp", "Flying Fish", "Glowslug", "Sea Fae", "Stubby Squid", "Green Corycat", "Blue Swimmer Crab", "Lagoon Guppy", "Blue Dragon Seaslug", "Crystal Jellyfish", "Wild Green Discus", "Snowflake Urchin", "Glow Star", "Frostbite Beetle", "Tundra Grub", "Blue Cricket", "Lunar Lacewing", "Wasteland Pauper", "Snowkissed Centipede", "Silt Sifter", "Zebra Caterpillar", "Water Strider", "Giant Darner", "Marsh Choker", "Glow Mushroom", "Blue Parrot Tulip", "Sour Spinach", "Stellaria Media", "Seaberry", "Spearmint", "Lume Daffodil", "Charged Duneberry", "Perfect Skipping Stone", "Skipping Stone", "Blue Quartz", "Labradorite", "Raw Lapis Lazuli", "Azurite", "Faded Blue Fabric", "Discarded Ribbon", "Snakeskin Cloth", "Apatite", "Celestine", "Blue Goo", "Blue Ooze", "Blue Sludge", "Bluefin Charger Fin", "Bluestreaked Shell", "Coal Carpenter", "Dwarf Truffle", "Blue Dragon Reef Snail", "Bramble Guardian", "River Muck", "Zalis", "Permafrost Impaler", "Venerable Shalebuck", "Bluemoon Aviar", "Snow Streak", "Poisonous Toridae", "Wartoad", "Octoflyer", "Maren Scout", "Construction Mith", "Frost Delver", "Blue Vein Pansy", "Gaseous Megashrimp", "Hippojay", "Nephrite Chameleon", "Snowsquall Floracat", "Leftover Residue", "Lesser Wisp", "Tourmaline Vulstal", "Frostbite Hummingbird", "Shimmering Xolo", "Roundhorn Melprin", "Hati", "Rivermouth Flatbill", "Bucktooth Digger", "Ice Sprite", "Water Sprite", "Polarfreeze Defender", "Wavebreak Snarler", "Ectoplasmine", "Jadecarved Decoy", "Slumbering Charlatan", "Fawn Fox Rat", "Mantarune", "Great Blue Waveskimmer", "Lightning Sprite", "Lightning Lancer", "Azure Highnoon Hank", "Cobalt Deepsea Bulb", "Laureate's Cap", "Blue Satin Tunic", "Blue Bandana", "Alchemist's Fez", "Umbral Wreath", "Blue Renaissance Shirt", "Blue Breeches", "Cobalt Shades", "Winter Wind", "Waverider Cape", "Yelling Wyrmpeck", "Pixie Procession", "Cloudy Feathered Wings", "Charged Might & Acuity Fragments", "Shock Bolt", "Thunder Slash", "Shock", "Frozen Might & Acuity Fragments", "Frigid Bolt", "Freezing Slash", "Congeal", "Aquatic Might & Acuity Fragments", "Hydro Bolt", "Wave Slash", "Drown", "Meditate", "Guard", "Ward", "Concentration", "Cleansing Elixir"};
        int num = (int)(Math.random()*mats.length); traits[19] = "";
        for (int i = 1; i <= 5; i++){
        num = (int)(Math.random()*mats.length); traits[19] += "[item="+mats[num]+"]"; }
       }
        public static void genAge() {
        String[] mats = {"Hatchling","Child","Teenager","Young Adult","Adult","Senior","Older Adult"};
        int num = (int)(Math.random()*mats.length);
        traits[1] = mats[num];
        }
        public static void genGen() {String[] mats = {"Female","Male","Genderfluid","Nonbinary","Trans"}; int num = (int)(Math.random()*mats.length); traits[2] = mats[num];}
        public static void genSexuality() {
        String[] mats = {"Heterosexual","Asexual","Homosexual","Cassexual","Pansexual","Bisexual"};
        int num = (int)(Math.random()*mats.length);
        traits[4] = mats[num];
        }
        public static void genlikes() {
        String[] mats = {"Cuddling", "Music", "Hot Chocolate", "Long Walks", "Dogs", "Cats", "Animals", "Sweaters", "Summer", "Winter", "Spring", "Nature", "Swimming", "Sweet Tea", "Smiling", "Laughing", "Jokes", "Long Hair", "Good Vibes", "Day Dreaming", "Reading", "Sleeping", "Food", "Blogging", "Photography", "Fuzzy Blankets", "Kissing", "Sex", "Hugs", "Hand Holding", "Money", "Clothes", "Football", "Basketball", "Baseball", "Kickball", "Dodge Ball", "Concerts", "Partying", "Drinking", "Weed", "Drugs", "Guys", "Girls", "Texting", "Dancing", "Shoes", "Fashion", "Acting", "Modeling", "Helping Others", "Kissing In The Rain", "Painting", "Drawing", "Horror Movies", "Romantic Movies", "Comedies", "Ice Cold Water", "Instant Tea", "Vivaldi", "Rap Music", "Bruegel & Vermeer", "Picasso", "Room Service", "Waiting", "Siena", "Mixed Vegetables", "Leonard Cohen’S Lyrics", "Ambulance Sirens", "Candles", "Telephone Solicitations", "Kites", "Junk Mail", "Apples", "Insurance", "All Things Apple", "Being Put On “Hold”", "Chocolate", "Colorized Movies", "Rainbows", "Strawberries", "Used Book Stores", "Crickets", "Good Manners", "“Sucks”", "Handmade Quilts", "Daily Oklahoman", "Cats", "Mice", "Jewelry", "Rolypoly Bugs", "Lapel Buttons", "Reruns", "Quotations", "Know-It-All’S", "“Slasher” Films", "Boiled Okra", "Shakespeare", "The Simpsons", "Post-It Notes", "Whining", "Garden Tomatoes", "Cigarettes", "Comfortable Shoes", "New Shoes", "Gossip", "Elmer’S Glue", "Cartridge Pens", "Snoring", "Mystery", "Whistling", "Quiet", "Trivial Trivia", "Chinese Elms", "Golf", "Roses", "Elvis Presley", "Body Hair", "Body Odor", "Germs", "Liars", "Hypocrites", "Drama", "Studying", "Being Alone", "Crowded Rooms", "People", "Mushrooms", "Bugs", "Wet Socks", "Crying", "Being Touched", "Rain", "Thunder Storms", "The Cold", "The Heat", "Summer", "Winter", "Spring", "Fall", "Water", "Reading", "School", "Sweating", "(Movie)", "(Artist)", "(Actor/Actress)", "Smoking", "Drinking", "Cheaters", "Kids", "Sad Movies", "Horror Movies", "Annoying People", "Puking", "Being Sick", "Rough Textures", "Funerals", "Boats", "Airplanes"};
        int num = (int)(Math.random()*mats.length);
        traits[7] = mats[num]+", ";
        num = (int)(Math.random()*mats.length);
        traits[7] += mats[num];
        num = (int)(Math.random()*mats.length);
        traits[8] = mats[num]+", ";
        num = (int)(Math.random()*mats.length);
        traits[8] += mats[num];
        }
        public static void genAlign(){
            String[] a = {"Neutral","Chaotic","Lawful"};
            String[] b = {"Good","Neutral","Evil"};
            int num = (int)(Math.random()*a.length);
            traits[12] = a[num]+" ";
            num = (int)(Math.random()*b.length);
            traits[12] += b[num];
        }
        public static void genVirtue() {String[] mats = {"Ability", "Abundance", "Acceptance", "Accountability", "Accuracy", "Achievement", "Acknowledgement", "Acting On Convictions", "Activism", "Adaptability", "Adoration", "Adventure", "Advice", "Affection", "Aging Gracefully", "Allowing", "Altruism", "Amazement", "Ambition", "Anger At Injustice", "Anticipation", "Apology", "Appeasement", "Appreciation", "Appreciation Of Beauty", "Appreciation Of", "Excellence", "Approbation", "Appropriate Knowledge", "Appropriate Conduct", "Approval", "Art", "Assertiveness", "Assumptions", "Atonement", "Attention", "Attitude", "Austerity", "Authenticity", "Authority", "Autonomy", "Awareness", "Awe", "Balance", "Beauty", "Being True To Oneself", "Belief", "Benevolence", "Benignity", "Bliss", "Bravery", "Candor", "Capacity To Love", "Capacity To Be Loved", "Care", "Caring", "Caution", "Celebration", "Celibacy", "Certainty", "Chance", "Change", "Chaos", "Character", "Charity", "Charm", "Chastity", "Cheerfulness", "Chivalry", "Choice", "Citizenship", "Civility", "Clarity", "Class", "Cleanliness", "Coincidence", "Collaboration", "Commitment", "Communication", "Communion", "Community", "Companionship", "Compassion", "Completeness", "Composure", "Comprehension", "Compromise", "Concentration", "Confession", "Confidence", "Congruence", "Conscience", "Consciousness", "Consecration", "Conservatism", "Consideration", "Consistency", "Contemplation", "Contentment", "Contribution", "Control", "Conviction", "Cooperation", "Cooperativeness", "Correctness", "Courage", "Courteousness", "Courtesy", "Creativity", "Credibility", "Critical Thinking", "Culture", "Curiosity", "Death (Acceptance Of)", "Decency", "Dedication", "Deliberation", "Delight", "Dependability", "Desire", "Destiny", "Detachment", "Determination", "Devotion To Virtues", "Devotion To Others", "Dignity", "Diligence", "Diplomacy", "Discernment", "Discipline", "Discretion", "Disillusion", "Dissolution", "Diversity", "Dreams", "Dutifulness", "Eagerness", "Earnestness", "Ecstasy", "Education", "Efficiency", "Endurance", "Effort", "Elegance", "Elevation", "Eloquence", "Emotion", "Empathy", "Emptiness", "Encouragement", "Endurance", "Energy", "Enlightenment", "Enthusiasm", "Epiphany", "Equality", "Equanimity", "Esteem", "Etiquette", "Excellence", "Excitement", "Expressiveness", "Extravagance", "Failure (Allowing For)", "Fairness", "Faith", "Faithfulness", "Family", "Farsightedness", "Fearlessness", "Feeling", "Fidelity", "Finishing What’S Started", "Flexibility", "Flow", "Focus", "Forbearance", "Foresight", "Forgiveness", "Fortitude", "Frankness", "Freedom", "Friendliness", "Friendship", "Frugality", "Fulfillment", "Fun", "Gallantry", "Generosity", "Genius", "Gentleness", "Genuineness", "Glory", "Goals", "Godliness", "Good Speech", "Goodness", "Grace", "Grandeur", "Gratefulness", "Gratitude", "Gravitas", "Gravity", "Growth", "Happiness", "Harmlessness", "Harmony", "Healing", "Health", "Heaven On Earth", "Helpfulness", "Helping Others", "Holiness", "Honesty", "Honor", "Hope", "Hopefulness", "Hospitality", "Humanity", "Humility", "Humor", "Idealism", "Ideals", "Illumination", "Imagination", "Impartiality", "Imperfection (Allowing For)", "Inclusion", "Incorruptibility", "Independence", "Individuality", "Industriousness", "Ingenuity", "Initiative", "Inner Exploration", "Innocence", "Innovation", "Insight", "Inspiration", "Instinct", "Integrity", "Intelligence", "Interdependence", "Interest In The World", "Intimacy", "Intuition", "Inventiveness", "Investigation", "Irony", "Joy", "Joyfulness", "Judgment (Good)", "Justice", "Kind Speech", "Kindness", "Kinship", "Knowledge", "Laughter", "Leadership", "Learning", "Leisure", "Liberalism", "Liberty", "Listening", "Logic", "Love", "Love Of Learning", "Loving-Kindness", "Lovingness", "Loyalty", "Luck", "Luxuriating", "Majesty", "Management", "Manners", "Maturity", "Meaning", "Mellowness", "Mercy", "Mildness", "Mindfulness", "Mistakes (Allowing For)", "Moderation", "Modesty", "Morality", "Motherhood", "Motivation", "Niceness", "Nobility", "Non-Covetousness", "Non-Duality", "Non-Separateness", "Non-Violence", "Nostalgia", "Nurturance", "Nurturing", "Objectivity", "Open-Heartedness", "Open-Mindedness", "Openness", "Optimism", "Order", "Orderliness", "Organization", "Originality", "Overcoming Adversity", "Pacifism", "Paradise", "Passion", "Patience", "Patriotism", "Peace", "Peacefulness", "Penitence", "Pensiveness", "Perseverance", "Persistence", "Personality", "Perspective", "Persuasion", "Philanthropy", "Piety", "Pity", "Planning", "Play", "Playfulness", "Pleasure", "Pluralism", "Politeness", "Positive Bias", "Potency", "Potential", "Power (Right Use Of)", "Practice", "Practicality", "Pragmatism", "Praise", "Prayer", "Prayerfulness", "Precision", "Principles", "Privacy", "Privilege", "Potency", "Probity", "Problem-Solving", "Productivity", "Professionalism", "Profit", "Promises", "Propriety", "Prosperity", "Protection", "Protest", "Prudence", "Punctuality", "Purification", "Purity", "Purity Of Heart", "Purpose", "Purposeful Work", "Purposefulness", "Quality Evaluation", "Quality Improvement", "Quest", "Radiance", "Rapture", "Rationality", "Realism", "Reality", "Realization", "Reason", "Rebirth", "Receptivity", "Reciprocity", "Reconciliation", "Rectitude", "Redemption", "Refinement", "Reflection", "Relaxation", "Release", "Reliability", "Religiosity", "Remembering", "Remembrance", "Remorse", "Renunciation", "Repentance", "Reputation", "Research", "Resilience", "Resisting Temptations", "Resolution", "Respect", "Respectability", "Respectfulness", "Responsibility", "Restraint", "Reverence", "Right Action", "Right Concentration", "Right Effort", "Right Intention", "Right Livelihood", "Right Mindfulness", "Right Speech", "Right View (Buddha’S", "Noble Eightfold Path)", "Right Use Of Power", "Right Use Of Will", "Righteousness", "Rights (Respect For)", "Risk Taking", "Rituals", "Romance", "Roots", "Sacredness", "Sacrifice", "Sadness", "Salvation", "Sanity", "Satiety", "Satisfaction", "Secrecy (Proper Use)", "Security", "Seeing", "Self-Awareness", "Self-Centeredness", "Self-Confidence", "Self-Control", "Self-Discipline", "Self-Esteem", "Self-Examination", "Self-Expression", "Self-Improvement", "Self-Possession", "Self-Regulation", "Self-Reliance", "Self-Respect", "Self-Restraint", "Self-Righteousness", "Self-Trust", "Sense Of Purpose", "Sensibility", "Sensitivity", "Sensory Pleasure", "Sensuality", "Sentimentality", "Serendipity", "Serenity", "Service", "Sharing", "Shyness", "Silence", "Simplicity", "Sincerity", "Skepticism", "Skill", "Smartness", "Sobriety", "Social Intelligence", "Social Responsibility", "Solidarity", "Solitude", "Soul Evolution", "Soulfulness", "Spirit", "Spiritual Insight", "Spirituality", "Sportsmanship", "Steadfastness", "Stick-To-It-Iveness", "Straightforwardness", "Strength", "Stress (“Good”)", "Study", "Success", "Succor", "Suffering (With", "Understanding)", "Support Of Others", "Surrender", "Sweet-Tempered", "Sympathy", "Synergy", "Tact", "Tactfulness", "Talent", "Taste", "Teaching Others", "Team-Spirit", "Teamwork", "Temperance", "Tenacity", "Tenderness", "Thankfulness", "Thoroughness", "Thoughtfulness", "Thrift", "Time", "Tithing", "Tolerance", "Training", "Tranquility", "Transcendence", "Transcendental Wisdom", "Transformation", "Transition", "Trust", "Trustfulness", "Trustworthiness", "Truth", "Truthfulness", "Unconditional Love", "Understanding", "Unity", "Universality", "Unselfishness", "Valor", "Values", "Verbal Acuity", "Victory", "Vigor", "Virility", "Virtue", "Vision", "Vitality", "Vulnerability", "Wealth", "Wholesomeness", "Will (Proper Use Of)", "Wisdom", "Wonder", "Work", "Workmanship", "Worship", "Worth", "Youthfulness", "Zealousness", "Zest"}; 
        int num = (int)(Math.random()*mats.length); traits[13] = mats[num];}
        public static void genVice(){String[] mats = {"Abuse", "Addictions", "Adultery", "Adversity", "Aggression", "Agitation", "Alcoholism", "Alienation", "Aloofness", "Ambition", "Anarchy", "Anger", "Angst", "Animosity", "Anxiety", "Apathy", "Approval-Seeking", "Arrogance", "Attachment", "Avarice", "Awkwardness", "Baseness", "Bigotry", "Blame", "Blasphemy", "Boastfulness", "Boredom", "Brutality", "Burnout", "Calculation", "Callousness", "Calumniation", "Capriciousness", "Celebrity", "Censoriousness", "Chaos", "Chauvinism", "Complacency", "Complaining", "Compromise", "Conceit", "Condescension", "Conflict", "Conformity", "Confusion", "Conniving", "Contempt", "Contradiction", "Control", "Corruption", "Cowardice", "Criticism", "Cruelty", "Cunning", "Cursing", "Cynicism", "Death", "Debasement", "Deceit", "Deception", "Definition", "Delusion", "Denial", "Dependency", "Depression", "Derision", "Desecration", "Desire For Fame", "Desolation", "Despair", "Destitution", "Detachment", "Deviance", "Disappointment", "Discord", "Disrespect", "Dissatisfaction", "Dogmatism", "Dominance", "Doubt", "Drudgery", "Dysfunctionality", "Eagerness For Power", "Eccentricity", "Effrontery", "Egoism", "Egotism", "Elitism", "Embarrassment", "Emptiness", "Enmity", "Enviousness", "Envy", "Escapism", "Evil", "Exaggeration", "Excessiveness", "Exclusion", "Expectations", "Exploitation", "Extravagance", "Extremism", "Failure", "Faithlessness", "Falseness", "Fame (Seeking", "After)", "Fantasy", "Fashion", "Fatalism", "Faults", "Fear", "Fight", "Fixations", "Folly", "Forgetfulness", "Frailty", "Fundamentalism", "Furtiveness", "Futility", "Gambling", "Garrulity", "Gaudiness", "Glamour", "Gloominess", "Gluttony", "Gossip", "Greed", "Grief", "Holding Grudges", "Grumpiness", "Guilt", "Hard-Heartedness", "Hate", "Hatred", "Haughtiness", "Hell", "Heresy", "High-Handedness", "Hoarding", "Hostility", "Humiliation", "Hurt", "Hyperbole", "Hypocrisy", "Hysteria", "Ignorance", "Illusion", "Imitation", "Impatience", "Imperfection", "Imperiousness", "Imposture", "Impudence", "Inattentiveness", "Indecency", "Indecision", "Indifference", "Indigence", "Individualism", "Ingratitude", "Inhibitions", "Insanity", "Insatiability", "Insecurity", "Insidiousness", "Insult", "Intolerance", "Intimidation", "Intransigence", "Irony", "Irrationality", "Irresponsibility", "Irritation", "Isolation", "Jealousy", "Judgmental", "Justification", "Know-It-All", "Laziness", "Lecherousness", "Lethargy", "Licentiousness", "Lies", "Loneliness", "Loss", "Lust", "Luxury", "Lying", "Machismo", "Madness", "Maliciousness", "Malignancy", "Manipulation", "Masochism", "Materialism", "Meanness", "Mediocrity", "Meekness", "Melancholy", "Mercilessness", "Misery", "Miserliness", "Mistakes", "Money (Focus On)", "Moodiness", "Naiveté", "Narcissism", "Narrow-Mindedness", "Nastiness", "Neediness", "Negativity", "Neurosis", "Nihilism", "Obedience (Without", "Question)", "Obsession", "Obstinacy", "Opportunism", "Oppression", "Ostentatiousness", "Over-Consumption", "Over-Identification", "Pacifism", "Pain", "Panic", "Passion", "Patronizing", "Pensiveness", "Penury", "Persuasion", "Perversion", "Pessimism", "Pettiness", "Pomposity", "Poverty", "Power", "Prejudice", "Presumption", "Pretense", "Pretentiousness", "Pride", "Privilege", "Problems", "Procrastination", "Prodigality", "Profit-As-Sole-Value", "Profligacy", "Promiscuity", "Promises Un-Kept", "Punishment", "Quarrelsomeness", "Racism", "Rage", "Rapaciousness", "Rapacity", "Rashness", "Recklessness", "Regret", "Rejection", "Remorse", "Resentment", "Resignation", "Revenge", "Rudeness", "Righteousness", "Ridicule", "Righteousness", "Rigidity", "Risk-Aversion", "Romantic Fantasy", "Rudeness", "Rumor Spreading", "Ruthlessness", "Sacrifice", "Sadism", "Sadness", "Sarcasm", "Scandal Mongering", "Secrecy", "Seduction", "Self-Centeredness", "Self-Denial", "Self-Destructiveness", "Self-Doubt", "Self-Hatred", "Selfishness", "Self-Pity", "Self-Righteousness", "Sensationalism", "Separateness", "Separation", "Sexual Lust", "Shame", "Shamelessness", "Shyness", "Sin", "Skepticism", "Sloth", "Snobbery", "Sorrow", "Spendthriftness", "Spite", "Spoiling", "Stagnation", "Stinginess", "Stress", "Stubbornness", "Stupidity", "Suffering", "Superficiality", "Superiority", "Suspicion", "Taboos", "Temper Tantrums", "Terror", "Theft", "Timidity", "Torment", "Torture", "Tragedy", "Treason", "Tyranny", "Ugliness", "Unkindness", "Unreason", "Unruliness", "Unyielding", "Vanity", "Venality", "Verbosity", "Vices", "Vindictiveness", "Violence", "Vulnerability", "Wastrelness", "Weakness", "Worry", "Wrath", "Zealotry"}; 
        int num = (int)(Math.random()*mats.length);
        traits[14] = mats[num];}
        public static void genScents(){String[] mats = {"Acai Berry", "Almond", "Aloe Botanic", "Alpine Meadow", "Amber", "Apple", "Baby", "Bamboo", "Bay Rum", "Birch Bark", "Blackberry Sage", "Blush", "Brownie", "Bubblegum  Carnation", "Casa Blanca Lily", "Cedarwood", "Champagne", "Cherry Blossom", "China Lily", "China Musk", "China Rain", "Cilantro", "Cinnamon", "Citron", "Clove", "Coconut", "Cucumber", "Cupcake", "Earth", "Egyptian Musk", "Fig", "Forest Rain", "Frankincense", "French Vanilla", "Fresh Cut Grass", "Fresh Laundry", "Gardenia", "Ginger Lily", "Grapefruit", "Green Tea", "Hibiscus", "Himalaya", "Honey", "Honeydew", "Honeysuckle", "Indica Ivy", "Jade Iris Jasmine", "Kiwi", "Lavender", "Lemon", "Verbena", "Lilac", "Lime", "Leaf", "Limoncello", "Magnolia", "Muguet", "Myrrh", "Nag Champa", "Orange Blossom", "Passion Flower", "Patchouli", "Peach", "Pear", "Pikaki", "Pine", "Needles", "Pineapple", "Pink Martini", "Plum Blossom", "Plumeria", "Pomegranate", "Praline", "Rain", "Rose", "Sage", "Sandalwood", "Scotch Broom", "Sea Mist", "Sheer Musk", "Strawberry", "Tangerine", "Tea Rose", "Tibetan Spice", "Tobacco Tuberose", "Vanilla", "Violet", "Water Lily", "Watermelon", "Waves", "White Ginger", "White Tea", "Woodstock"};
        int num = (int)(Math.random()*mats.length); traits[15] = mats[num];}
        
        public static void genSize(){String[] mats = {"Toy","Messenger","Civillian","Transport","Space Walker","Moon Walker","World Walker","Galaxy Walker"};
        int num = (int)(Math.random()*mats.length);
        traits[16] = mats[num];}
        public static void genSpeed(){String[] mats = {"Hopper","Jumper","Skipper","Sprinter","Mach","Ripper","Blinker","Warper"};
        int num = (int)(Math.random()*mats.length);
        traits[17] = mats[num];}
        public static void genOOA(){String[] mats = {"Superlight","Light","Medius","Greater Medius","Hubble","Greater Hubble","Hitchhiker","Looper","Greater Looper","Deep","Superdeep","Wormholer"};
        int num = (int)(Math.random()*mats.length);
        traits[18] = mats[num];}
         public static void genSymp(){String[] mats = {"Freedom Fighters","Coalition for Good","Oz's Candyshop Inc","New Draconism","The Cartographers"};
        int num = (int)(Math.random()*mats.length);
        traits[11] = mats[num];}
        
        public void genJob() {
     String[] jobs = {"Warrior","Paladin","Wizard","Shopkeeper","Courier","Archaeologist","Scribe","Imagineer","Priest","Gardener","Scribne","Messenger","Blacksmith","Metallurgist","Dancer","Scout","Familiar Caretaker","Beast Master","Fisher","hunter","Healer","Nurse","Guard","Scientist",
                           "Lawyer","Professional Appraiser","Potter","Alchemist","Mercenary","Accountant","Magician","Oracle","Seer","Night Watchman","Serial Killer","Potion Master","Aerial Scout","Artist","Spell Weaver","Hatchling Sitter","Forager","Cook","Beekeeper","Farmer","Jeweler","Seamstress",
                           "Tailor","Weaver","Mason","Writer","Carpenter","Peacemaker","Diplomat","Healer","Spy","Vault Guard","Historian","Scholar","Philosopher","Undertaker","Scryer","Matchmaker","Cartographer","Logger","Astronomer","Pirate","Botanist","Mechanic","Dentist","Nanny","Exalter",
                            "Gamekeeper","Baker","Barber","Hairdresser","Explorer","Cooper","Brewster","Butcher","Maid","Housekeeper","Tracker","Innkeeper","Cheesemaker","Aviary keeper","Silk-Worm Keeper","Spider Keeper","Shepherd","Miner","Lair Construction Crew","Leather Worker","Tanner",
                            "Potter","Spinner","Dyer","Archardist","Tree-keeper","Paper Maker","Candlemaker","Glass Blower","Kite-Maker","Brewmaster","Wine Master","Herbalist","Caravan Leader","Messenger","Exotic Dancer","Gladiator","Electrician","Engineer","Mechanic","Translator","Playwright",
                            "Composer","Trader","Chemist","Illusionist","Bard","Luthier","Actor","Embroiderer","Farrier","Haberdasher","Soap Maker","Conman","Pickpocket","Apothecary","Kennel Master","Ward Crafter","Nest Sitter","Festival Keeper","Anarchist","Bandit","Cavelier","Daredevil","Espionage",
                             "Ninja","Poacher","Knight","Musketeer","Pillager","Samurai","Savager","Seafarer","Master-At-Arms","Slayer","Viking","Ranger","Rogue","Stalker","Theif","Trapper","Zealot","Archmage","Bishop","Conjuerer","Invoker","Jinx","Lich","Mage","Magi","Mediator","Monk","Mystic",
                            "Necromancer","Occultist","Saint","Sorcerer","Sprite","Summoner","Trickster","Warlock","Wizard","Witch","Cleric","Doctor","Druid","Herbalist","Purifier","Sage","Shaman","Surgeon","Sylph","Witch Doctor","Bouncer","Lookout","Mafioso","Consigliere","Warden","Apiarist","Arborist",
                           "Collector","Deepsea Diver","Excavator","Fisher","Fletcher","Florist","Fungiculturalist","Gatherer","Gravedigger","Harvester","Hoarder","Hobbyist","Reaper","Scavenger","Adviser","Archivist","Coach","Courtier","Educator","Teacher","Librarian","Mentor","Pedagogue","Proctor",
                            "Professor","Reporter","Storyteller","Savant","Trainer","Locksmith","Woodcarver"};
      int num = (int)(Math.random()*jobs.length);
      traits[10] = jobs[num];
  }  
        
        
        
        public static String makeBio() {
            String bio = "";
            bio += "[center][img]http://orig09.deviantart.net/e369/f/2016/290/5/b/horizontal_template2_by_intimer_genetics_inc-dalc0r9.png[/img][/center]\n" +
"[columns][img]"+flag+"[/img][nextcol]\n" +
"[center][b][font=times new roman]A B O U T[/font][/b]\n" +
"[img]http://orig03.deviantart.net/553d/f/2016/290/3/e/tumblr_nj9kyb0aii1r28672o5_500_by_intimer_genetics_inc-dalbu8t.png[/img][/center][columns][size=3][font=helvetica][b]Nickname[/b]: "+traits[0]+"\n" +
"[b]Age:[/b] "+traits[1]+"\n" +
"[b]Gender:[/b] "+traits[2]+"\n" +
"[b]Pronouns:[/b] "+traits[3]+"\n" +
"[b]Sexuality:[/b] "+traits[4]+"\n" +
"\n" +
"[b]Residence:[/b] "+traits[5]+"\n" +
"[b]Birthplace:[/b] "+traits[6]+"\n" +
"\n" +
"[b]Likes:[/b] "+traits[7]+"\n" +
"[b]Dislikes:[/b] "+traits[8]+"\n" +
"\n" +
"[b]Origin: [/b] Unknown\n" +
"[b]Job:[/b] "+traits[10]+"\n" +
"[color=transparent]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[/color][nextcol][size=3][font=helvetica]\n" +
"[b]Thread Picks:[/b] x\n" +
"[b]Sympathies:[/b] "+traits[11]+"\n" +
"\n" +
"[b]Align:[/b] "+traits[12]+"\n" +
"[b]Virtue:[/b] "+traits[13]+"\n" +
"[b]Vice:[/b] "+traits[14]+"\n" +
"\n" +
"[b]Scent:[/b] "+traits[15]+"\n" +
"[b]Size class:[/b] "+traits[16]+"\n" +
"[b]Speed class:[/b] "+traits[17]+"\n" +
"[b]OOA class:[/b] "+traits[18]+"\n" +
"\n" +
"[color=transparent]xxxxxxxxxxxxxxxxxxxxxxxxxxxx[/color]\n" +
"[/font]\n" +
"[/columns]\n" +
"\n" +
"[center][b][font=times new roman] H O A R D \n" +
"[img]http://orig03.deviantart.net/553d/f/2016/290/3/e/tumblr_nj9kyb0aii1r28672o5_500_by_intimer_genetics_inc-dalbu8t.png[/img]\n" +
""+traits[19]+"\n" +
"[/center]\n" +
"[nextcol][img]"+flag+"[/img]\n" +
"[/columns]" +
"[center][url=http://www1.flightrising.com/forums/baz/1532088][img]http://orig14.deviantart.net/f3d4/f/2016/232/4/5/oie_oie_overlay__1__by_intimer_genetics_inc-daens5k.gif[/img][/url]" +
"\n\n\n\n[center][font=times new roman][color=black][size=7]B I O G R A P H Y[/size][/font][/center][color=black]\n";     
            return bio;
        }
        
    }