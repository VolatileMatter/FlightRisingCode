/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Isabel
 */
public class NewJFrame extends javax.swing.JFrame {
    static bio current = new bio();

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        NameField = new javax.swing.JTextField();
        AccentHexField = new javax.swing.JTextField();
        Note1Field = new javax.swing.JTextField();
        Note2Field = new javax.swing.JTextField();
        Note3Field = new javax.swing.JTextField();
        Note4Field = new javax.swing.JTextField();
        Note5Field = new javax.swing.JTextField();
        ArtLink1Field = new javax.swing.JTextField();
        ArtLink2Field = new javax.swing.JTextField();
        ArtLink3Field = new javax.swing.JTextField();
        Item1Field = new javax.swing.JTextField();
        Item2Field = new javax.swing.JTextField();
        Item3Field = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        GenerateButton = new javax.swing.JButton();
        RandomizeButton = new javax.swing.JButton();
        RandomColorsButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        CodeHereField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        NameField.setText("Unnamed");
        NameField.setBorder(javax.swing.BorderFactory.createTitledBorder("Name"));

        AccentHexField.setText("#FFFFFF");
        AccentHexField.setBorder(javax.swing.BorderFactory.createTitledBorder("Accent Hex Color"));

        Note1Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Note 1"));

        Note2Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Note 2"));

        Note3Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Note 3"));

        Note4Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Note 4"));

        Note5Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Note 5"));

        ArtLink1Field.setText("http://flightrising.com/main.php?dragon=13276414");
        ArtLink1Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Art Link 1"));
        ArtLink1Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArtLink1FieldActionPerformed(evt);
            }
        });

        ArtLink2Field.setText("http://flightrising.com/main.php?dragon=13276414");
        ArtLink2Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Art Link 2"));
        ArtLink2Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArtLink2FieldActionPerformed(evt);
            }
        });

        ArtLink3Field.setText("http://flightrising.com/main.php?dragon=13276414");
        ArtLink3Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Art Link 3"));
        ArtLink3Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArtLink3FieldActionPerformed(evt);
            }
        });

        Item1Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Item 1"));
        Item1Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Item1FieldActionPerformed(evt);
            }
        });

        Item2Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Item 2"));
        Item2Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Item2FieldActionPerformed(evt);
            }
        });

        Item3Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Item 3"));
        Item3Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Item3FieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Note1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Note2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Note3Field, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Note4Field, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Note5Field, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(AccentHexField, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(NameField)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ArtLink1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ArtLink2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ArtLink3Field, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Item1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Item2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Item3Field, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AccentHexField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Note1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Note2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Note3Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Note4Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Note5Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArtLink1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ArtLink2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ArtLink3Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Item1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Item2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Item3Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        jLabel1.setText("Made by VolatileMatter #160158 on FlightRising");

        GenerateButton.setText("Generate");
        GenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateButtonActionPerformed(evt);
            }
        });

        RandomizeButton.setText("Randomize");
        RandomizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomizeButtonActionPerformed(evt);
            }
        });

        RandomColorsButton.setText("Random Colors");
        RandomColorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomColorsButtonActionPerformed(evt);
            }
        });

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        CodeHereField.setColumns(20);
        CodeHereField.setRows(5);
        jScrollPane2.setViewportView(CodeHereField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(GenerateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RandomizeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RandomColorsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExitButton)
                        .addGap(79, 79, 79))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GenerateButton)
                    .addComponent(RandomizeButton)
                    .addComponent(ExitButton)
                    .addComponent(RandomColorsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ArtLink1FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArtLink1FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ArtLink1FieldActionPerformed

    private void ArtLink2FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArtLink2FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ArtLink2FieldActionPerformed

    private void ArtLink3FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArtLink3FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ArtLink3FieldActionPerformed

    private void Item1FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Item1FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Item1FieldActionPerformed

    private void Item2FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Item2FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Item2FieldActionPerformed

    private void Item3FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Item3FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Item3FieldActionPerformed

    private void GenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateButtonActionPerformed
        // TODO add your handling code here:
        current.setName(NameField.getText());
        current.setItem1(Item1Field.getText());
        current.setItem2(Item2Field.getText());
        current.setItem3(Item3Field.getText());
        current.setNamehex(AccentHexField.getText());
        current.setArtlink1(ArtLink1Field.getText());
        current.setArtlink2(ArtLink2Field.getText());
        current.setArtlink3(ArtLink3Field.getText());
        current.setJob(Note1Field.getText());
        current.setNote1(Note2Field.getText());
        current.setNote2(Note3Field.getText());
        current.setNote3(Note4Field.getText());
        current.setNote4(Note5Field.getText());

        CodeHereField.setText(current.calc());
    }//GEN-LAST:event_GenerateButtonActionPerformed

    private void RandomizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomizeButtonActionPerformed
        // TODO add your handling code here:
        current.genName();
        current.genJob();
        current.genFam();
        current.genMats();
        current.genAdj();

        Item1Field.setText(current.getItem1());
        Item2Field.setText(current.getItem2());
        Item3Field.setText(current.getItem3());
        NameField.setText(current.getName());
        Note1Field.setText(current.getJob());
        Note2Field.setText(current.getNote1());
        Note3Field.setText(current.getNote2());
        Note4Field.setText(current.getNote3());
        Note5Field.setText(current.getNote4());
    }//GEN-LAST:event_RandomizeButtonActionPerformed

    private void RandomColorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomColorsButtonActionPerformed
        // TODO add your handling code here:
        current.genColors();

        AccentHexField.setText(current.getNamehex());
    }//GEN-LAST:event_RandomColorsButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AccentHexField;
    private javax.swing.JTextField ArtLink1Field;
    private javax.swing.JTextField ArtLink2Field;
    private javax.swing.JTextField ArtLink3Field;
    private javax.swing.JTextArea CodeHereField;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton GenerateButton;
    private javax.swing.JTextField Item1Field;
    private javax.swing.JTextField Item2Field;
    private javax.swing.JTextField Item3Field;
    private javax.swing.JTextField NameField;
    private javax.swing.JTextField Note1Field;
    private javax.swing.JTextField Note2Field;
    private javax.swing.JTextField Note3Field;
    private javax.swing.JTextField Note4Field;
    private javax.swing.JTextField Note5Field;
    private javax.swing.JButton RandomColorsButton;
    private javax.swing.JButton RandomizeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}

class bio { 
    static String artlink1 = "";
    public static String getArtlink1() {return artlink1;}
    public static void setArtlink1(String a) {artlink1=a;}
    
    static String artlink2 = "";
    public static String getArtlink2() {return artlink2;}
    public static void setArtlink2(String a) {artlink2=a;}
    
    static String artlink3 = "";
    public static String getArtlink3() {return artlink3;}
    public static void setArtlink3(String a) {artlink3=a;}
    
    static String name = "Noot";
    public static void setName(String a){name=a;}
    public static String getName(){return name;}
    
    static String job = "Unemployed";
    public static String getJob() {return job;}
    public static void setJob(String a) {job=a;}
    
    static String note1 = "";
    public static String getNote1() {return note1;}
    public static void setNote1(String a) {note1=a;}
    
    static String note2 = "";
    public static String getNote2() {return note2;}
    public static void setNote2(String a) {note2=a;}
    
    static String note3 = "";
    public static String getNote3() {return note3;}
    public static void setNote3(String a) {note3=a;}
    
    static String note4 = "";
    public static String getNote4() {return note4;}
    public static void setNote4(String a) {note4=a;}
    
    static String item1 = "";
    public static String getItem1() {return item1;}
    public static void setItem1(String a) {item1=a;}
    
    static String item2 = "";
    public static String getItem2() {return item2;}
    public static void setItem2(String a) {item2=a;}
    
    static String item3 = "";
    public static String getItem3() {return item3;}
    public static void setItem3(String a) {item3=a;}
    
    static String namehex = "FFFFFF";
    public static String getNamehex() {return namehex;}
    public static void setNamehex(String a) {namehex=a;}
    
    public void genName() {
  String[] prefix = {"anti","auto","de","dis","down","extra","hyper","il","im","in","ir","inter","mega","mid","mis","non","over","out","post","pre","pro","re","semi","sub","sub","super","tele","trans","ultra","un","under","up"};
  String[] firCon = {"t", "n", "s", "r", "d", "f", "c", "b", "z"};
  String[] secCon = {"r", "h", "s","v"};
  String[] firVow = {"e", "a", "i", "o", "oo", "u"};
  String[] thiCon = {"t", "v", "w", "x", "ck", "g", "p", "ch", "sh","ph","rr",};
  String[] secVow = {"e", "i", "o","a","u"}; 
  String[] fouCon = {"r", "s", "y","de","x","ra","le",};
  String[] suffix = {"iode","able","ac","acity","ocity","ade","age","aholic","oholic","al","algia","an","ian","ance","ant","ar","ard","arian","arium","orium","ary","ation","ate","ative","cide","cracy","crat","cule","cy","cycle","dom","dox","ed","ee","ectomy","eer","emia","en","ence","ency","ent","er","ern","escence","ese","esque","ess","est","etic","ette","ful","fy","gam","gamy","gon","gonic","hood","ial","ian","iasis","iatric","ible","ic","ical","ile","ily","ine","ing","ion","ious","ish","ism","ist","ite","itis","ity","ive","ization","ize","less","let","like","ling","loger","logist","log","ly","ment","ness","oid","ology","oma","onym","opia","opsy","or","ory","osis","ostomy","otomy","ous","path","pathy","phile","phobia","phone","phyte","plegia","plegic","pnea","scopy","scope","scribe","script","sect","ship","sion","some","sophy","sophic","th","tion","tome","tomy","tude","trophy","tude","ty","ular","uous","ure","ward","ware","wise"};
  int numnum = (int)(Math.random() * 100000);  
  String result = " ";         
        //start with the prefix
        if(Math.random() < .5) {
            result += prefix[(int)(Math.random() * prefix.length)];
        }
        
        //then the first consonant
        if(Math.random() < .7) {
            result += firCon[(int)(Math.random() * firCon.length)];
        }
        
        //then the possible second consonant
        if(Math.random() < .4) {
            result += secCon[(int)(Math.random() * secCon.length)];
        }
        
        //then the first vowel
        if(Math.random() < .9) {
            result += firVow[(int)(Math.random() * firVow.length)];
        }
        
        //then the third consonant
        if(Math.random() < .8) {
            result += thiCon[(int)(Math.random() * thiCon.length)];
        }
        
        //then the second vowel
        if(Math.random() < .6) {
            result += secVow[(int)(Math.random() * secVow.length)];
        }
        
        //then the fourth consonant
        if(Math.random() < .5) {
            result += fouCon[(int)(Math.random() * fouCon.length)];
        }
        
        //possibly another vowel?
        if(Math.random() < .5) {
            result += secVow[(int)(Math.random() * secVow.length)];
        }
        
        //then the suffix
        if (Math.random() < .5) {
            result += suffix[(int)(Math.random() * suffix.length)];
        }
        
        //if it's short, then maybe repeat it. (Seg -> Segseg)
        if (Math.random() < .7 && (result.length() < 6)) {
        result += result.substring(1,result.length());
        }
        
        //lastly, capitalize the first letter.
        String temp1 = result.substring(1,2);
        String temp2 = result.substring(2,result.length());
        temp1 = temp1.toUpperCase();
        result = temp1 + temp2;
        
        //if it's too long, delete it. 
        if (result.length() > 9) {
             result = result.substring(0,8);
        }  
name = result;       
    }
    public void genJob() {
     String[] jobs = {"Warrior","Paladin","Wizard","Shopkeeper","Courier","Archaeologist","Scribe","Imagineer","Priest","Gardener","Scribne","Messenger","Blacksmith","Metallurgist","Dancer","Scout","Familiar Caretaker","Beast Master","Fisher","hunter","Healer","Nurse","Guard","Scientist",
                           "Lawyer","Professional Appraiser","Potter","Alchemist","Mercenary","Accountant","Magician","Oracle","Seer","Night Watchman","Serial Killer","Potion Master","Aerial Scout","Artist","Spell Weaver","Hatchling Sitter","Forager","Cook","Beekeeper","Farmer","Jeweler","Seamstress",
                           "Tailor","Weaver","Mason","Writer","Carpenter","Peacemaker","Diplomat","Healer","Spy","Vault Guard","Historian","Scholar","Philosopher","Undertaker","Scryer","Matchmaker","Cartographer","Logger","Astronomer","Pirate","Botanist","Mechanic","Dentist","Nanny","Exalter",
                            "Gamekeeper","Baker","Barber","Hairdresser","Explorer","Cooper","Brewster","Butcher","Maid","Housekeeper","Tracker","Innkeeper","Cheesemaker","Aviary keeper","Silk-Worm Keeper","Spider Keeper","Shepherd","Miner","Lair Construction Crew","Leather Worker","Tanner",
                            "Potter","Spinner","Dyer","Archardist","Tree-keeper","Paper Maker","Candlemaker","Glass Blower","Kite-Maker","Brewmaster","Wine Master","Herbalist","Caravan Leader","Messenger","Exotic Dancer","Gladiator","Electrician","Engineer","Mechanic","Translator","Playwright",
                            "Composer","Trader","Chemist","Illusionist","Bard","Luthier","Actor","Embroiderer","Farrier","Haberdasher","Soap Maker","Conman","Pickpocket","Apothecary","Kennel Master","Ward Crafter","Nest Sitter","Festival Keeper","Anarchist","Bandit","Cavelier","Daredevil","Espionage",
                             "Ninja","Poacher","Knight","Musketeer","Pillager","Samurai","Savager","Seafarer","Master-At-Arms","Slayer","Viking","Ranger","Rogue","Stalker","Theif","Trapper","Zealot","Archmage","Bishop","Conjuerer","Invoker","Jinx","Lich","Mage","Magi","Mediator","Monk","Mystic",
                            "Necromancer","Occultist","Saint","Sorcerer","Sprite","Summoner","Trickster","Warlock","Wizard","Witch","Cleric","Doctor","Druid","Herbalist","Purifier","Sage","Shaman","Surgeon","Sylph","Witch Doctor","Bouncer","Lookout","Mafioso","Consigliere","Warden","Apiarist","Arborist",
                           "Collector","Deepsea Diver","Excavator","Fisher","Fletcher","Florist","Fungiculturalist","Gatherer","Gravedigger","Harvester","Hoarder","Hobbyist","Reaper","Scavenger","Adviser","Archivist","Coach","Courtier","Educator","Teacher","Librarian","Mentor","Pedagogue","Proctor",
                            "Professor","Reporter","Storyteller","Savant","Trainer","Locksmith","Woodcarver"};
      int num = (int)(Math.random()*jobs.length);
      job = jobs[num];
  } 
    public void genFam() {
    String[] fams = {"Abyss Striker", "Amaranth Moth", "Ancient Fungus", "Arcane Sprite", "Autumn Dryad", "Baku", "Bamboo Phytocat", "Banded Owlcat", "Basilisk", "Black Dwarf Unicorn", "Black Iron Creeper", "Black Wolf", "Black-Wing Hummingbird", "Blacktalon Striker", "Blackwing Croaker", "Blooming Strangler", "Blue Dragon Reef Snail", "Blue Tang Hippogriff", "Bluefin Charger", "Bluemoon Aviar", "Blueridge Greatshell", "Bone Fiend", "Boolean", "Bramble Guardian", "Brilliant Psywurm", "Brown River Flight", "Brush Dodo", "Bucktooth Digger", "Bumble", "Candycane Xolo", "Cardinal Hippogriff", "Carmine Serthis", "Celestial Antelope", "Centaur Archer", "Charcoal Sprangyroo", "Chimera", "Chocolate Ferret", "Citrine Cave Jewel", "Cloud Chaser", "Clouddancer", "Clown Charger", "Coarsefur Yeti", "Cockatrice", "Cog Frog", "Colorburst Buttersnake", "Common Podid", "Construction Mith", "Coppercoil Creeper", "Coral Carpenter", "Corpse Cleaner", "Corundum Chameleon", "Cragbacked Bouldursa", "Crimson Emperor", "Crimson Reef Snail", "Crowned Bonepriest", "Cumulus Seal", "Cursed Bat", "Dappled Dunhoof", "Dappled Seal", "Dark-Tufted Sparrowmouse", "Darktouched Chimera", "Death Seeker", "Death's-Head Stag", "Dodo", "Double-Tailed Warcat", "Downy Fox Rat", "Dream Eater", "Driftwood Baron", "Dryad", "Dunhoof Ambassador", "Dwarf Truffle", "Dwarf Unicorn", "Earth Sprite", "Ectoplasmime", "Elk", "Ember Mouse", "Emerald Cave Jewel", "Emerald Webwing", "Ethereal Trickster", "Everglade Lasher", "Fallout Streak", "Fawn Fox Rat", "Fire Sprite", "Fluted Pukasloth", "Frost Delver", "Frostbite Hummingbird", "Fuiran", "Fungalhoof Qiriq", "Fungusbearing Phony", "Gale Wolf", "Gaseous Megashrimp", "Glossy Duskrat", "Glowing Pocket Mouse", "Golden Bantam Fangar", "Golden Idol", "Golden Porpoise", "GoldThroated Sparrow", "Granite Thresher", "Grasslands Trunker", "Graveyard Guardian", "Greater Sandstrike", "Greatshell", "Greenroot Janustrap", "Grey River Flight", "Hainu", "Harvest Floracat", "Hati", "Heartred Croaker", "Hedgehog", "Hibernal Starbear", "Hippogriff", "Hippojay", "Hoarfrost Mauler", "Hooded Dodo", "Hydra Scorpion", "Ice Sprite", "Iridescent Scaleback", "Irradiated Astronomer", "Jadecarved Decoy", "Janustrap", "Jawlocker", "Jeweled Octoflyer", "Kelp Tender", "Lavaborne Hoax", "Leafy Moth", "Light Sprite", "Lightning Sprite", "Livewire Grizzly", "Longneck Interloper", "Longneck Magi", "Longneck Mender", "Longneck Skirmisher", "Luna Mith", "Magma Embear", "Mammertee", "Maned Cobra", "Maned Rasa", "Mantarune", "Manticore", "Marbled Jester", "Maren Ambusher", "Maren Scout", "Maren Warrior", "Maren Wavesinger", "Masked Harpy", "Melprin", "Mesacliff Harpy", "Mimic Buttersnake", "Mistral Minion", "Mistwatch Shellion", "Mock Firebird", "Moordwelling Trunker", "Mottled Buttersnake", "Nature Sprite", "Nephrite Chameleon", "Nightsky Fuiran", "Nochnyr", "Noggle", "Octoflyer", "Opheodrys Serthis", "Painted Centaur", "Parasitic Fungus", "Peacock Firebird", "Peacock Scorpion", "Perching Java Sparrow", "Permafrost Impaler", "Plague Sprite", "Poisonous Toridae", "Polarfreeze Defender", "Poultrygeist", "Psywurm", "Radioactive Slime", "Ragamouse", "Rainbow Sprite", "Rambra", "Raptorik Warrior", "Red-Breasted Hainu", "Red-Footed Akirbeak", "Red-Winged Owlcat", "Relic Eel", "Renegade Aviar", "River Muck", "Rivermouth Flatbill", "Roundhorn Melprin", "Ruby Webwing", "Runic Bat", "Sakura Owl", "Salve Kamaitachi", "Scaleback", "Scarlet Flycatcher", "Scrapmetal Tracker", "Scythe Kamaitachi", "Sentinel Mith", "Serthis Alchemist", "Serthis Potionmaster", "Shadow Serpent", "Shadow Sprite", "Shale Thresher", "Shalebuck", "Shattered Serpent", "Shellion", "Shimmering Xolo", "Sickle Kamaitachi", "Silver Ferret", "Silver Springbok", "Skittering Megashrimp", "Skoll", "Skycat", "Slumbering Charlatan", "Smoke Gyre", "Smoky Bantam Fangar", "Snarling Mimic", "Snow Streak", "Snowfall Elk", "Snowsquall Floracat", "Southmarsh Podid", "Speedy", "Spellbound Golem", "Spined Cobra", "Spinel Vulstal", "Spotted Pukasloth", "Sprangyroo", "Squall Rasa", "Steam Gyre", "Steelhound", "Stone Borer", "Stonewatch Harpy", "Storm Seeker", "Strangler", "Sunbeam Ursa", "Sundial Imposter", "Sunset Lasher", "Sunspot Clouddancer", "Swallowtail Buttersnake", "Swift Lumen", "Swift Volt", "Tengu", "Tourmaline Vulstal", "Trick of the Light", "Tuxedo Floracat", "Umberhorn Qiriq", "Umbra Wolf", "Velvet Floracat", "Venerable Shalebuck", "Venomous Toridae", "Voltspire Intruder", "Warcat Protector", "Water Sprite", "Wave Sweeper", "Wildwood Owl", "Wind Sprite", "Windcarve Harpy", "Winter Wolf", "Wintermane Bowman", "Wintermane Spearman", "Woodland Turkey", "Yellow-Throated Sparrowmouse", "Zeeba"};
    int num = (int)(Math.random()*fams.length);
    item2 = fams[num];  
  }
    public void genMats(){
      String[] mats = {"Clay Fertility Statue", "Stone Fertility Statue", "Intact Clay Relief", "Intact Stone Relief", "Sanded Ash Plank", "Sanded Birch Plank", "Sanded Cedar Plank", "Sanded Pine Plank", "Intact Parchment", "Tattered Parchment", "Mangled Textile", "MothEaten Rug", "Cracked Leather", "Crumbling Leather", "Moldy Leather", "Rotting Leather", "Bronze Fabric Scrap", "Faded Blue Fabric", "Red Linen Fabric Scrap", "White Linen Fabric Scrap", "Ragged Skirmisher Scrap", "Tattered Interloper Scrap", "Broken Pottery Piece", "Shattered Ceramic Shard", "Rippling Cloth", "Seeker Broach", "Waterskin", "Tracker Engine", "Black Iron Segment", "Lumen Wiring", "Mistral Glove", "Sentinel Armor", "Fancy SilverPlated Buckle", "Iron Belt Buckle", "Rusted Iron Belt Buckle", "Wavespun Cloth", "Seeker Orb", "Toridae Chew Toy", "Volt Wiring", "Construction Armor", "Coppercoil Segment", "Spellbound Glove", "Steelhound Core", "Rusted Chain", "Arcane Runestone", "Earth Runestone", "Fire Runestone", "Ice Runestone", "Light Runestone", "Lightning Runestone", "Nature Runestone", "Plague Runestone", "Shadow Runestone", "Water Runestone", "Wind Runestone", "Ancestral Incense", "Borer Scrapmetal", "Delver Parts", "Dried Cedar Branch", "Fir Branch", "Pine Branch", "Driftwood Branch", "Ash Twigs", "Birch Twigs", "Redwood Kindling", "Ice Crystal", "Chipped Blackened Legbones", "Small Legbones", "Cracked Blackened Ribcage", "Small Ribcage", "Bone Fragments", "Chimera Fangs", "Sparrow Skull", "Squirrel Skull", "Oozing Tusk", "Slimy Tusk", "Broken Wing Bones", "Wing Bones", "Etched Tusk", "Fractured Tusk", "Ivory Tusk", "Warbeast Tusk", "Firestarter", "Glowing Pocket Bauble", "Moonglow Foxtail", "Wispy Foxtail", "Crackled Scales", "Bluestreaked Shell", "Common Podid Claws", "Elk Pelt", "Fragile Antler", "Shalebuck Horn", "Sickle Claws", "Diaphanous Wing", "Jeweled Octoflyer Beak", "Octoflyer Beak", "Twitching Leg Bones", "Unnatural Leg Bones", "Janustrap Root", "Strangling Root", "Ancient Fungus Spore", "Dwarf Truffle Spores", "Maple Leaf", "Red Maple Leaf", "Cursed Tuft of Fur", "Runed Tuft of Fur", "Fallout Streak Pinion", "Snow Streak Pinion", "Clouddancer Hide", "Sunspot Clouddancer Hide", "Beeswax", "Carpenter Wax", "Baku Tusk", "Dreameater Tusk", "Strangling Vine", "Sakura Moss", "Wildwood Moss", "Cedar Logs", "Fir Logs", "Pine Logs", "Driftwood Log", "Ash Logs", "Birch Logs", "Redwood Log", "Bonewood Log", "Bonewood Branch", "Bamboo Cluster", "Bamboo Shoot", "Fuiran Hide", "Nightsky Fuiran Hide", "Celestial Horn", "Silver Horn", "Molted Scales", "Muckbottom Shell", "Southmarsh Podid Claws", "Snowfall Elk Pelt", "Windstroked Silk Whitetail", "Reflective Fish Scales", "Tiny Feathers", "Blooming Vine", "Decorated Turtle Shell", "Painted Turtle Shell", "Turtle Shell", "Bonepriest Venom", "Shining Feather Cluster", "Jar of Slime", "Unstable Serthis Concoction", "Small Chunk of Granite", "Lithe Otter Pelt", "Webbed Paw", "Coarse Tail Hair", "Small Block of Granite", "Perfect Skipping Stone", "Skipping Stone", "Round Pebbles", "Smooth Pebbles", "Coal", "Traprock", "Dark Basalt", "Grey Basalt", "Clay", "Obsidian", "Shale", "Copper Ore", "Iron Ore", "Nickel Ore", "Cobalt Ore", "Lead Ore", "Tin Ore", "Rich Copper Ore", "Rich Iron Ore", "Rich Nickel Ore", "Gravel", "Salt", "Sand", "Gypsum", "Rosy Gypsum", "Fool's Gold", "Infused Crystal", "Hematite", "Blue Quartz", "Crystal Quartz", "Rose Quartz", "Smoky Quartz", "Frozen Rock Flow", "Igneous Flow", "Volcanic Remnants", "Magnetite", "Banded Sardonyx", "Jade", "Jasper", "Labradorite", "Silver Ore", "Brilliant Feather Cluster", "Gold Ore", "Banded Olivine", "Platinum Ore", "Banded Ironstone", "Depleted Sacridite", "Impure Sacridite", "Sacridite", "Granite Fragment"};
     int num = (int)(Math.random()*mats.length);
    item1 = mats[num];
    num = (int)(Math.random()*mats.length);
    item3 = mats[num];
      }
    public void genColors(){
          final char [] hex = { '0', '1', '2', '3', '4', '5', '6', '7',
                          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
          String temp = "#";
          int num = (int)(Math.random()*16);
          temp += hex[num];
          while (temp.length() < 7) {
              num = (int)(Math.random()*16);
              temp+=hex[num];
          }
          namehex = temp.toUpperCase();
          
      }
     public void genAdj(){
      String[] adjs = {"Caring","Aggressive","Compassionate","Accessible","Active","Adaptable","Admirable","Adventurous","Agreeable","Alert","Allocentric","Amiable","Anticipative","Appreciative","Articulate","Aspiring","Athletic","Attractive","Balanced","Benevolent","Brilliant","Calm","Capable",
                              "Captivating","Caring","Challenging","Charismatic","Charming","Cheerful","Clean","Clear-headed","Clever","Colorful","Companionly","Compassionate","Conciliatory","Confident","Conscientious","Considerate","Constant","Contemplative","Cooperative","Courageous","Courteous",
                              "Creative","Cultured","Curious","Daring","Debonair","Decent","Decisive","Dedicated","Deep","Dignified","Directed","Disciplined","Discreet","Dramatic","Dutiful","Dynamic","Earnest","Ebullient","Educated","Efficient","Elegant","Eloquent","Empathetic","Energetic","Enthusiastic",
                              "Esthetic","Exciting","Extraordinary","Fair","Faithful","Farsighted","Felicific","Firm","Flexible","Focused","Forecful","Forgiving","Forthright","Freethinking","Friendly","Fun-loving","Gallant","Generous","Gentle","Genuine","Good-natured","Gracious","Hardworking","Healthy",
                              "Hearty","Helpful","Herioc","High-minded","Honest","Honorable","Humble","Humorous","Idealistic","Imaginative","Impressive","Incisive","Incorruptible","Independent","Individualistic","Innovative","Inoffensive","Insightful","Insouciant","Intelligent","Intuitive","Invulnerable",
                              "Kind","Knowledge","Leaderly","Leisurely","Liberal","Logical","Lovable","Loyal","Lyrical","Magnanimous","Many-sided","Masculine  (Manly)","Mature","Methodical","Maticulous","Moderate","Modest","Multi-leveled","Neat","Nonauthoritarian","Objective","Observant","Open","Optimistic",
                              "Orderly","Organized","Original","Painstaking","Passionate","Patient","Patriotic","Peaceful","Perceptive","Perfectionist","Personable","Persuasive","Planful","Playful","Polished","Popular","Practical","Precise","Principled","Profound","Protean","Protective","Providential",
                              "Prudent","Punctual","Pruposeful","Rational","Realistic","Reflective","Relaxed","Reliable","Resourceful","Respectful","Responsible","Responsive","Reverential","Romantic","Rustic","Sage","Sane","Scholarly","Scrupulous","Secure","Selfless","Self-critical","Self-defacing",
                              "Self-denying","Self-reliant","Self-sufficent","Sensitive","Sentimental","Seraphic","Serious","Sexy","Sharing","Shrewd","Simple","Skillful","Sober","Sociable","Solid","Sophisticated","Spontaneous","Sporting","Stable","Steadfast","Steady","Stoic","Strong","Studious","Suave",
                              "Subtle","Sweet","Sympathetic","Systematic","Tasteful","Teacherly","Thorough","Tidy","Tolerant","Tractable","Trusting","Uncomplaining","Understanding","Undogmatic","Unfoolable","Upright","Urbane","Venturesome","Vivacious","Warm","Well-bred","Well-read","Well-rounded","Winning",
                              "Wise","Witty","Youthful","Absentminded","Aggressive","Ambitious","Amusing","Artful","Ascetic","Authoritarian","Big-thinking","Boyish","Breezy","Businesslike","Busy","Casual","Crebral","Chummy","Circumspect","Competitive","Complex","Confidential","Conservative","Contradictory",
                              "Crisp","Cute","Deceptive","Determined","Dominating","Dreamy","Driving","Droll","Dry","Earthy","Effeminate","Emotional","Enigmatic","Experimental","Familial","Folksy","Formal","Freewheeling","Frugal","Glamorous","Guileless","High-spirited","Huried","Hypnotic","Iconoclastic",
                              "Idiosyncratic","Impassive","Impersonal","Impressionable","Intense","Invisible","Irreligious","Irreverent","Maternal","Mellow","Modern","Moralistic","Mystical","Neutral","Noncommittal","Noncompetitive","Obedient","Old-fashined","Ordinary","Outspoken","Paternalistic","Physical",
                              "Placid","Political","Predictable","Preoccupied","Private","Progressive","Proud","Pure","Questioning","Quiet","Religious","Reserved","Restrained","Retiring","Sarcastic","Self-conscious","Sensual","Skeptical","Smooth","Soft","Solemn","Solitary","Stern","Stoiid","Strict",
                              "Stubborn","Stylish","Subjective","Surprising","Soft","Tough","Unaggressive","Unambitious","Unceremonious","Unchanging","Undemanding","Unfathomable","Unhurried","Uninhibited","Unpatriotic","Unpredicatable","Unreligious","Unsentimental","Whimsical","Abrasive","Abrupt",
                              "Agonizing","Aimless","Airy","Aloof","Amoral","Angry","Anxious","Apathetic","Arbitrary","Argumentative","Arrogantt","Artificial","Asocial","Assertive","Astigmatic","Barbaric","Bewildered","Bizarre","Bland","Blunt","Biosterous","Brittle","Brutal","Calculating","Callous",
                              "Cantakerous","Careless","Cautious","Charmless","Childish","Clumsy","Coarse","Cold","Colorless","Complacent","Complaintive","Compulsive","Conceited","Condemnatory","Conformist","Confused","Contemptible","Conventional","Cowardly","Crafty","Crass","Crazy","Criminal",
                              "Critical","Crude","Cruel","Cynical","Decadent","Deceitful","Delicate","Demanding","Dependent","Desperate","Destructive","Devious","Difficult","Dirty","Disconcerting","Discontented","Discouraging","Discourteous","Dishonest","Disloyal","Disobedient","Disorderly",
                              "Disorganized","Disputatious","Disrespectful","Disruptive","Dissolute","Dissonant","Distractible","Disturbing","Dogmatic","Domineering","Dull","Easily Discouraged","Egocentric","Enervated","Envious","Erratic","Escapist","Excitable","Expedient","Extravagant","Extreme",
                              "Faithless","False","Fanatical","Fanciful","Fatalistic","Fawning","Fearful","Fickle","Fiery","Fixed","Flamboyant","Foolish","Forgetful","Fraudulent","Frightening","Frivolous","Gloomy","Graceless","Grand","Greedy","Grim","Gullible","Hateful","Haughty","Hedonistic","Hesitant",
                              "Hidebound","High-handed","Hostile","Ignorant","Imitative","Impatient","Impractical","Imprudent","Impulsive","Inconsiderate","Incurious","Indecisive","Indulgent","Inert","Inhibited","Insecure","Insensitive","Insincere","Insulting","Intolerant","Irascible","Irrational",
                              "Irresponsible","Irritable","Lazy","Libidinous","Loquacious","Malicious","Mannered","Mannerless","Mawkish","Mealymouthed","Mechanical","Meddlesome","Melancholic","Meretricious","Messy","Miserable","Miserly","Misguided","Mistaken","Money-minded","Monstrous","Moody","Morbid",
                              "Muddle-headed","Naive","Narcissistic","Narrow","Narrow-minded","Natty","Negativistic","Neglectful","Neurotic","Nihilistic","Obnoxious","Obsessive","Obvious","Odd","Offhand","One-dimensional","One-sided","Opinionated","Opportunistic","Oppressed","Outrageous","Overimaginative",
                              "Paranoid","Passive","Pedantic","Perverse","Petty","Pharissical","Phlegmatic","Plodding","Pompous","Possessive","Power-hungry","Predatory","Prejudiced","Presumptuous","Pretentious","Prim","Procrastinating","Profligate","Provocative","Pugnacious","Puritanical","Quirky","Reactionary",
                              "Reactive","Regimental","Regretful","Repentant","Repressed","Resentful","Ridiculous","Rigid","Ritualistic","Rowdy","Ruined","Sadistic","Sanctimonious","Scheming","Scornful","Secretive","Sedentary","Selfish","Self-indulgent","Shallow","Shortsighted","Shy","Silly","Single-minded",
                              "Sloppy","Slow","Sly","Small-thinking","Softheaded","Sordid","Steely","Stiff","Strong-willed","Stupid","Submissive","Superficial","Superstitious","Suspicious","Tactless","Tasteless","Tense","Thievish","Thoughtless","Timid","Transparent","Treacherous","Trendy","Troublesome",
                              "Unappreciative","Uncaring","Uncharitable","Unconvincing","Uncooperative","Uncreative","Uncritical","Unctuous","Undisciplined","Unfriendly","Ungrateful","Unhealthy","Unimaginative","Unimpressive","Unlovable","Unpolished","Unprincipled","Unrealistic","Unreflective","Unreliable",
                              "Unrestrained","Unself-critical","Unstable","Vacuous","Vague","Venal","Venomous","Vindictive","Vulnerable","Weak","Weak-willed","Well-meaning","Willful","Wishful","Zany"};
    int num = (int)(Math.random()*adjs.length);
    note1 = adjs[num];
    num = (int)(Math.random()*adjs.length);
    note2 = adjs[num];
    num = (int)(Math.random()*adjs.length);
    note3 = adjs[num];
    num = (int)(Math.random()*adjs.length);
    note4 = adjs[num];
  }
    
    public String calc(){
        String biotxt = "";
        biotxt+= "[columns=3]\n" +
"\n" +
"[color="+namehex+"][size=5]██\n" +
"██[nextcol]\n" +
"\n" +
"[font=helvetica][size=7][color="+namehex+"]"+name+"[/color][/size]\n" +
"[size=2][color=gray]"+job+" | "+note1+" | "+note2+" | "+note3+" | "+note4+"[/color][/size]\n" +
"\n" +
"[nextcol]\n" +
"\n" +
"[font=helvetica][size=2][color=gray]ART:\n" +
"[url="+artlink1+"][color="+namehex+"]LINK[/url]\n" +
"[url="+artlink2+"][color="+namehex+"]LINK[/url]\n" +
"[url="+artlink3+"][color="+namehex+"]LINK[/url]\n" +
"\n" +
"[/columns]\n" +
"\n" +
"[center][item="+item1+"] [item="+item2+"] [item="+item3+"][/center]\n" +
"\n" +
"[columns=2]\n" +
"\n" +
"[font=cambria][size=2][color=black]Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed libero diam, semper quis eros id, tristique gravida nulla. Vivamus felis neque, elementum eu facilisis sed, accumsan finibus arcu. Etiam tristique sapien vel fermentum malesuada. Sed porttitor ipsum dapibus, iaculis sapien et, laoreet erat.[/color][/size][/font]\n" +
"\n" +
"[nextcol]\n" +
"\n" +
"[font=cambria][size=2][color=black]Donec at dui et dui viverra commodo in sed ante. Sed elementum velit eros, in vulputate ligula pharetra a. Etiam non egestas ante, sed feugiat ligula. Nunc vel quam tempus, vulputate nunc eget, accumsan dolor. Vestibulum id molestie sem. Nulla ullamcorper nulla eu tempus dictum.[/color][/size][/font][/columns]";
        
        
        return biotxt;
    }
}