
import java.util.HashMap;
import java.util.Map;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Isabel
 */
public class frameme extends javax.swing.JFrame {

    /**
     * Creates new form frameme
     */
    static bio current = new bio();
    public frameme() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        AgilitySlider = new javax.swing.JSlider();
        StrengthSlider = new javax.swing.JSlider();
        IntelligenceSlider = new javax.swing.JSlider();
        VitalitySlider = new javax.swing.JSlider();
        LuckSlider = new javax.swing.JSlider();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        DragonIDField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        MoAlField1 = new javax.swing.JComboBox<>();
        MoAlFIeld2 = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        GenderField = new javax.swing.JComboBox<>();
        RomanticField = new javax.swing.JComboBox<>();
        SexualField = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        BirthdayField = new javax.swing.JTextField();
        BirthyearFIeld = new javax.swing.JTextField();
        FamiliarField = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        NameField = new javax.swing.JTextField();
        JobField = new javax.swing.JTextField();
        QuoteField = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        GenerateButton = new javax.swing.JButton();
        RandomizeButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        OutputField = new javax.swing.JTextArea();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel9 = new javax.swing.JPanel();
        AgilitySlider1 = new javax.swing.JSlider();
        StrengthSlider1 = new javax.swing.JSlider();
        IntelligenceSlider1 = new javax.swing.JSlider();
        VitalitySlider1 = new javax.swing.JSlider();
        LuckSlider1 = new javax.swing.JSlider();
        jPanel10 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        DividerField = new javax.swing.JComboBox<>();
        jPanel13 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        FlightField = new javax.swing.JComboBox<>();
        jPanel14 = new javax.swing.JPanel();
        MateDIDField = new javax.swing.JTextField();
        BFFDIDField = new javax.swing.JTextField();
        MateNameField = new javax.swing.JTextField();
        BFFNameField = new javax.swing.JTextField();
        EnemyNameField = new javax.swing.JTextField();
        EnemyDIDField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        BioTextField = new javax.swing.JTextArea();
        jPanel11 = new javax.swing.JPanel();
        NicknameField = new javax.swing.JTextField();
        AgeField = new javax.swing.JTextField();
        LikesField = new javax.swing.JTextField();
        DislikesField = new javax.swing.JTextField();
        Adj1Field = new javax.swing.JTextField();
        Adj2 = new javax.swing.JTextField();
        Adj3 = new javax.swing.JTextField();
        Adj4 = new javax.swing.JTextField();
        Item1Field = new javax.swing.JTextField();
        Item2Field = new javax.swing.JTextField();
        Item3Field = new javax.swing.JTextField();
        Item4Field = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        HobbiesField = new javax.swing.JTextArea();
        PronounField = new javax.swing.JTextField();

        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        AgilitySlider.setMajorTickSpacing(1);
        AgilitySlider.setMaximum(10);
        AgilitySlider.setMinimum(1);
        AgilitySlider.setPaintLabels(true);
        AgilitySlider.setPaintTicks(true);
        AgilitySlider.setSnapToTicks(true);
        AgilitySlider.setValue(0);
        AgilitySlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Agility"));

        StrengthSlider.setMajorTickSpacing(1);
        StrengthSlider.setMaximum(10);
        StrengthSlider.setMinimum(1);
        StrengthSlider.setPaintLabels(true);
        StrengthSlider.setPaintTicks(true);
        StrengthSlider.setSnapToTicks(true);
        StrengthSlider.setValue(0);
        StrengthSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Strength"));

        IntelligenceSlider.setMajorTickSpacing(1);
        IntelligenceSlider.setMaximum(10);
        IntelligenceSlider.setMinimum(1);
        IntelligenceSlider.setPaintLabels(true);
        IntelligenceSlider.setPaintTicks(true);
        IntelligenceSlider.setSnapToTicks(true);
        IntelligenceSlider.setValue(0);
        IntelligenceSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Intelligence"));

        VitalitySlider.setMajorTickSpacing(1);
        VitalitySlider.setMaximum(10);
        VitalitySlider.setMinimum(1);
        VitalitySlider.setPaintLabels(true);
        VitalitySlider.setPaintTicks(true);
        VitalitySlider.setSnapToTicks(true);
        VitalitySlider.setValue(0);
        VitalitySlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Vitality"));

        LuckSlider.setMajorTickSpacing(1);
        LuckSlider.setMaximum(10);
        LuckSlider.setMinimum(1);
        LuckSlider.setPaintLabels(true);
        LuckSlider.setPaintTicks(true);
        LuckSlider.setSnapToTicks(true);
        LuckSlider.setValue(0);
        LuckSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Luck"));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AgilitySlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VitalitySlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(StrengthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IntelligenceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LuckSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StrengthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AgilitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IntelligenceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VitalitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LuckSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        DragonIDField.setText("13276414");
        DragonIDField.setToolTipText("");
        DragonIDField.setBorder(javax.swing.BorderFactory.createTitledBorder("Dragon ID"));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Moral Alignment");

        MoAlField1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lawful", "Neutral", "Chaotic" }));

        MoAlFIeld2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Good", "Neutral", "Evil" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MoAlField1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(MoAlFIeld2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoAlField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoAlFIeld2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Relationship Alignment");

        GenderField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Female", "Male", "Agender", "Genderfluid", "Genderqueer", "Non-Binary", "Transgender" }));

        RomanticField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aromantic", "Biromantic", "Gay-romantic", "Lesbian-romantic", "Lithromantic", "Panromantic", "Polyromantic", "Heteroromantic" }));

        SexualField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Asexual", "Bisexual", "Heterosexual", "Gay", "Lesbian", "Lithsexual", "Pansexual", "Polysexual" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GenderField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RomanticField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SexualField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GenderField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RomanticField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SexualField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText("ex: July 12 = 0712");

        BirthdayField.setText("0712");
        BirthdayField.setBorder(javax.swing.BorderFactory.createTitledBorder("Birth Month + Day"));

        BirthyearFIeld.setText("2016");
        BirthyearFIeld.setToolTipText("");
        BirthyearFIeld.setBorder(javax.swing.BorderFactory.createTitledBorder("Birth Year"));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BirthdayField)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(BirthyearFIeld))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BirthdayField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BirthyearFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FamiliarField.setText("Masked Harpy");
        FamiliarField.setToolTipText("");
        FamiliarField.setBorder(javax.swing.BorderFactory.createTitledBorder("Familiar"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DragonIDField)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FamiliarField))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DragonIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FamiliarField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        NameField.setText("Unnamed");
        NameField.setBorder(javax.swing.BorderFactory.createTitledBorder("Name"));

        JobField.setText("Recruit");
        JobField.setToolTipText("");
        JobField.setBorder(javax.swing.BorderFactory.createTitledBorder("Job"));

        QuoteField.setText("\"What?\"");
        QuoteField.setBorder(javax.swing.BorderFactory.createTitledBorder("Quote/Subtext"));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JobField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(QuoteField)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JobField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(QuoteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        GenerateButton.setText("Generate");
        GenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateButtonActionPerformed(evt);
            }
        });

        RandomizeButton.setText("Randomize");
        RandomizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomizeButtonActionPerformed(evt);
            }
        });

        OutputField.setColumns(20);
        OutputField.setRows(5);
        jScrollPane2.setViewportView(OutputField);

        jToggleButton1.setText("Exit");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(GenerateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RandomizeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1)
                        .addGap(0, 112, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GenerateButton)
                    .addComponent(RandomizeButton)
                    .addComponent(jToggleButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        AgilitySlider1.setMajorTickSpacing(1);
        AgilitySlider1.setMaximum(10);
        AgilitySlider1.setMinimum(1);
        AgilitySlider1.setPaintLabels(true);
        AgilitySlider1.setPaintTicks(true);
        AgilitySlider1.setSnapToTicks(true);
        AgilitySlider1.setValue(0);
        AgilitySlider1.setBorder(javax.swing.BorderFactory.createTitledBorder("Agility"));

        StrengthSlider1.setMajorTickSpacing(1);
        StrengthSlider1.setMaximum(10);
        StrengthSlider1.setMinimum(1);
        StrengthSlider1.setPaintLabels(true);
        StrengthSlider1.setPaintTicks(true);
        StrengthSlider1.setSnapToTicks(true);
        StrengthSlider1.setValue(0);
        StrengthSlider1.setBorder(javax.swing.BorderFactory.createTitledBorder("Strength"));

        IntelligenceSlider1.setMajorTickSpacing(1);
        IntelligenceSlider1.setMaximum(10);
        IntelligenceSlider1.setMinimum(1);
        IntelligenceSlider1.setPaintLabels(true);
        IntelligenceSlider1.setPaintTicks(true);
        IntelligenceSlider1.setSnapToTicks(true);
        IntelligenceSlider1.setValue(0);
        IntelligenceSlider1.setBorder(javax.swing.BorderFactory.createTitledBorder("Intelligence"));

        VitalitySlider1.setMajorTickSpacing(1);
        VitalitySlider1.setMaximum(10);
        VitalitySlider1.setMinimum(1);
        VitalitySlider1.setPaintLabels(true);
        VitalitySlider1.setPaintTicks(true);
        VitalitySlider1.setSnapToTicks(true);
        VitalitySlider1.setValue(0);
        VitalitySlider1.setBorder(javax.swing.BorderFactory.createTitledBorder("Vitality"));

        LuckSlider1.setMajorTickSpacing(1);
        LuckSlider1.setMaximum(10);
        LuckSlider1.setMinimum(1);
        LuckSlider1.setPaintLabels(true);
        LuckSlider1.setPaintTicks(true);
        LuckSlider1.setSnapToTicks(true);
        LuckSlider1.setValue(0);
        LuckSlider1.setBorder(javax.swing.BorderFactory.createTitledBorder("Luck"));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AgilitySlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VitalitySlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(StrengthSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IntelligenceSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LuckSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StrengthSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AgilitySlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IntelligenceSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(VitalitySlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LuckSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setText("Divider");

        DividerField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Black", "Earth", "Fire", "Wind", "Water", "Lightning", "Ice", "Plague", "Nature", "Light", "Shadow", "Arcane" }));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 55, Short.MAX_VALUE))
                    .addComponent(DividerField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DividerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));
        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setText("Birth Flight");

        FlightField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ice", "Earth", "Fire", "Wind", "Water", "Lightning", "Plague", "Nature", "Light", "Shadow", "Arcane" }));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 29, Short.MAX_VALUE))
                    .addComponent(FlightField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FlightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));
        jPanel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        MateDIDField.setText("13276414");
        MateDIDField.setBorder(javax.swing.BorderFactory.createTitledBorder("Mate Dragon ID"));

        BFFDIDField.setText("13276414");
        BFFDIDField.setBorder(javax.swing.BorderFactory.createTitledBorder("BFF Dragon ID"));

        MateNameField.setText("None");
        MateNameField.setBorder(javax.swing.BorderFactory.createTitledBorder("Mate Name"));

        BFFNameField.setText("None");
        BFFNameField.setToolTipText("");
        BFFNameField.setBorder(javax.swing.BorderFactory.createTitledBorder("BFF Name"));

        EnemyNameField.setText("None");
        EnemyNameField.setBorder(javax.swing.BorderFactory.createTitledBorder("Enemy Name"));

        EnemyDIDField.setText("13276414");
        EnemyDIDField.setBorder(javax.swing.BorderFactory.createTitledBorder("Enemy Dragon ID"));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BFFNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                            .addComponent(MateNameField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BFFDIDField, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addComponent(MateDIDField)))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(EnemyNameField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EnemyDIDField)))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MateDIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MateNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BFFDIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BFFNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EnemyDIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EnemyNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Bio Text"));

        BioTextField.setColumns(20);
        BioTextField.setLineWrap(true);
        BioTextField.setRows(5);
        BioTextField.setText("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc facilisis nibh augue, nec iaculis felis egestas at. Phasellus in urna dictum, finibus lorem eu, tristique mi. In vitae ex et urna viverra rhoncus quis sed lorem. Nullam suscipit, odio vitae ullamcorper scelerisque, metus urna tempor sapien, semper congue nibh nisl quis libero. Proin eget nunc efficitur, vehicula libero eget, vestibulum lacus. Nam ultricies finibus sagittis. Vivamus euismod vitae lectus at accumsan. Aenean vel dictum urna. Donec massa justo, dictum in suscipit in, dictum et sapien. Morbi porttitor vulputate mollis. In ac eleifend libero. Pellentesque eu pharetra tellus. Nunc fermentum odio sit amet sapien imperdiet vehicula. Nulla in leo ac dolor gravida finibus.");
        jScrollPane4.setViewportView(BioTextField);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addComponent(jPanel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                        .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4)
                .addContainerGap())
        );

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        NicknameField.setText("None");
        NicknameField.setToolTipText("");
        NicknameField.setBorder(javax.swing.BorderFactory.createTitledBorder("Nickname"));

        AgeField.setText("Adult");
        AgeField.setBorder(javax.swing.BorderFactory.createTitledBorder("Age"));

        LikesField.setBorder(javax.swing.BorderFactory.createTitledBorder("Likes"));

        DislikesField.setBorder(javax.swing.BorderFactory.createTitledBorder("Dislikes"));

        Adj1Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Adjective 1"));

        Adj2.setBorder(javax.swing.BorderFactory.createTitledBorder("Adjective 2"));

        Adj3.setBorder(javax.swing.BorderFactory.createTitledBorder("Adjective 3"));

        Adj4.setBorder(javax.swing.BorderFactory.createTitledBorder("Adjective 4"));

        Item1Field.setText("Sand");
        Item1Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Item 1"));

        Item2Field.setText("Obsidian");
        Item2Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Item 2"));

        Item3Field.setText("Painted Turtle Shell");
        Item3Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Item 3"));

        Item4Field.setText("Bonewood Branch");
        Item4Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Item 4"));

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Hobbies"));

        HobbiesField.setColumns(20);
        HobbiesField.setLineWrap(true);
        HobbiesField.setRows(5);
        HobbiesField.setText("Suspendisse et massa nec enim fringilla venenatis eget at ante. Maecenas varius a lectus id consectetur. Suspendisse lobortis eu sapien vel tincidunt. Etiam malesuada eros quis vulputate dictum.");
        jScrollPane3.setViewportView(HobbiesField);

        PronounField.setText("Any");
        PronounField.setBorder(javax.swing.BorderFactory.createTitledBorder("Pronouns"));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NicknameField)
                    .addComponent(AgeField, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .addComponent(PronounField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(LikesField)
                    .addComponent(DislikesField)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Adj4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(Adj3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Adj2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Adj1Field))
                .addGap(10, 10, 10)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Item2Field)
                    .addComponent(Item3Field, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Item4Field, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Item1Field, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NicknameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LikesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Adj1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Item1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AgeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DislikesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Adj2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Item2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Adj3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Item3Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Item4Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Adj4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(PronounField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 9, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RandomizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomizeButtonActionPerformed
        // TODO add your handling code here:
        current.genAll();
        Adj1Field.setText(current.getAdj1());
        Adj2.setText(current.getAdj2());
        Adj3.setText(current.getAdj3());
        Adj4.setText(current.getAdj4());
        AgeField.setText(current.getAge());
        AgilitySlider1.setValue(current.getAgl());
        DislikesField.setText(current.getDislikes());
        FamiliarField.setText(current.getFami());
        GenderField.setSelectedItem(current.getGender()); 
        IntelligenceSlider1.setValue(current.getInt());
        Item1Field.setText(current.getItem1());
        Item2Field.setText(current.getItem2());
        Item3Field.setText(current.getItem3());
        Item4Field.setText(current.getItem4());
        JobField.setText(current.getjob());
        LikesField.setText(current.getLikes());
        LuckSlider1.setValue(current.getLuck());
        MoAlFIeld2.setSelectedItem(current.getAli2());
        MoAlField1.setSelectedItem(current.getAli1());
        NameField.setText(current.getName());
        RomanticField.setSelectedItem(current.getRomantic());
        SexualField.setSelectedItem(current.getSexuality());
        StrengthSlider1.setValue(current.getStr());
        VitalitySlider1.setValue(current.getVit());
        
    }//GEN-LAST:event_RandomizeButtonActionPerformed

    private void GenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateButtonActionPerformed
        // TODO add your handling code here:
       current.setDraID(DragonIDField.getText());
       current.setjob(JobField.getText());
       current.setAdj1(Adj1Field.getText());
       current.setAdj2(Adj2.getText());
       current.setAdj3(Adj3.getText());
       current.setAdj4(Adj4.getText());
       current.setMateid(MateDIDField.getText());
       current.setFriendid(BFFDIDField.getText());
       current.setFami(FamiliarField.getText());
       current.setDesc(BioTextField.getText());
       current.setAli1(MoAlField1.getSelectedItem().toString());
       current.setAli2(MoAlFIeld2.getSelectedItem().toString());
       current.setBirfli(FlightField.getSelectedItem().toString());
       current.setStr(StrengthSlider1.getValue());
       current.setAgl(AgilitySlider1.getValue());
       current.setVit(VitalitySlider1.getValue());
       current.setInt(IntelligenceSlider1.getValue());
       current.setLuck(LuckSlider1.getValue());
       current.setName(NameField.getText());
       current.setQuote(QuoteField.getText());
       current.setHb(DividerField.getSelectedItem().toString());
       current.setNickname(NicknameField.getText());
       current.setAge(AgeField.getText());
       current.setGender(GenderField.getSelectedItem().toString());
       current.setPronouns(PronounField.getText());
       current.setSexuality(SexualField.getSelectedItem().toString());
       current.setRomantic(RomanticField.getSelectedItem().toString());
       current.setLikes(LikesField.getText()); 
       current.setDislikes(DislikesField.getText());
       current.setHobbies(HobbiesField.getText());
       current.setMatename(MateNameField.getText());
       current.setMateurl(current.makeURL(MateDIDField.getText()));
       current.setItem1(Item1Field.getText());
       current.setItem2(Item2Field.getText());
       current.setItem3(Item3Field.getText());
       current.setItem4(Item4Field.getText()); 
       current.setFriendname(BFFNameField.getText());
       current.setMatename(MateNameField.getText());
       current.setEnemyid(EnemyDIDField.getText());
       current.setEnemyname(EnemyNameField.getText());
       
       
       OutputField.setText(current.makeBio());
    }//GEN-LAST:event_GenerateButtonActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frameme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frameme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frameme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frameme().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Adj1Field;
    private javax.swing.JTextField Adj2;
    private javax.swing.JTextField Adj3;
    private javax.swing.JTextField Adj4;
    private javax.swing.JTextField AgeField;
    private javax.swing.JSlider AgilitySlider;
    private javax.swing.JSlider AgilitySlider1;
    private javax.swing.JTextField BFFDIDField;
    private javax.swing.JTextField BFFNameField;
    private javax.swing.JTextArea BioTextField;
    private javax.swing.JTextField BirthdayField;
    private javax.swing.JTextField BirthyearFIeld;
    private javax.swing.JTextField DislikesField;
    private javax.swing.JComboBox<String> DividerField;
    private javax.swing.JTextField DragonIDField;
    private javax.swing.JTextField EnemyDIDField;
    private javax.swing.JTextField EnemyNameField;
    private javax.swing.JTextField FamiliarField;
    private javax.swing.JComboBox<String> FlightField;
    private javax.swing.JComboBox<String> GenderField;
    private javax.swing.JButton GenerateButton;
    private javax.swing.JTextArea HobbiesField;
    private javax.swing.JSlider IntelligenceSlider;
    private javax.swing.JSlider IntelligenceSlider1;
    private javax.swing.JTextField Item1Field;
    private javax.swing.JTextField Item2Field;
    private javax.swing.JTextField Item3Field;
    private javax.swing.JTextField Item4Field;
    private javax.swing.JTextField JobField;
    private javax.swing.JTextField LikesField;
    private javax.swing.JSlider LuckSlider;
    private javax.swing.JSlider LuckSlider1;
    private javax.swing.JTextField MateDIDField;
    private javax.swing.JTextField MateNameField;
    private javax.swing.JComboBox<String> MoAlFIeld2;
    private javax.swing.JComboBox<String> MoAlField1;
    private javax.swing.JTextField NameField;
    private javax.swing.JTextField NicknameField;
    private javax.swing.JTextArea OutputField;
    private javax.swing.JTextField PronounField;
    private javax.swing.JTextField QuoteField;
    private javax.swing.JButton RandomizeButton;
    private javax.swing.JComboBox<String> RomanticField;
    private javax.swing.JComboBox<String> SexualField;
    private javax.swing.JSlider StrengthSlider;
    private javax.swing.JSlider StrengthSlider1;
    private javax.swing.JSlider VitalitySlider;
    private javax.swing.JSlider VitalitySlider1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}


class bio {
    static String byear = "2016";
    public static void setByear(String a){byear=a;}
    
    static String familiars[] = {"Abyss Striker", "Amaranth Moth", "Ancient Fungus", "Arcane Sprite", "Autumn Dryad", "Baku", "Bamboo Phytocat", "Banded Owlcat", "Basilisk", "Black Dwarf Unicorn", "Black Iron Creeper", "Black Wolf", "Black-Wing Hummingbird", "Blacktalon Striker", "Blackwing Croaker", "Blooming Strangler", "Blue Dragon Reef Snail", "Blue Tang Hippogriff", "Bluefin Charger", "Bluemoon Aviar", "Blueridge Greatshell", "Bone Fiend", "Boolean", "Bramble Guardian", "Brilliant Psywurm", "Brown River Flight", "Brush Dodo", "Bucktooth Digger", "Bumble", "Candycane Xolo", "Cardinal Hippogriff", "Carmine Serthis", "Celestial Antelope", "Centaur Archer", "Charcoal Sprangyroo", "Chimera", "Chocolate Ferret", "Citrine Cave Jewel", "Cloud Chaser", "Clouddancer", "Clown Charger", "Coarsefur Yeti", "Cockatrice", "Cog Frog", "Colorburst Buttersnake", "Common Podid", "Construction Mith", "Coppercoil Creeper", "Coral Carpenter", "Corpse Cleaner", "Corundum Chameleon", "Cragbacked Bouldursa", "Crimson Emperor", "Crimson Reef Snail", "Crowned Bonepriest", "Cumulus Seal", "Cursed Bat", "Dappled Dunhoof", "Dappled Seal", "Dark-Tufted Sparrowmouse", "Darktouched Chimera", "Death Seeker", "Death's-Head Stag", "Dodo", "Double-Tailed Warcat", "Downy Fox Rat", "Dream Eater", "Driftwood Baron", "Dryad", "Dunhoof Ambassador", "Dwarf Truffle", "Dwarf Unicorn", "Earth Sprite", "Ectoplasmime", "Elk", "Ember Mouse", "Emerald Cave Jewel", "Emerald Webwing", "Ethereal Trickster", "Everglade Lasher", "Fallout Streak", "Fawn Fox Rat", "Fire Sprite", "Fluted Pukasloth", "Frost Delver", "Frostbite Hummingbird", "Fuiran", "Fungalhoof Qiriq", "Fungusbearing Phony", "Gale Wolf", "Gaseous Megashrimp", "Glossy Duskrat", "Glowing Pocket Mouse", "Golden Bantam Fangar", "Golden Idol", "Golden Porpoise", "GoldThroated Sparrow", "Granite Thresher", "Grasslands Trunker", "Graveyard Guardian", "Greater Sandstrike", "Greatshell", "Greenroot Janustrap", "Grey River Flight", "Hainu", "Harvest Floracat", "Hati", "Heartred Croaker", "Hedgehog", "Hibernal Starbear", "Hippogriff", "Hippojay", "Hoarfrost Mauler", "Hooded Dodo", "Hydra Scorpion", "Ice Sprite", "Iridescent Scaleback", "Irradiated Astronomer", "Jadecarved Decoy", "Janustrap", "Jawlocker", "Jeweled Octoflyer", "Kelp Tender", "Lavaborne Hoax", "Leafy Moth", "Light Sprite", "Lightning Sprite", "Livewire Grizzly", "Longneck Interloper", "Longneck Magi", "Longneck Mender", "Longneck Skirmisher", "Luna Mith", "Magma Embear", "Mammertee", "Maned Cobra", "Maned Rasa", "Mantarune", "Manticore", "Marbled Jester", "Maren Ambusher", "Maren Scout", "Maren Warrior", "Maren Wavesinger", "Masked Harpy", "Melprin", "Mesacliff Harpy", "Mimic Buttersnake", "Mistral Minion", "Mistwatch Shellion", "Mock Firebird", "Moordwelling Trunker", "Mottled Buttersnake", "Nature Sprite", "Nephrite Chameleon", "Nightsky Fuiran", "Nochnyr", "Noggle", "Octoflyer", "Opheodrys Serthis", "Painted Centaur", "Parasitic Fungus", "Peacock Firebird", "Peacock Scorpion", "Perching Java Sparrow", "Permafrost Impaler", "Plague Sprite", "Poisonous Toridae", "Polarfreeze Defender", "Poultrygeist", "Psywurm", "Radioactive Slime", "Ragamouse", "Rainbow Sprite", "Rambra", "Raptorik Warrior", "Red-Breasted Hainu", "Red-Footed Akirbeak", "Red-Winged Owlcat", "Relic Eel", "Renegade Aviar", "River Muck", "Rivermouth Flatbill", "Roundhorn Melprin", "Ruby Webwing", "Runic Bat", "Sakura Owl", "Salve Kamaitachi", "Scaleback", "Scarlet Flycatcher", "Scrapmetal Tracker", "Scythe Kamaitachi", "Sentinel Mith", "Serthis Alchemist", "Serthis Potionmaster", "Shadow Serpent", "Shadow Sprite", "Shale Thresher", "Shalebuck", "Shattered Serpent", "Shellion", "Shimmering Xolo", "Sickle Kamaitachi", "Silver Ferret", "Silver Springbok", "Skittering Megashrimp", "Skoll", "Skycat", "Slumbering Charlatan", "Smoke Gyre", "Smoky Bantam Fangar", "Snarling Mimic", "Snow Streak", "Snowfall Elk", "Snowsquall Floracat", "Southmarsh Podid", "Speedy", "Spellbound Golem", "Spined Cobra", "Spinel Vulstal", "Spotted Pukasloth", "Sprangyroo", "Squall Rasa", "Steam Gyre", "Steelhound", "Stone Borer", "Stonewatch Harpy", "Storm Seeker", "Strangler", "Sunbeam Ursa", "Sundial Imposter", "Sunset Lasher", "Sunspot Clouddancer", "Swallowtail Buttersnake", "Swift Lumen", "Swift Volt", "Tengu", "Tourmaline Vulstal", "Trick of the Light", "Tuxedo Floracat", "Umberhorn Qiriq", "Umbra Wolf", "Velvet Floracat", "Venerable Shalebuck", "Venomous Toridae", "Voltspire Intruder", "Warcat Protector", "Water Sprite", "Wave Sweeper", "Wildwood Owl", "Wind Sprite", "Windcarve Harpy", "Winter Wolf", "Wintermane Bowman", "Wintermane Spearman", "Woodland Turkey", "Yellow-Throated Sparrowmouse", "Zeeba"};
    
    static String OrName[] = {"Heterosexual","Asexual", "Bisexual", "Gay", "Lesbian", "Lithsexual", "Pansexual", "Polysexual"};
    static String OrImg[] = {"http://i.imgur.com/MVbXUut.png","http://i.imgur.com/z9wN9td.png", "http://i.imgur.com/KQ6w7Ti.png", "http://i.imgur.com/j8PMqv2.png", "http://i.imgur.com/pXAnAGJ.png", "http://i.imgur.com/IcfEt8p.png", "http://i.imgur.com/1QgVVA1.png", "http://i.imgur.com/4A0tklc.png"};
    static int OrNum = OrName.length;
    
    static String GeName[] = {"Agender", "Genderfluid", "Genderqueer", "Non-Binary", "Transgender", "Cisgender"};
    static String GeImg[] = {"http://i.imgur.com/y0773uw.png", "http://i.imgur.com/2HL2oNl.png", "http://i.imgur.com/qQhyGq4.png", "http://i.imgur.com/3NargNp.png", "http://i.imgur.com/qYSSJxb.png", "http://imgur.com/2XWwCjs.png"};
    static int GeNum = GeName.length;
    
    static String RoName[] = {"Aromantic", "Biromantic", "Gay-romantic", "Lesbian-romantic", "Lithromantic", "Panromantic", "Polyromantic", "Heteroromantic"};
    static String RoImg[] = {"http://i.imgur.com/nHP9ttJ.png", "http://i.imgur.com/yW1qEhW.png", "http://i.imgur.com/Tx4azoX.png", "http://i.imgur.com/z2ZV3G4.png", "http://i.imgur.com/fZk1sPQ.png", "http://i.imgur.com/8j4xTFY.png", "http://i.imgur.com/idqR3wS.png", "http://i.imgur.com/oTCurtd.png"};
    static int RoNum = RoName.length;
    
    static String AlName[] = {"Good", "Evil", "Chaotic", "Neutral", "Lawful"};
    static String AlUrl[] = {"http://www1.flightrising.com/forums/cc/1491643", "http://www1.flightrising.com/forums/cc/1491643", "http://www1.flightrising.com/forums/cc/1491643", "http://www1.flightrising.com/forums/cc/1491643", "http://www1.flightrising.com/forums/cc/1491643"};
    static String AlImg[] = {"https://41.media.tumblr.com/c09091badce11418d088145d1571b6e5/tumblr_ny67v1CEw21tcuk4xo2_100.png", "https://36.media.tumblr.com/bc7989998b789b0edaede012e28b1ab3/tumblr_ny67v1CEw21tcuk4xo1_100.png", "https://41.media.tumblr.com/6ccb81bc8ab299cea113dae68651e117/tumblr_ny67v1CEw21tcuk4xo5_100.png", "https://41.media.tumblr.com/c25633b6d3a7220235c3a288ec59eb26/tumblr_ny67v1CEw21tcuk4xo4_100.png", "https://40.media.tumblr.com/6bc544bb52a5683a1b2b1a7def805375/tumblr_ny67v1CEw21tcuk4xo3_100.png"};
    static int AlNum = AlName.length;
    
    static String HoName[] = {"Capricorn", "Aquarius","Pisces","Aries","Tuarus","Gemini","Cancer","Leo","Virgo","Scorpio","Sagittarius"};
    static String HoUrl[] = {"http://psychiclibrary.com/beyondBooks/capricorn/", "http://psychiclibrary.com/beyondBooks/aquarius/", "http://psychiclibrary.com/beyondBooks/pisces/", "http://psychiclibrary.com/beyondBooks/aries/", "http://psychiclibrary.com/beyondBooks/taurus", "http://psychiclibrary.com/beyondBooks/gemini/", "http://psychiclibrary.com/beyondBooks/cancer/", "http://psychiclibrary.com/beyondBooks/leo/", "http://psychiclibrary.com/beyondBooks/virgo/", "http://psychiclibrary.com/beyondBooks/libra/", "http://psychiclibrary.com/beyondBooks/scorpio/", "http://psychiclibrary.com/beyondBooks/sagittarius/"};
    static String HoImg[] = {"http://orig09.deviantart.net/421c/f/2016/058/e/2/capri_by_intimer_genetics_inc-d9tal1y.png", "http://orig02.deviantart.net/54f3/f/2016/058/9/2/aquarius_by_intimer_genetics_inc-d9tal1v.png", "http://orig06.deviantart.net/8bcb/f/2016/058/d/b/pices_by_intimer_genetics_inc-d9tal0i.png", "http://orig01.deviantart.net/79c7/f/2016/058/5/0/aries_by_intimer_genetics_inc-d9tal1h.png", "http://orig09.deviantart.net/7b25/f/2016/058/9/4/taurus_by_intimer_genetics_inc-d9tal0c.png", "http://orig09.deviantart.net/1fca/f/2016/058/e/c/gemini_by_intimer_genetics_inc-d9tal0r.png", "http://orig03.deviantart.net/f85d/f/2016/058/0/f/caner_by_intimer_genetics_inc-d9tal21.png", "http://orig13.deviantart.net/a581/f/2016/058/a/5/leo_by_intimer_genetics_inc-d9tal1n.png", "http://orig00.deviantart.net/ebc9/f/2016/058/0/e/virgo_by_intimer_genetics_inc-d9tal13.png", "http://orig05.deviantart.net/7787/f/2016/058/8/3/libra_by_intimer_genetics_inc-d9tal18.png", "http://orig12.deviantart.net/1367/f/2016/058/8/6/scorpio_by_intimer_genetics_inc-d9tal1r.png", "http://orig09.deviantart.net/450f/f/2016/058/5/c/sagit_by_intimer_genetics_inc-d9tal1b.png"};
    static int HoNum = HoName.length;
    
    static String ChiName[] = {"2013","2014","2015","2016","2017"};
    static String ChiUrl[] = {"http://www.travelchinaguide.com/intro/social_customs/zodiac/snake.htm", "http://www.travelchinaguide.com/intro/social_customs/zodiac/horse.htm", "http://www.travelchinaguide.com/intro/social_customs/zodiac/sheep.htm", "http://www.travelchinaguide.com/intro/social_customs/zodiac/monkey.htm", "http://www.travelchinaguide.com/intro/social_customs/zodiac/rooster.htm"};
    static String ChiImg[] = {"http://www1.flightrising.com/static/cms/food/74.png", "http://www1.flightrising.com/static/cms/food/683.png", "http://www1.flightrising.com/static/cms/food/7103.png", "http://flightrising.com/images/cms/food/14896.png", "http://www1.flightrising.com/static/cms/food/3549.png"};
    static int ChiNum = ChiName.length;
    
    static String Flight[] = {"Earth", "Fire", "Water", "Wind", "Ice", "Lightning", "Light", "Shadow", "Nature", "Plague", "Arcane"};
    static String FlightURL[] = {"[img]http://orig06.deviantart.net/8cca/f/2015/196/e/9/earth_by_magdaleen_96-d91fegp.png[/img]", "[img]http://orig08.deviantart.net/13e3/f/2015/196/2/f/fire_by_magdaleen_96-d91fegj.png[/img]", "[img]http://orig03.deviantart.net/17da/f/2015/196/7/d/water_by_magdaleen_96-d91fefl.png[/img]", "[img]http://orig13.deviantart.net/589a/f/2015/196/6/3/wind_by_magdaleen_96-d91fefb.png[/img]", "[img]http://orig13.deviantart.net/9bcc/f/2015/196/5/3/ice_by_magdaleen_96-d91fegb.png[/img]", "[img]http://orig13.deviantart.net/374c/f/2015/196/5/2/lightning2_by_magdaleen_96-d91fg17.png[/img]", "[img]http://orig11.deviantart.net/72ac/f/2015/196/d/7/light_by_magdaleen_96-d91fg1o.png[/img]", "[img]http://orig11.deviantart.net/718a/f/2015/196/c/f/shadow_by_magdaleen_96-d91fefu.png[/img]", "[img]http://orig14.deviantart.net/4f31/f/2015/196/2/b/nature_by_magdaleen_96-d91fg12.png[/img]", "[img]http://orig06.deviantart.net/ef6f/f/2015/196/6/b/plague_by_magdaleen_96-d91fg0u.png[/img]", "[img]http://orig12.deviantart.net/e433/f/2015/196/6/7/arcane_by_magdaleen_96-d91fg1s.png[/img]"};
    static int FlightNum = Flight.length;
    
    static String DiName[] = {"Earth", "Fire", "Wind", "Water", "Lightning", "Ice", "Plague", "Nature", "Light", "Shadow", "Arcane", "Black"};
    static String DiImg[] = {"http://orig00.deviantart.net/d250/f/2016/341/6/9/ittmyb2__1__by_intimer_genetics_inc-daqw82n.png", "http://orig06.deviantart.net/0f9b/f/2016/341/7/b/jdj2kvh__1__by_intimer_genetics_inc-daqw817.png", "http://orig15.deviantart.net/2d49/f/2016/341/e/4/xkajtsl__1__by_intimer_genetics_inc-daqw7zl.png", "http://orig14.deviantart.net/fa04/f/2016/341/e/4/b8qgdw0__1__by_intimer_genetics_inc-daqw7yl.png", "http://orig01.deviantart.net/fccb/f/2016/341/4/8/dcwroit__1__by_intimer_genetics_inc-daqw7xh.png", "http://orig10.deviantart.net/f0a9/f/2016/341/f/a/8ffp1wh__1__by_intimer_genetics_inc-daqw7wb.png", "http://orig07.deviantart.net/4162/f/2016/341/1/0/vcmmalu__1__by_intimer_genetics_inc-daqw7v8.png", "http://orig06.deviantart.net/ca96/f/2016/341/3/4/36pdcyy__1__by_intimer_genetics_inc-daqw7th.png", "http://orig12.deviantart.net/96e5/f/2016/341/f/c/ldbf8dw__1__by_intimer_genetics_inc-daqw7s9.png", "http://orig10.deviantart.net/bb3e/f/2016/341/8/3/dnj518h__1__by_intimer_genetics_inc-daqw7r4.png", "http://orig01.deviantart.net/c7ef/f/2016/341/3/7/snsno57__1__by_intimer_genetics_inc-daqw7pw.png", "http://orig08.deviantart.net/3013/f/2016/341/f/2/tumblr_ofbpnutidk1vqy6hpo1_500__3__by_intimer_gene_by_intimer_genetics_inc-daqw7kx.png"};
    static int DiNum = DiName.length;
    
    static Map<String, String> ori = new HashMap<String, String>();
    static Map<String, String> gen = new HashMap<String, String>();
    static Map<String, String> rom = new HashMap<String, String>();
    static Map<String, String> ali = new HashMap<String, String>();
    static Map<String, String> hor = new HashMap<String, String>();
    static Map<String, String> fli = new HashMap<String, String>();
    static Map<String, String> chi = new HashMap<String, String>();
    static Map<String, String> div = new HashMap<String, String>();
    
    static String biotxt = "";
    
    static String DraID = "13276414";
    public static String getDraID(){return DraID;}
    public static void setDraID(String a) {DraID=a;}
    
    static int bday = 1231;
    
    static String job = "Cake Sampler";
    public static String getjob(){return job;}
    public static void setjob(String a) {job=a;}
    
    static String adj1 = "Kind";
    public static String getAdj1(){return adj1;}
    public static void setAdj1(String a) {adj1=a;}
    
    static String adj2 = "Smart";
    public static String getAdj2(){return adj2;}
    public static void setAdj2(String a) {adj2=a;}
    
    static String adj3 = "Curious";
    public static String getAdj3(){return adj3;}
    public static void setAdj3(String a) {adj3=a;}
    
    static String adj4 = "Pretty";
    public static String getAdj4(){return adj4;}
    public static void setAdj4(String a) {adj4=a;}
    
    static String mateID = "13276414";
    public static String getMateid(){return mateID;}
    public static void setMateid(String a) {mateID=a;}
    
    static String friendID = "13276414";
    public static String getFriendid(){return friendID;}
    public static void setFriendid(String a) {friendID=a;}
    
    static String fami = "";
    public static String getFami(){return fami;}
    public static void setFami(String a) {fami=a;}
    
    static String desc = "";
    public static String getDesc(){return desc;}
    public static void setDesc(String a) {desc=a;}
    
    static String Ali1 = "Lawful";
    public static String getAli1(){return Ali1;}
    public static void setAli1(String a) {Ali1=a;}
    
    static String Ali2 = "Good";
    public static String getAli2(){return Ali2;}
    public static void setAli2(String a) {Ali2=a;}
    
    static String BirFli = "Ice";
    public static String getBirfli(){return BirFli;}
    public static void setBirfli(String a) {BirFli=a;}
    
    
    static int Str = 1;
    public static int getStr(){return Str;}
    public static void setStr(int a) {Str=a;}

    static int Agl = 1;
    public static int getAgl(){return Agl;}
    public static void setAgl(int a) {Agl=a;}

    static int Vit = 1;
    public static int getVit(){return Vit;}
    public static void setVit(int a) {Vit=a;}

    static int Int = 1;
    public static int getInt(){return Int;}
    public static void setInt(int a) {Int=a;}

    static int Luck = 1;    
    public static int getLuck(){return Luck;}
    public static void setLuck(int a) {Luck=a;}

    public static String hatchery = "hatchery";
    public static String getHatchery(){return hatchery;}
    public static void setHatchery(String a, String b){hatchery = "[url="+a+"][img]"+b+"[/img][/url]";}

    public static String name = "name";
    public static String getName() {return name;}
    public static void setName(String a) {name=a;}

    public static String quote = "quote";
    public static String getQuote() {return quote;}
    public static void setQuote(String a) {quote=a;}

    public static String hb = "[img]http://orig03.deviantart.net/ed4c/f/2016/339/8/c/tumblr_ofbpnutidk1vqy6hpo1_500__3__by_intimer_genetics_inc-daqocf6.png[/img]";
    public static String getHb() {return hb;}
    public static void setHb(String a) {hb=a;}

    public static String nickname = "nickname";
    public static String getNickname() {return nickname;}
    public static void setNickname(String a) {nickname=a;}

    public static String age = "age";
    public static String getAge() {return age;}
    public static void setAge(String a) {age=a;}

    public static String gender = "gender";
    public static String getGender() {return gender;}
    public static void setGender(String a) {gender=a;}

    public static String pronouns = "pronouns";
    public static String getPronouns() {return pronouns;}
    public static void setPronouns(String a) {pronouns=a;}

    public static String sexuality = "sexuality";
    public static String getSexuality() {return sexuality;}
    public static void setSexuality(String a) {sexuality=a;}

    public static String romantic = "romantic";
    public static String getRomantic() {return romantic;}
    public static void setRomantic(String a) {romantic=a;}

    public static String likes = "likes";
    public static String getLikes() {return likes;}
    public static void setLikes(String a) {likes=a;}

    public static String dislikes = "dislikes";
    public static String getDislikes() {return dislikes;}
    public static void setDislikes(String a) {dislikes=a;}

    public static String hobbies = "hobbies";
    public static String getHobbies() {return hobbies;}
    public static void setHobbies(String a) {hobbies=a;}

    public static String matename = "matename";
    public static String getMatename() {return matename;}
    public static void setMatename(String a) {matename=a;}

    public static String mateURL = "mateURL";
    public static String getMateurl() {return mateURL;}
    public static void setMateurl(String a) {mateURL=a;}
    
    /*public static String mateID = "mateURL";
    public static String getMateid() {return mateID;}
    public static void setMateid(String a) {mateID=a;} */

    public static String relname = "relname";
    public static String getRelname() {return relname;}
    public static void setRelname(String a) {relname=a;}

    public static String relURL = "relURL";
    public static String getRelurl() {return relURL;}
    public static void setRelurl(String a) {relURL=a;}

    public static String friendname = "friendname";
    public static String getFriendname() {return friendname;}
    public static void setFriendname(String a) {friendname=a;}

    public static String friendURL = "friendURL";
    public static String getFriendurl() {return friendURL;}
    public static void setFriendurl(String a) {friendURL=a;}

    public static String enemyname = "enemyname";
    public static String getEnemyname() {return enemyname;}
    public static void setEnemyname(String a) {enemyname=a;}

    public static String enemyURL = "enemyURL";
    public static String getEnemyurl() {return enemyURL;}
    public static void setEnemyurl(String a) {enemyURL=a;}        
    
        public static String enemyID = "enemyURL";
    public static String getEnemyid() {return enemyID;}
    public static void setEnemyid(String a) {enemyID=a;} 

    public static String virtue = "virtue";
    public static String getVirtue() {return virtue;}
    public static void setVirtue(String a) {virtue=a;}

    public static String vice = "vice";
    public static String getVice() {return vice;}
    public static void setVice(String a) {vice=a;}  

    public static String item1 = "item1";
    public static String getItem1() {return item1;}
    public static void setItem1(String a) {item1=a;}

    public static String item2 = "item2";
    public static String getItem2() {return item2;}
    public static void setItem2(String a) {item2=a;}

    public static String item3 = "item3";
    public static String getItem3() {return item3;}
    public static void setItem3(String a) {item3=a;}   

    public static String item4 = "item4";
    public static String getItem4() {return item4;}
    public static void setItem4(String a) {item4=a;} 
        
        //End of variable declaration
        
        public static void makeBooks() {   
            //oritentation dictionary
    String DiCon[] = new String[DiNum];
    for(int i=0; i<DiNum; i++){
    DiCon[i] = "[img]"+DiImg[i]+"[/img]";
    div.put(DiName[i],DiCon[i]);
      }
            
    //oritentation dictionary
        String OrCon[] = new String[OrNum];
    for(int i=0; i<OrNum; i++){
    OrCon[i] = "[img]"+OrImg[i]+"[/img]";
    ori.put(OrName[i],OrCon[i]);
      }
    //oritentation dictionary
    String GeCon[] = new String[GeNum];
    for(int i=0; i<GeNum; i++){
    GeCon[i] = "[img]"+GeImg[i]+"[/img]";
    gen.put(GeName[i],GeCon[i]);
      }
    //oritentation dictionary
    String RoCon[] = new String[RoNum];
    for(int i=0; i<RoNum; i++){
    RoCon[i] = "[img]"+RoImg[i]+"[/img]";
    rom.put(RoName[i],RoCon[i]);
      }
    
    String ChiCon[] = new String[ChiNum];
    for(int i=0; i<ChiNum; i++){
    ChiCon[i] = "[url="+ChiUrl[i]+"][img]"+ChiImg[i]+"[/img][/url]";
    chi.put(ChiName[i],ChiCon[i]);
      }
    
    //alignment dictionary
    String AlCon[] = new String[AlNum];
    for(int i=0; i<AlNum; i++){
    AlCon[i] = "[url="+AlUrl[i]+"][img]"+AlImg[i]+"[/img][/url]";
    ali.put(AlName[i],AlCon[i]);
      }
    
    //horoscope dictionary
    String HoCon[] = new String[HoNum];
    for(int i=0; i<HoNum; i++){
    HoCon[i] = "[url="+HoUrl[i]+"][img]"+HoImg[i]+"[/img][/url]";
    hor.put(HoName[i],HoCon[i]);
      }
    
    for(int i=0;i<FlightNum;i++){
        fli.put(Flight[i],FlightURL[i]);
    }
    
    }
         public static String makeAvie(String a){
     String did1s = a;
    did1s = did1s.substring(0,(did1s.length()-2));
    did1s = String.valueOf(Integer.parseInt(did1s)+1); 
    return "[url=http://flightrising.com/main.php?dragon="+a+"][img]http://flightrising.com/rendern/portraits/"+did1s+"/"+a+"p.png[/img][/url]";
    }
         public static String makeURL(String a){
     String did1s = a;
    return "[url=http://flightrising.com/main.php?dragon="+a+"]";
    }
         public static String[] makeStats(int num){
        String res[] = new String[2];
        String left = "";
        String right = "██████████";
        for (int i = 0; i <num; i++){
            left+="█";
            right = right.substring(0,right.length()-1);
        }
         res[0]=left;
         res[1]=right;
        
        return res;
    }
         public static String makeWestern(int bday){
        //if((bday>=1)&&(bday<=119)){return "Capricorn";}
        if((bday>=120)&&(bday<=218)){return "Aquarius";}
        if((bday>=219)&&(bday<=320)){return "Pisces";}
        if((bday>=321)&&(bday<=419)){return "Aries";}
        if((bday>=420)&&(bday<=520)){return "Taurus";}
        if((bday>=521)&&(bday<=620)){return "Gemini";}
        if((bday>=621)&&(bday<=722)){return "Cancer";}
        if((bday>=723)&&(bday<=822)){return "Leo";}
        if((bday>=823)&&(bday<=922)){return "Virgo";}
        if((bday>=923)&&(bday<=1022)){return "Libra";}
        if((bday>=1023)&&(bday<=1121)){return "Scorpio";}
        if((bday>=1122)&&(bday<=1221)){return "Sagittarius";}
        else return "Capricorn";
    }
        
         public static void genAll() {
             genName(); genAlign(); genAge(); genGen(); genSexuality(); genGender(); genRomantic(); genlikes(); genJob();
             genFam(); genAdj(); genStats(); genMats();              
         }
         
        public static void genName() {
  String[] prefix = {"anti","auto","de","dis","down","extra","hyper","il","im","in","ir","inter","mega","mid","mis","non","over","out","post","pre","pro","re","semi","sub","sub","super","tele","trans","ultra","un","under","up"};
  String[] firCon = {"t", "n", "s", "r", "d", "f", "c", "b", "z"};
  String[] secCon = {"r", "h", "s","v"};
  String[] firVow = {"e", "a", "i", "o", "oo", "u"};
  String[] thiCon = {"t", "v", "w", "x", "ck", "g", "p", "ch", "sh","ph","rr",};
  String[] secVow = {"e", "i", "o","a","u"}; 
  String[] fouCon = {"r", "s", "y","de","x","ra","le",};
  String[] suffix = {"iode","able","ac","acity","ocity","ade","age","aholic","oholic","al","algia","an","ian","ance","ant","ar","ard","arian","arium","orium","ary","ation","ate","ative","cide","cracy","crat","cule","cy","cycle","dom","dox","ed","ee","ectomy","eer","emia","en","ence","ency","ent","er","ern","escence","ese","esque","ess","est","etic","ette","ful","fy","gam","gamy","gon","gonic","hood","ial","ian","iasis","iatric","ible","ic","ical","ile","ily","ine","ing","ion","ious","ish","ism","ist","ite","itis","ity","ive","ization","ize","less","let","like","ling","loger","logist","log","ly","ment","ness","oid","ology","oma","onym","opia","opsy","or","ory","osis","ostomy","otomy","ous","path","pathy","phile","phobia","phone","phyte","plegia","plegic","pnea","scopy","scope","scribe","script","sect","ship","sion","some","sophy","sophic","th","tion","tome","tomy","tude","trophy","tude","ty","ular","uous","ure","ward","ware","wise"};
  int numnum = (int)(Math.random() * 100000);  
  String result = " ";         
        //start with the prefix
        if(Math.random() < .5) {
            result += prefix[(int)(Math.random() * prefix.length)];
        }
        
        //then the first consonant
        if(Math.random() < .7) {
            result += firCon[(int)(Math.random() * firCon.length)];
        }
        
        //then the possible second consonant
        if(Math.random() < .4) {
            result += secCon[(int)(Math.random() * secCon.length)];
        }
        
        //then the first vowel
        if(Math.random() < .9) {
            result += firVow[(int)(Math.random() * firVow.length)];
        }
        
        //then the third consonant
        if(Math.random() < .8) {
            result += thiCon[(int)(Math.random() * thiCon.length)];
        }
        
        //then the second vowel
        if(Math.random() < .6) {
            result += secVow[(int)(Math.random() * secVow.length)];
        }
        
        //then the fourth consonant
        if(Math.random() < .5) {
            result += fouCon[(int)(Math.random() * fouCon.length)];
        }
        
        //possibly another vowel?
        if(Math.random() < .5) {
            result += secVow[(int)(Math.random() * secVow.length)];
        }
        
        //then the suffix
        if (Math.random() < .5) {
            result += suffix[(int)(Math.random() * suffix.length)];
        }
        
        //if it's short, then maybe repeat it. (Seg -> Segseg)
        if (Math.random() < .7 && (result.length() < 6)) {
        result += result.substring(1,result.length());
        }
        
        //lastly, capitalize the first letter.
        String temp1 = result.substring(1,2);
        String temp2 = result.substring(2,result.length());
        temp1 = temp1.toUpperCase();
        result = temp1 + temp2;
        
        //if it's too long, delete it. 
        if (result.length() > 9) {
             result = result.substring(0,8);
        }  
        name = result;       
    }
        public static void genAlign() {
     int num = (int)(Math.random()*AlName.length);
     Ali1 = AlName[num];
     num = (int)(Math.random()*AlName.length);
     Ali2 = AlName[num];
    }
        public static void genAge() {
        String[] mats = {"Hatchling","Child","Teenager","Young Adult","Adult","Senior","Older Adult"};
        int num = (int)(Math.random()*mats.length);
        age = mats[num];
        }
        public static void genGen() {String[] mats = GeName; int num = (int)(Math.random()*mats.length); gender = mats[num];}
        public static void genSexuality() { String[] mats = OrName; int num = (int)(Math.random()*mats.length); sexuality = mats[num]; }
        public static void genGender() { String[] mats = GeName; int num = (int)(Math.random()*mats.length); gender = mats[num]; }
        public static void genRomantic() { String[] mats = RoName; int num = (int)(Math.random()*mats.length); romantic = mats[num]; }
        public static void genlikes() {
        String[] mats = {"Cuddling", "Music", "Hot Chocolate", "Long Walks", "Dogs", "Cats", "Animals", "Sweaters", "Summer", "Winter", "Spring", "Nature", "Swimming", "Sweet Tea", "Smiling", "Laughing", "Jokes", "Long Hair", "Good Vibes", "Day Dreaming", "Reading", "Sleeping", "Food", "Blogging", "Photography", "Fuzzy Blankets", "Kissing", "Love", "Hugs", "Hand Holding", "Money", "Clothes", "Football", "Basketball", "Baseball", "Kickball", "Dodge Ball", "Concerts", "Partying", "Drinking", "Weed", "Drugs", "Guys", "Girls", "Texting", "Dancing", "Shoes", "Fashion", "Acting", "Modeling", "Helping Others", "Kissing In The Rain", "Painting", "Drawing", "Horror Movies", "Romantic Movies", "Comedies", "Ice Cold Water", "Instant Tea", "Vivaldi", "Rap Music", "Bruegel & Vermeer", "Picasso", "Room Service", "Waiting", "Siena", "Mixed Vegetables", "Leonard Cohen’S Lyrics", "Ambulance Sirens", "Candles", "Telephone Solicitations", "Kites", "Junk Mail", "Apples", "Insurance", "All Things Apple", "Being Put On “Hold”", "Chocolate", "Colorized Movies", "Rainbows", "Strawberries", "Used Book Stores", "Crickets", "Good Manners", "“Sucks”", "Handmade Quilts", "Daily Oklahoman", "Cats", "Mice", "Jewelry", "Rolypoly Bugs", "Lapel Buttons", "Reruns", "Quotations", "Know-It-All’S", "“Slasher” Films", "Boiled Okra", "Shakespeare", "The Simpsons", "Post-It Notes", "Whining", "Garden Tomatoes", "Cigarettes", "Comfortable Shoes", "New Shoes", "Gossip", "Elmer’S Glue", "Cartridge Pens", "Snoring", "Mystery", "Whistling", "Quiet", "Trivial Trivia", "Chinese Elms", "Golf", "Roses", "Elvis Presley", "Body Hair", "Body Odor", "Germs", "Liars", "Hypocrites", "Drama", "Studying", "Being Alone", "Crowded Rooms", "People", "Mushrooms", "Bugs", "Wet Socks", "Crying", "Being Touched", "Rain", "Thunder Storms", "The Cold", "The Heat", "Summer", "Winter", "Spring", "Fall", "Water", "Reading", "School", "Sweating", "(Movie)", "(Artist)", "(Actor/Actress)", "Smoking", "Drinking", "Cheaters", "Kids", "Sad Movies", "Horror Movies", "Annoying People", "Puking", "Being Sick", "Rough Textures", "Funerals", "Boats", "Airplanes"};
        int num = (int)(Math.random()*mats.length);
        likes = mats[num]+", ";
        num = (int)(Math.random()*mats.length);
        likes += mats[num];
        num = (int)(Math.random()*mats.length);
        dislikes = mats[num]+", ";
        num = (int)(Math.random()*mats.length);
        dislikes += mats[num];
        }
        public static void genJob() {
     String[] jobs = {"Warrior","Paladin","Wizard","Shopkeeper","Courier","Archaeologist","Scribe","Imagineer","Priest","Gardener","Scribne","Messenger","Blacksmith","Metallurgist","Dancer","Scout","Familiar Caretaker","Beast Master","Fisher","hunter","Healer","Nurse","Guard","Scientist",
                           "Lawyer","Professional Appraiser","Potter","Alchemist","Mercenary","Accountant","Magician","Oracle","Seer","Night Watchman","Serial Killer","Potion Master","Aerial Scout","Artist","Spell Weaver","Hatchling Sitter","Forager","Cook","Beekeeper","Farmer","Jeweler","Seamstress",
                           "Tailor","Weaver","Mason","Writer","Carpenter","Peacemaker","Diplomat","Healer","Spy","Vault Guard","Historian","Scholar","Philosopher","Undertaker","Scryer","Matchmaker","Cartographer","Logger","Astronomer","Pirate","Botanist","Mechanic","Dentist","Nanny","Exalter",
                            "Gamekeeper","Baker","Barber","Hairdresser","Explorer","Cooper","Brewster","Butcher","Maid","Housekeeper","Tracker","Innkeeper","Cheesemaker","Aviary keeper","Silk-Worm Keeper","Spider Keeper","Shepherd","Miner","Lair Construction Crew","Leather Worker","Tanner",
                            "Potter","Spinner","Dyer","Archardist","Tree-keeper","Paper Maker","Candlemaker","Glass Blower","Kite-Maker","Brewmaster","Wine Master","Herbalist","Caravan Leader","Messenger","Exotic Dancer","Gladiator","Electrician","Engineer","Mechanic","Translator","Playwright",
                            "Composer","Trader","Chemist","Illusionist","Bard","Luthier","Actor","Embroiderer","Farrier","Haberdasher","Soap Maker","Conman","Pickpocket","Apothecary","Kennel Master","Ward Crafter","Nest Sitter","Festival Keeper","Anarchist","Bandit","Cavelier","Daredevil","Espionage",
                             "Ninja","Poacher","Knight","Musketeer","Pillager","Samurai","Savager","Seafarer","Master-At-Arms","Slayer","Viking","Ranger","Rogue","Stalker","Theif","Trapper","Zealot","Archmage","Bishop","Conjuerer","Invoker","Jinx","Lich","Mage","Magi","Mediator","Monk","Mystic",
                            "Necromancer","Occultist","Saint","Sorcerer","Sprite","Summoner","Trickster","Warlock","Wizard","Witch","Cleric","Doctor","Druid","Herbalist","Purifier","Sage","Shaman","Surgeon","Sylph","Witch Doctor","Bouncer","Lookout","Mafioso","Consigliere","Warden","Apiarist","Arborist",
                           "Collector","Deepsea Diver","Excavator","Fisher","Fletcher","Florist","Fungiculturalist","Gatherer","Gravedigger","Harvester","Hoarder","Hobbyist","Reaper","Scavenger","Adviser","Archivist","Coach","Courtier","Educator","Teacher","Librarian","Mentor","Pedagogue","Proctor",
                            "Professor","Reporter","Storyteller","Savant","Trainer","Locksmith","Woodcarver"};
      int num = (int)(Math.random()*jobs.length);
      job = jobs[num];
  }  
        public static void genFam() {
    String[] fams = {"Abyss Striker", "Amaranth Moth", "Ancient Fungus", "Arcane Sprite", "Autumn Dryad", "Baku", "Bamboo Phytocat", "Banded Owlcat", "Basilisk", "Black Dwarf Unicorn", "Black Iron Creeper", "Black Wolf", "Black-Wing Hummingbird", "Blacktalon Striker", "Blackwing Croaker", "Blooming Strangler", "Blue Dragon Reef Snail", "Blue Tang Hippogriff", "Bluefin Charger", "Bluemoon Aviar", "Blueridge Greatshell", "Bone Fiend", "Boolean", "Bramble Guardian", "Brilliant Psywurm", "Brown River Flight", "Brush Dodo", "Bucktooth Digger", "Bumble", "Candycane Xolo", "Cardinal Hippogriff", "Carmine Serthis", "Celestial Antelope", "Centaur Archer", "Charcoal Sprangyroo", "Chimera", "Chocolate Ferret", "Citrine Cave Jewel", "Cloud Chaser", "Clouddancer", "Clown Charger", "Coarsefur Yeti", "Cockatrice", "Cog Frog", "Colorburst Buttersnake", "Common Podid", "Construction Mith", "Coppercoil Creeper", "Coral Carpenter", "Corpse Cleaner", "Corundum Chameleon", "Cragbacked Bouldursa", "Crimson Emperor", "Crimson Reef Snail", "Crowned Bonepriest", "Cumulus Seal", "Cursed Bat", "Dappled Dunhoof", "Dappled Seal", "Dark-Tufted Sparrowmouse", "Darktouched Chimera", "Death Seeker", "Death's-Head Stag", "Dodo", "Double-Tailed Warcat", "Downy Fox Rat", "Dream Eater", "Driftwood Baron", "Dryad", "Dunhoof Ambassador", "Dwarf Truffle", "Dwarf Unicorn", "Earth Sprite", "Ectoplasmime", "Elk", "Ember Mouse", "Emerald Cave Jewel", "Emerald Webwing", "Ethereal Trickster", "Everglade Lasher", "Fallout Streak", "Fawn Fox Rat", "Fire Sprite", "Fluted Pukasloth", "Frost Delver", "Frostbite Hummingbird", "Fuiran", "Fungalhoof Qiriq", "Fungusbearing Phony", "Gale Wolf", "Gaseous Megashrimp", "Glossy Duskrat", "Glowing Pocket Mouse", "Golden Bantam Fangar", "Golden Idol", "Golden Porpoise", "GoldThroated Sparrow", "Granite Thresher", "Grasslands Trunker", "Graveyard Guardian", "Greater Sandstrike", "Greatshell", "Greenroot Janustrap", "Grey River Flight", "Hainu", "Harvest Floracat", "Hati", "Heartred Croaker", "Hedgehog", "Hibernal Starbear", "Hippogriff", "Hippojay", "Hoarfrost Mauler", "Hooded Dodo", "Hydra Scorpion", "Ice Sprite", "Iridescent Scaleback", "Irradiated Astronomer", "Jadecarved Decoy", "Janustrap", "Jawlocker", "Jeweled Octoflyer", "Kelp Tender", "Lavaborne Hoax", "Leafy Moth", "Light Sprite", "Lightning Sprite", "Livewire Grizzly", "Longneck Interloper", "Longneck Magi", "Longneck Mender", "Longneck Skirmisher", "Luna Mith", "Magma Embear", "Mammertee", "Maned Cobra", "Maned Rasa", "Mantarune", "Manticore", "Marbled Jester", "Maren Ambusher", "Maren Scout", "Maren Warrior", "Maren Wavesinger", "Masked Harpy", "Melprin", "Mesacliff Harpy", "Mimic Buttersnake", "Mistral Minion", "Mistwatch Shellion", "Mock Firebird", "Moordwelling Trunker", "Mottled Buttersnake", "Nature Sprite", "Nephrite Chameleon", "Nightsky Fuiran", "Nochnyr", "Noggle", "Octoflyer", "Opheodrys Serthis", "Painted Centaur", "Parasitic Fungus", "Peacock Firebird", "Peacock Scorpion", "Perching Java Sparrow", "Permafrost Impaler", "Plague Sprite", "Poisonous Toridae", "Polarfreeze Defender", "Poultrygeist", "Psywurm", "Radioactive Slime", "Ragamouse", "Rainbow Sprite", "Rambra", "Raptorik Warrior", "Red-Breasted Hainu", "Red-Footed Akirbeak", "Red-Winged Owlcat", "Relic Eel", "Renegade Aviar", "River Muck", "Rivermouth Flatbill", "Roundhorn Melprin", "Ruby Webwing", "Runic Bat", "Sakura Owl", "Salve Kamaitachi", "Scaleback", "Scarlet Flycatcher", "Scrapmetal Tracker", "Scythe Kamaitachi", "Sentinel Mith", "Serthis Alchemist", "Serthis Potionmaster", "Shadow Serpent", "Shadow Sprite", "Shale Thresher", "Shalebuck", "Shattered Serpent", "Shellion", "Shimmering Xolo", "Sickle Kamaitachi", "Silver Ferret", "Silver Springbok", "Skittering Megashrimp", "Skoll", "Skycat", "Slumbering Charlatan", "Smoke Gyre", "Smoky Bantam Fangar", "Snarling Mimic", "Snow Streak", "Snowfall Elk", "Snowsquall Floracat", "Southmarsh Podid", "Speedy", "Spellbound Golem", "Spined Cobra", "Spinel Vulstal", "Spotted Pukasloth", "Sprangyroo", "Squall Rasa", "Steam Gyre", "Steelhound", "Stone Borer", "Stonewatch Harpy", "Storm Seeker", "Strangler", "Sunbeam Ursa", "Sundial Imposter", "Sunset Lasher", "Sunspot Clouddancer", "Swallowtail Buttersnake", "Swift Lumen", "Swift Volt", "Tengu", "Tourmaline Vulstal", "Trick of the Light", "Tuxedo Floracat", "Umberhorn Qiriq", "Umbra Wolf", "Velvet Floracat", "Venerable Shalebuck", "Venomous Toridae", "Voltspire Intruder", "Warcat Protector", "Water Sprite", "Wave Sweeper", "Wildwood Owl", "Wind Sprite", "Windcarve Harpy", "Winter Wolf", "Wintermane Bowman", "Wintermane Spearman", "Woodland Turkey", "Yellow-Throated Sparrowmouse", "Zeeba"};
    int num = (int)(Math.random()*fams.length);
    fami = fams[num];  
  }
        public static void genMats(){
      String[] mats = {"Clay Fertility Statue", "Stone Fertility Statue", "Intact Clay Relief", "Intact Stone Relief", "Sanded Ash Plank", "Sanded Birch Plank", "Sanded Cedar Plank", "Sanded Pine Plank", "Intact Parchment", "Tattered Parchment", "Mangled Textile", "MothEaten Rug", "Cracked Leather", "Crumbling Leather", "Moldy Leather", "Rotting Leather", "Bronze Fabric Scrap", "Faded Blue Fabric", "Red Linen Fabric Scrap", "White Linen Fabric Scrap", "Ragged Skirmisher Scrap", "Tattered Interloper Scrap", "Broken Pottery Piece", "Shattered Ceramic Shard", "Rippling Cloth", "Seeker Broach", "Waterskin", "Tracker Engine", "Black Iron Segment", "Lumen Wiring", "Mistral Glove", "Sentinel Armor", "Fancy SilverPlated Buckle", "Iron Belt Buckle", "Rusted Iron Belt Buckle", "Wavespun Cloth", "Seeker Orb", "Toridae Chew Toy", "Volt Wiring", "Construction Armor", "Coppercoil Segment", "Spellbound Glove", "Steelhound Core", "Rusted Chain", "Arcane Runestone", "Earth Runestone", "Fire Runestone", "Ice Runestone", "Light Runestone", "Lightning Runestone", "Nature Runestone", "Plague Runestone", "Shadow Runestone", "Water Runestone", "Wind Runestone", "Ancestral Incense", "Borer Scrapmetal", "Delver Parts", "Dried Cedar Branch", "Fir Branch", "Pine Branch", "Driftwood Branch", "Ash Twigs", "Birch Twigs", "Redwood Kindling", "Ice Crystal", "Chipped Blackened Legbones", "Small Legbones", "Cracked Blackened Ribcage", "Small Ribcage", "Bone Fragments", "Chimera Fangs", "Sparrow Skull", "Squirrel Skull", "Oozing Tusk", "Slimy Tusk", "Broken Wing Bones", "Wing Bones", "Etched Tusk", "Fractured Tusk", "Ivory Tusk", "Warbeast Tusk", "Firestarter", "Glowing Pocket Bauble", "Moonglow Foxtail", "Wispy Foxtail", "Crackled Scales", "Bluestreaked Shell", "Common Podid Claws", "Elk Pelt", "Fragile Antler", "Shalebuck Horn", "Sickle Claws", "Diaphanous Wing", "Jeweled Octoflyer Beak", "Octoflyer Beak", "Twitching Leg Bones", "Unnatural Leg Bones", "Janustrap Root", "Strangling Root", "Ancient Fungus Spore", "Dwarf Truffle Spores", "Maple Leaf", "Red Maple Leaf", "Cursed Tuft of Fur", "Runed Tuft of Fur", "Fallout Streak Pinion", "Snow Streak Pinion", "Clouddancer Hide", "Sunspot Clouddancer Hide", "Beeswax", "Carpenter Wax", "Baku Tusk", "Dreameater Tusk", "Strangling Vine", "Sakura Moss", "Wildwood Moss", "Cedar Logs", "Fir Logs", "Pine Logs", "Driftwood Log", "Ash Logs", "Birch Logs", "Redwood Log", "Bonewood Log", "Bonewood Branch", "Bamboo Cluster", "Bamboo Shoot", "Fuiran Hide", "Nightsky Fuiran Hide", "Celestial Horn", "Silver Horn", "Molted Scales", "Muckbottom Shell", "Southmarsh Podid Claws", "Snowfall Elk Pelt", "Windstroked Silk Whitetail", "Reflective Fish Scales", "Tiny Feathers", "Blooming Vine", "Decorated Turtle Shell", "Painted Turtle Shell", "Turtle Shell", "Bonepriest Venom", "Shining Feather Cluster", "Jar of Slime", "Unstable Serthis Concoction", "Small Chunk of Granite", "Lithe Otter Pelt", "Webbed Paw", "Coarse Tail Hair", "Small Block of Granite", "Perfect Skipping Stone", "Skipping Stone", "Round Pebbles", "Smooth Pebbles", "Coal", "Traprock", "Dark Basalt", "Grey Basalt", "Clay", "Obsidian", "Shale", "Copper Ore", "Iron Ore", "Nickel Ore", "Cobalt Ore", "Lead Ore", "Tin Ore", "Rich Copper Ore", "Rich Iron Ore", "Rich Nickel Ore", "Gravel", "Salt", "Sand", "Gypsum", "Rosy Gypsum", "Fool's Gold", "Infused Crystal", "Hematite", "Blue Quartz", "Crystal Quartz", "Rose Quartz", "Smoky Quartz", "Frozen Rock Flow", "Igneous Flow", "Volcanic Remnants", "Magnetite", "Banded Sardonyx", "Jade", "Jasper", "Labradorite", "Silver Ore", "Brilliant Feather Cluster", "Gold Ore", "Banded Olivine", "Platinum Ore", "Banded Ironstone", "Depleted Sacridite", "Impure Sacridite", "Sacridite", "Granite Fragment"};
     int num = (int)(Math.random()*mats.length);
    item1 = mats[num];
    num = (int)(Math.random()*mats.length);
    item2 = mats[num];
    num = (int)(Math.random()*mats.length);
    item3 = mats[num];
    num = (int)(Math.random()*mats.length);
    item4 = mats[num];
  }
        public static void genAdj(){
      String[] adjs = {"Caring","Aggressive","Compassionate","Accessible","Active","Adaptable","Admirable","Adventurous","Agreeable","Alert","Allocentric","Amiable","Anticipative","Appreciative","Articulate","Aspiring","Athletic","Attractive","Balanced","Benevolent","Brilliant","Calm","Capable",
                              "Captivating","Caring","Challenging","Charismatic","Charming","Cheerful","Clean","Clear-headed","Clever","Colorful","Companionly","Compassionate","Conciliatory","Confident","Conscientious","Considerate","Constant","Contemplative","Cooperative","Courageous","Courteous",
                              "Creative","Cultured","Curious","Daring","Debonair","Decent","Decisive","Dedicated","Deep","Dignified","Directed","Disciplined","Discreet","Dramatic","Dutiful","Dynamic","Earnest","Ebullient","Educated","Efficient","Elegant","Eloquent","Empathetic","Energetic","Enthusiastic",
                              "Esthetic","Exciting","Extraordinary","Fair","Faithful","Farsighted","Felicific","Firm","Flexible","Focused","Forecful","Forgiving","Forthright","Freethinking","Friendly","Fun-loving","Gallant","Generous","Gentle","Genuine","Good-natured","Gracious","Hardworking","Healthy",
                              "Hearty","Helpful","Herioc","High-minded","Honest","Honorable","Humble","Humorous","Idealistic","Imaginative","Impressive","Incisive","Incorruptible","Independent","Individualistic","Innovative","Inoffensive","Insightful","Insouciant","Intelligent","Intuitive","Invulnerable",
                              "Kind","Knowledge","Leaderly","Leisurely","Liberal","Logical","Lovable","Loyal","Lyrical","Magnanimous","Many-sided","Masculine  (Manly)","Mature","Methodical","Maticulous","Moderate","Modest","Multi-leveled","Neat","Nonauthoritarian","Objective","Observant","Open","Optimistic",
                              "Orderly","Organized","Original","Painstaking","Passionate","Patient","Patriotic","Peaceful","Perceptive","Perfectionist","Personable","Persuasive","Planful","Playful","Polished","Popular","Practical","Precise","Principled","Profound","Protean","Protective","Providential",
                              "Prudent","Punctual","Pruposeful","Rational","Realistic","Reflective","Relaxed","Reliable","Resourceful","Respectful","Responsible","Responsive","Reverential","Romantic","Rustic","Sage","Sane","Scholarly","Scrupulous","Secure","Selfless","Self-critical","Self-defacing",
                              "Self-denying","Self-reliant","Self-sufficent","Sensitive","Sentimental","Seraphic","Serious","Sexy","Sharing","Shrewd","Simple","Skillful","Sober","Sociable","Solid","Sophisticated","Spontaneous","Sporting","Stable","Steadfast","Steady","Stoic","Strong","Studious","Suave",
                              "Subtle","Sweet","Sympathetic","Systematic","Tasteful","Teacherly","Thorough","Tidy","Tolerant","Tractable","Trusting","Uncomplaining","Understanding","Undogmatic","Unfoolable","Upright","Urbane","Venturesome","Vivacious","Warm","Well-bred","Well-read","Well-rounded","Winning",
                              "Wise","Witty","Youthful","Absentminded","Aggressive","Ambitious","Amusing","Artful","Ascetic","Authoritarian","Big-thinking","Boyish","Breezy","Businesslike","Busy","Casual","Crebral","Chummy","Circumspect","Competitive","Complex","Confidential","Conservative","Contradictory",
                              "Crisp","Cute","Deceptive","Determined","Dominating","Dreamy","Driving","Droll","Dry","Earthy","Effeminate","Emotional","Enigmatic","Experimental","Familial","Folksy","Formal","Freewheeling","Frugal","Glamorous","Guileless","High-spirited","Huried","Hypnotic","Iconoclastic",
                              "Idiosyncratic","Impassive","Impersonal","Impressionable","Intense","Invisible","Irreligious","Irreverent","Maternal","Mellow","Modern","Moralistic","Mystical","Neutral","Noncommittal","Noncompetitive","Obedient","Old-fashined","Ordinary","Outspoken","Paternalistic","Physical",
                              "Placid","Political","Predictable","Preoccupied","Private","Progressive","Proud","Pure","Questioning","Quiet","Religious","Reserved","Restrained","Retiring","Sarcastic","Self-conscious","Sensual","Skeptical","Smooth","Soft","Solemn","Solitary","Stern","Stoiid","Strict",
                              "Stubborn","Stylish","Subjective","Surprising","Soft","Tough","Unaggressive","Unambitious","Unceremonious","Unchanging","Undemanding","Unfathomable","Unhurried","Uninhibited","Unpatriotic","Unpredicatable","Unreligious","Unsentimental","Whimsical","Abrasive","Abrupt",
                              "Agonizing","Aimless","Airy","Aloof","Amoral","Angry","Anxious","Apathetic","Arbitrary","Argumentative","Arrogantt","Artificial","Asocial","Assertive","Astigmatic","Barbaric","Bewildered","Bizarre","Bland","Blunt","Biosterous","Brittle","Brutal","Calculating","Callous",
                              "Cantakerous","Careless","Cautious","Charmless","Childish","Clumsy","Coarse","Cold","Colorless","Complacent","Complaintive","Compulsive","Conceited","Condemnatory","Conformist","Confused","Contemptible","Conventional","Cowardly","Crafty","Crass","Crazy","Criminal",
                              "Critical","Crude","Cruel","Cynical","Decadent","Deceitful","Delicate","Demanding","Dependent","Desperate","Destructive","Devious","Difficult","Dirty","Disconcerting","Discontented","Discouraging","Discourteous","Dishonest","Disloyal","Disobedient","Disorderly",
                              "Disorganized","Disputatious","Disrespectful","Disruptive","Dissolute","Dissonant","Distractible","Disturbing","Dogmatic","Domineering","Dull","Easily Discouraged","Egocentric","Enervated","Envious","Erratic","Escapist","Excitable","Expedient","Extravagant","Extreme",
                              "Faithless","False","Fanatical","Fanciful","Fatalistic","Fawning","Fearful","Fickle","Fiery","Fixed","Flamboyant","Foolish","Forgetful","Fraudulent","Frightening","Frivolous","Gloomy","Graceless","Grand","Greedy","Grim","Gullible","Hateful","Haughty","Hedonistic","Hesitant",
                              "Hidebound","High-handed","Hostile","Ignorant","Imitative","Impatient","Impractical","Imprudent","Impulsive","Inconsiderate","Incurious","Indecisive","Indulgent","Inert","Inhibited","Insecure","Insensitive","Insincere","Insulting","Intolerant","Irascible","Irrational",
                              "Irresponsible","Irritable","Lazy","Libidinous","Loquacious","Malicious","Mannered","Mannerless","Mawkish","Mealymouthed","Mechanical","Meddlesome","Melancholic","Meretricious","Messy","Miserable","Miserly","Misguided","Mistaken","Money-minded","Monstrous","Moody","Morbid",
                              "Muddle-headed","Naive","Narcissistic","Narrow","Narrow-minded","Natty","Negativistic","Neglectful","Neurotic","Nihilistic","Obnoxious","Obsessive","Obvious","Odd","Offhand","One-dimensional","One-sided","Opinionated","Opportunistic","Oppressed","Outrageous","Overimaginative",
                              "Paranoid","Passive","Pedantic","Perverse","Petty","Pharissical","Phlegmatic","Plodding","Pompous","Possessive","Power-hungry","Predatory","Prejudiced","Presumptuous","Pretentious","Prim","Procrastinating","Profligate","Provocative","Pugnacious","Puritanical","Quirky","Reactionary",
                              "Reactive","Regimental","Regretful","Repentant","Repressed","Resentful","Ridiculous","Rigid","Ritualistic","Rowdy","Ruined","Sadistic","Sanctimonious","Scheming","Scornful","Secretive","Sedentary","Selfish","Self-indulgent","Shallow","Shortsighted","Shy","Silly","Single-minded",
                              "Sloppy","Slow","Sly","Small-thinking","Softheaded","Sordid","Steely","Stiff","Strong-willed","Stupid","Submissive","Superficial","Superstitious","Suspicious","Tactless","Tasteless","Tense","Thievish","Thoughtless","Timid","Transparent","Treacherous","Trendy","Troublesome",
                              "Unappreciative","Uncaring","Uncharitable","Unconvincing","Uncooperative","Uncreative","Uncritical","Unctuous","Undisciplined","Unfriendly","Ungrateful","Unhealthy","Unimaginative","Unimpressive","Unlovable","Unpolished","Unprincipled","Unrealistic","Unreflective","Unreliable",
                              "Unrestrained","Unself-critical","Unstable","Vacuous","Vague","Venal","Venomous","Vindictive","Vulnerable","Weak","Weak-willed","Well-meaning","Willful","Wishful","Zany"};
    int num = (int)(Math.random()*adjs.length);
    adj1 = adjs[num];
    num = (int)(Math.random()*adjs.length);
    adj2 = adjs[num];
    num = (int)(Math.random()*adjs.length);
    adj3 = adjs[num];
    num = (int)(Math.random()*adjs.length);
    adj4 = adjs[num];
  }  
        public static void genStats(){
      int num = (int)(Math.random()*10);
      Str = num;
      num = (int)(Math.random()*10);
      Agl = num;
      num = (int)(Math.random()*10);
      Int = num;
      num = (int)(Math.random()*10);
      Vit = num;
      num = (int)(Math.random()*10);
      Luck = num;      
  }
   
        
        
        
        public static String makeBio() {
            makeBooks();
            hb = div.get(hb);
            
            String bio = "[Columns][center]"+makeAvie(DraID)+"\n" +
    "\n"+ali.get(Ali1)+
    "\n"+ali.get(Ali2)+
    "\n"+gen.get(gender)+
    "\n"+rom.get(romantic)+               
    "\n"+ori.get(sexuality)+
    "\n"+hor.get(makeWestern(bday))+
    "\n"+chi.get(byear)+
    "\n[item="+fami+"]"+
"\n" +
"\n" +
"\n" +
"[nextcol][font=Franklin Gothic Medium][Color=#000000][size=6][b]"+name+"[color=#c4c4c4] - [color=#000000]"+job+"[/b][/size]\n" +
"-----\n" +
"[right][Color=#000000][b][i]"+quote+"[/right]\n" +
"-----\n" +
"[columns][center][b][color=#c4c4c4]-[Color=#000000]STATS[color=#c4c4c4]-[/b][/center]\n" +
            

  "\n-----\n[center][size=2][Color=#000000]STR.\n"+
     makeStats(Str)[0]+"[color=#c4c4c4]"+makeStats(Str)[1]+
     "[/color]\n[color=#000000]AGL.\n"+
     makeStats(Agl)[0]+"[color=#c4c4c4]"+makeStats(Agl)[1]+
     "[/color]\n[color=#000000]INT.\n"+
     makeStats(Int)[0]+"[color=#c4c4c4]"+makeStats(Int)[1]+
     "[/color]\n[color=#000000]VIT.\n"+
     makeStats(Vit)[0]+"[color=#c4c4c4]"+makeStats(Vit)[1]+
     "[/color]\n[color=#000000]LUCK.\n"+
     makeStats(Luck)[0]+"[color=#c4c4c4]"+makeStats(Luck)[1];

bio += "\n" +
        "\n\n\n" +
        "[center][b][color=#c4c4c4]-[Color=#000000]BIRTH[color=#c4c4c4]-[/b][/center]\n" +
        "----------\n" +
        ""+fli.get(BirFli)+"\n" +
        "\n" +
        "\n" +
        "\n" +
        "\n" +
        "[center][b][color=#c4c4c4]-[Color=#000000]MATE[color=#c4c4c4]-[/b][/center]\n" +
        "-----\n" +
        ""+makeAvie(mateID)+"\n" +
        "\n" +
        "\n" +
        "\n" +
        "[center][b][color=#c4c4c4]-[Color=#000000]BFF[color=#c4c4c4]-[/b][/center]\n" +
        "----------\n" +
        ""+makeAvie(friendID)+"\n" +
        "\n" +
        "\n" +
        "\n" +
        "[nextcol]\n" +
        "[center][b][color=#c4c4c4]-[Color=#000000]INFO[color=#c4c4c4]-[/b]\n" +
        ""+hb+"[/center]\n" +
        "[columns][size=3][font=helvetica][b]Name:[/b] "+name+"\n" +
        "[b]Nickname[/b]: "+nickname+"\n" +
        "[b]Age:[/b] "+age+" \n" +
        "[b]Gender:[/b] "+gender+"\n" +
        "[b]Pronouns:[/b] "+pronouns+"\n" +
        "[b]Romantic:[/b] "+romantic+"\n" +
        "[b]Sexuality:[/b] "+sexuality+" \n[color=transparent]RomanticaaGayaromanticaa[/color][nextcol][size=3][font=helvetica][b]Mate:[/b] [url=http://flightrising.com/main.php?dragon="+mateID+"]"+matename+"[/url]\n" +
        "[b]Friends:[/b] [url=http://flightrising.com/main.php?dragon="+friendID+"]"+friendname+"[/url]\n" +
        "[b]Enemies:[/b] [url=http://flightrising.com/main.php?dragon="+enemyID+"]"+enemyname+"[/url]\n" +
        "\n" +
        "[b]Likes:[/b] "+likes+"\n" +
        "[b]Dislikes:[/b] "+dislikes+"[/columns][b]Hobbies:[/b] "+hobbies+" \n" +
        "\n" +
        "\n" +
        "[center][color=#c4c4c4]✦[Color=#000000]"+adj1+"[color=#c4c4c4] | [Color=#000000]"+adj2+"[color=#c4c4c4] | [Color=#000000]"+adj3+"[color=#c4c4c4] | [Color=#000000]"+adj4+"[color=#c4c4c4]✦[/size][/center][color=#000000]\n" +
        "\n" +
"[center][b][color=#c4c4c4]-[Color=#000000]BIO[color=#c4c4c4]-[/b]\n" +
""+hb+"[/center]\n" +
"[color=transparent]xxxxxx[/color] " +desc+
"\n\n" +
"\n" +
"\n" +
"[center][b][color=#c4c4c4]-[Color=#000000]ART[color=#c4c4c4]-[/b]\n" +
""+hb+"[/center]\n" +
"\n" +
"\n" +
"\n" +
"\n" +
"\n" +
"\n" +
"[center][b][color=#c4c4c4]-[Color=#000000]HOARD[color=#c4c4c4]-[/b]\n" +
""+hb+"[/center]\n" +
"[columns][item="+item1+"][nextcol][item="+item2+"][nextcol][item="+item3+"][nextcol][item="+item4+"]\n" +
"\n" +
"[/columns][/columns][/columns]";
            
            return bio;
        }
        
    }