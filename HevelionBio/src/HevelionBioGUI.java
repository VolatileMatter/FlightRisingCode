/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Isabel
 */
public class HevelionBioGUI extends javax.swing.JFrame {

    /**
     * Creates new form HevelionBioGUI
     */
    static bio current = new bio();
    public HevelionBioGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        NameField = new javax.swing.JTextField();
        Adj1Field = new javax.swing.JTextField();
        Adj2Field = new javax.swing.JTextField();
        Adj3Field = new javax.swing.JTextField();
        Adj4Field = new javax.swing.JTextField();
        LongField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        BioField = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        StatusField = new javax.swing.JTextField();
        AgeField = new javax.swing.JTextField();
        BirthField = new javax.swing.JTextField();
        MateField = new javax.swing.JTextField();
        RelativesField = new javax.swing.JTextField();
        FriendsField = new javax.swing.JTextField();
        AcField = new javax.swing.JTextField();
        HomeField = new javax.swing.JTextField();
        LikesField = new javax.swing.JTextField();
        DislikesField = new javax.swing.JTextField();
        HobbiesField = new javax.swing.JTextField();
        AllegField = new javax.swing.JTextField();
        AlliesField = new javax.swing.JTextField();
        EnemiesField = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        ShortQuoteField = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        TSTitleField = new javax.swing.JTextField();
        TSLinkField = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        GenerateButton = new javax.swing.JButton();
        RandomButton = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        CodeField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        NameField.setText("Unnamed");
        NameField.setBorder(javax.swing.BorderFactory.createTitledBorder("Name"));

        Adj1Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Adjective 1"));

        Adj2Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Adjective 2"));

        Adj3Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Adjective 3"));

        Adj4Field.setBorder(javax.swing.BorderFactory.createTitledBorder("Adjective 4"));

        LongField.setText("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum viverra ultrices nisi ut sollicitudin. Etiam vestibulum et nulla nec tincidunt.");
        LongField.setBorder(javax.swing.BorderFactory.createTitledBorder("Long One-Line Quote"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Adj1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Adj2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Adj3Field, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Adj4Field, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LongField, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Adj1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Adj2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Adj3Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Adj4Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(NameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LongField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        BioField.setColumns(20);
        BioField.setLineWrap(true);
        BioField.setRows(5);
        BioField.setText("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum viverra ultrices nisi ut sollicitudin. Etiam vestibulum et nulla nec tincidunt. Donec sollicitudin, mauris eget accumsan vehicula, nulla risus mollis justo, non sollicitudin erat purus at ligula. Ut dui sem, molestie quis diam quis, scelerisque congue magna. Donec varius diam urna, at convallis magna ultrices rhoncus. Vivamus quis accumsan diam. Duis in mauris turpis. Proin pulvinar nisl augue, vel mollis orci fermentum quis. Nullam eget luctus sapien.");
        BioField.setWrapStyleWord(true);
        BioField.setBorder(javax.swing.BorderFactory.createTitledBorder("Bio Text"));
        jScrollPane2.setViewportView(BioField);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        StatusField.setText("Healthy");
        StatusField.setToolTipText("");
        StatusField.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Status"));

        AgeField.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Age"));

        BirthField.setBorder(javax.swing.BorderFactory.createTitledBorder("Time of Birth"));

        MateField.setText("None");
        MateField.setBorder(javax.swing.BorderFactory.createTitledBorder("Mate"));

        RelativesField.setText("None");
        RelativesField.setBorder(javax.swing.BorderFactory.createTitledBorder("Relatives"));

        FriendsField.setText("None");
        FriendsField.setBorder(javax.swing.BorderFactory.createTitledBorder("Friends"));

        AcField.setText("Unknown");
        AcField.setBorder(javax.swing.BorderFactory.createTitledBorder("Acquisition"));

        HomeField.setText("Unknown");
        HomeField.setBorder(javax.swing.BorderFactory.createTitledBorder("Home Clan"));

        LikesField.setBorder(javax.swing.BorderFactory.createTitledBorder("Likes"));

        DislikesField.setBorder(javax.swing.BorderFactory.createTitledBorder("Dislikes"));

        HobbiesField.setBorder(javax.swing.BorderFactory.createTitledBorder("Hobbies"));

        AllegField.setBorder(javax.swing.BorderFactory.createTitledBorder("Allegiance"));

        AlliesField.setBorder(javax.swing.BorderFactory.createTitledBorder("Allies"));

        EnemiesField.setBorder(javax.swing.BorderFactory.createTitledBorder("Enemies"));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(AllegField)
                    .addComponent(LikesField)
                    .addComponent(RelativesField)
                    .addComponent(StatusField, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AgeField)
                            .addComponent(FriendsField, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(DislikesField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BirthField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MateField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(HomeField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AcField)))
                            .addComponent(HobbiesField)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(AlliesField, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(EnemiesField, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(AgeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BirthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AcField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(StatusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RelativesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(FriendsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(MateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(HomeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LikesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DislikesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(HobbiesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AllegField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EnemiesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AlliesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ShortQuoteField.setColumns(20);
        ShortQuoteField.setLineWrap(true);
        ShortQuoteField.setRows(5);
        ShortQuoteField.setText("Lorem ipsum\ndolor sit amet\nMauris eget\nnulla risus");
        ShortQuoteField.setWrapStyleWord(true);
        ShortQuoteField.setBorder(javax.swing.BorderFactory.createTitledBorder("Short Paragraph Quote"));
        jScrollPane4.setViewportView(ShortQuoteField);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        TSTitleField.setText("Themesong");
        TSTitleField.setBorder(javax.swing.BorderFactory.createTitledBorder("Themesong Title"));

        TSLinkField.setText("https://www.youtube.com/?feature=youtu.be");
        TSLinkField.setBorder(javax.swing.BorderFactory.createTitledBorder("Themesong Link"));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TSTitleField)
                    .addComponent(TSLinkField))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TSTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TSLinkField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        GenerateButton.setText("Generate");
        GenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateButtonActionPerformed(evt);
            }
        });

        RandomButton.setText("Random");
        RandomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomButtonActionPerformed(evt);
            }
        });

        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        CodeField.setColumns(20);
        CodeField.setLineWrap(true);
        CodeField.setRows(5);
        CodeField.setWrapStyleWord(true);
        jScrollPane3.setViewportView(CodeField);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(GenerateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RandomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExitButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GenerateButton)
                    .addComponent(RandomButton)
                    .addComponent(ClearButton)
                    .addComponent(ExitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateButtonActionPerformed
        // TODO add your handling code here:
        current.setAc(AcField.getText()); 
        current.setAdjs(0, Adj1Field.getText()); current.setAdjs(1, Adj2Field.getText()); current.setAdjs(2, Adj3Field.getText()); current.setAdjs(3, Adj4Field.getText()); 
        current.setAge(AgeField.getText()); 
        current.setAlleg(AllegField.getText()); 
        current.setAllies(AlliesField.getText());
        current.setBiotxt(BioField.getText()); 
        current.setBirth(BirthField.getText()); 
        current.setDislikes(DislikesField.getText()); 
        current.setEnemies(EnemiesField.getText()); 
        current.setFriends(FriendsField.getText()); 
        current.setHobbies(HobbiesField.getText());
        current.setHome(HomeField.getText()); 
        current.setLikes(LikesField.getText()); 
        current.setLongquote(LongField.getText());
        current.setMate(MateField.getText()); 
        current.setName(NameField.getText());
        current.setRelatives(RelativesField.getText()); 
        current.setShortquote(ShortQuoteField.getText());
        current.setThemelink(TSLinkField.getText()); 
        current.setThemename(TSTitleField.getText());    
        
        
        /*AgeField.setText(current.getAge()); StatusField.setText(current.getStatus()); LikesField.setText(current.getLikes());
        DislikesField.setText(current.getDislikes()); HobbiesField.setText(current.getHobbies());  AllegField.setText(current.getAlleg());
        AlliesField.setText(current.getAllies()); EnemiesField.setText(current.getEnemies()); NameField.setText(current.getName());
        Adj1Field.setText(current.getAdjs(0)); Adj2Field.setText(current.getAdjs(1)); Adj3Field.setText(current.getAdjs(2)); Adj4Field.setText(current.getAdjs(3));*/
        
        
        
        CodeField.setText(current.makeBio());
    }//GEN-LAST:event_GenerateButtonActionPerformed

    private void RandomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomButtonActionPerformed
    String[] time = {"days","months","hours","weeks","years","centuries","decades","eons"};
    String[] status = {"Healthy","Sick","Dead","Fatigued"};
    String[] likes = {"Fruit Leather", "Candied Orange Peels", "Incense", "Candles", "Silkes", "Large Pillows", "Furs", "Carved Bones", "Succulent", "Warm Baths", "Chocolate", "Tapestries", "Wooden Carvings", "Leathers", "Feathers", "Gemstones", "Paintings", "Bath Salts", "Candied Nuts", "Hookah", "Tea", "Fossil Collecting", "Pottery", "Chinese Food", "Japanese Food", "Super Cold / Raining Outside And I'M Inside", "Nature", "Fantasy", "Science", "Art", "(Character)", "Food", "(Food)", "Hot Drinks", "Diving", "(Deity)", "Dresses", "Glitches", "Computers", "Viruses", "Pinapples", "Pens", "Fountain Pens", "Fountains", "Pine Trees", "Trees", "Hiking In The Mountains", "Creeks", "Dragons", "Mythology", "Rainy Days", "Sunny Days", "Swimming", "Writing", "Painting With Watercolor", "Animals", "Playing In Snow", "Camping", "The Smell Of Rain The Forest", "Lanterns", "Mason Jars", "Victorian Era Things", "Steampunk", "Traveling", "(Color)", "Dappled Sunlight", "Jellyfish", "Aquariums", "Zoos", "Museums", "Christmas Lights", "(Song)", "Hot Chocolate", "Playing In The Snow With Friends", "Finishing A Piece Of Writing Or Art", "Browsing National Geographic", "Video Games", "Sewing", "Snow", "Anime", "Anime Conventions", "Pets", "Pandas", "Books", "Cats", "Vintage Items", "Phoenixes", "Making Crafts", "Cuddling", "Music", "Long Walks", "Dogs", "Sweaters", "Summer", "Winter", "Spring", "Sweet Tea", "Smiling", "Laughing", "Jokes", "Long Hair", "Good Vibes", "Day Dreaming", "Reading", "Sleeping", "Blogging", "Photography", "Fuzzy Blankets", "Kissing", "Sex", "Hugs", "Hand Holding", "Money", "Clothes", "Football", "Basketball", "Baseball", "Kickball", "Dodge Ball", "Concerts", "Partying", "Drinking", "Weed", "Drugs", "Guys", "Girls", "Texting", "Dancing", "Shoes", "Fashion", "Acting", "Modeling", "Helping Others", "Kissing In The Rain", "Painting", "Drawing", "Horror Movies", "Romantic Movies", "Comedies", "Ice Cold Water", "Instant Tea", "Vivaldi", "Rap Music", "Bruegel & Vermeer", "Picasso", "Room Service", "Waiting", "Siena", "Mixed Vegetables", "Leonard Cohen’S Lyrics", "Ambulance Sirens", "Candles", "Telephone Solicitations", "Kites", "Junk Mail", "Apples", "Insurance", "All Things Apple", "Being Put On “Hold”", "Chocolate", "Colorized Movies", "Rainbows", "Strawberries", "Used Book Stores", "Crickets", "Good Manners", "“Sucks”", "Handmade Quilts", "Daily Oklahoman", "Mice", "Jewelry", "Rolypoly Bugs", "Lapel Buttons", "Reruns", "Quotations", "Know-It-All’S", "“Slasher” Films", "Boiled Okra", "Shakespeare", "The Simpsons", "Post-It Notes", "Whining", "Garden Tomatoes", "Cigarettes", "Comfortable Shoes", "New Shoes", "Gossip", "Elmer’S Glue", "Cartridge Pens", "Snoring", "Mystery", "Whistling", "Quiet", "Trivial Trivia", "Chinese Elms", "Golf", "Roses", "Elvis Presley", "Body Hair", "Body Odor", "Germs", "Liars", "Hypocrites", "Drama", "Studying", "Being Alone", "Crowded Rooms", "People", "Mushrooms", "Bugs", "Wet Socks", "Crying", "Being Touched", "Rain", "Thunder Storms", "The Cold", "The Heat", "Fall", "Water", "School", "Sweating", "(Movie)", "(Artist)", "(Actor/Actress)", "Smoking", "Cheaters", "Kids", "Sad Movies", "Annoying People", "Puking", "Being Sick", "Rough Textures", "Funerals", "Boats", "Airplanes"};
    String[] jobs = {"Tinker", "Accountant", "Actor", "Adviser", "Adviser", "Aerial Scout", "Alchemist", "Anarchist", "Apiarist", "Apiarist", "Apothecary", "Aquarist", "Arborist", "Arborist", "Arcanist", "Archaeologist", "Archardist", "Archivist", "Archivist", "Archmage", "Artist", "Astronmer", "Astronomer", "Aviary Keeper", "Baker", "Bandit", "Barber", "Bard", "Beast Master", "Beekeeper", "Bishop", "Blacksmith", "Borderwatching", "Botanist", "Bouncer", "Brewmaster", "Brewster", "Butcher", "Candlemaker", "Caravan Leader", "Carpenter", "Cartographer", "Cavelier", "Cheesemaker", "Chef", "Chemist", "Cleric", "Coach", "Coach", "Collector", "Collector", "Composer", "Conjuerer", "Conman", "Consigliere", "Cook", "Cooper", "Counselor", "Courier", "Courier", "Courtier", "Courtier", "Dancer", "Daredevil", "Dark Illusionists", "Deepsea Diver", "Deepsea Diver", "Dentist", "Diplomat", "Doctor", "Druid", "Dyer", "Educator", "Educator", "Electrician", "Embroiderer", "Engineer", "Espionage", "Exalter", "Excavator", "Excavator", "Exotic Dancer", "Explorer", "Familiar Caretaker", "Farmer", "Farrier", "Fashion Designer", "Festival Keeper", "Fisher", "Fisher", "Fletcher", "Fletcher", "Florist", "Florist", "Forager", "Fortune-Teller", "Fungiculturalist", "Fungiculturalist", "Gamekeeper", "Gardener", "Gatherer", "Gatherer", "Genealogist", "Gladiator", "Glass Blower", "Gravedigger", "Gravedigger", "Guard", "Haberdasher", "Hairdresser", "Harvester", "Harvester", "Hatchling Sitter", "Healer", "Herbalist", "Herbologist", "Historian", "Hoarder", "Hoarder", "Hobbyist", "Hobbyist", "Housekeeper", "Hunter", "Illusionist", "Imagineer", "Innkeeper", "Invoker", "Jeweler", "Jinx", "Kennel Master", "Kennel Masters", "Kite-Maker", "Knickknack Maker", "Knight", "Lair Construction Crew", "Lawyer", "Leather Worker", "Librarian", "Librarian", "Lich", "Locksmith", "Locksmith", "Logger", "Lookout", "Luthier", "Mafioso", "Mage", "Magi", "Magician", "Maid", "Mason", "Master-At-Arms", "Matchmaker", "Mathematician", "Mechanic", "Mediator", "Mentor", "Mentor", "Mercenary", "Merchant", "Messenger", "Metallurgist", "Microbiologist", "Miner", "Mineralogist", "Monk", "Muscian", "Musketeer", "Mycologist", "Mystic", "Nanny", "Necromancer", "Nest Sitter", "Night Watchman", "Ninja", "Novelist", "Nurse", "Occultist", "Optician", "Oracle", "Paladin", "Paper Maker", "Peacemaker", "Pedagogue", "Pedagogue", "Philosopher", "Pickpocket", "Pillager", "Piolot", "Pirate", "Playwright", "Poacher", "Poet", "Potion Master", "Potter", "Prankster", "Priest", "Proctor", "Proctor", "Professional Appraiser", "Professional Racer", "Professor", "Professor", "Purifier", "Ranger", "Reaper", "Reaper", "Reporter", "Reporter", "Ritualist", "Rogue", "Sage", "Saint", "Salsedragon", "Samurai", "Savager", "Savant", "Savant", "Scavenger", "Scavenger", "Scholar", "Scientist", "Scout", "Scribe", "Scribne", "Scryer", "Seafarer", "Seamstress", "Seer", "Serial Killer", "Shaman", "Shepherd", "Ship Captain", "Shopkeeper", "Silk-Worm Keeper", "Slayer", "Soap Maker", "Sorcerer", "Spell Weaver", "Spellcaster", "Spider Keeper", "Spinner", "Sprite", "Spy", "Stalker", "Storyteller", "Storyteller", "Summoner", "Surgeon", "Sylph", "Tailor", "Tanner", "Teacher", "Teacher", "Theif", "Tracker", "Trader", "Trainer", "Trainer", "Translator", "Trap Maker", "Trapper", "Treasurer", "Tree-Keeper", "Trickster", "Undertaker", "Vault Guard", "Viking", "Volcanologist", "Ward Crafter", "Warden", "Warden", "Warlock", "Warrior", "Weaver", "Wine Master", "Witch", "Witch Doctor", "Wizard", "Woodcarver", "Woodcarver", "Writer", "Zealot"};
    String[] flight = {"Earth", "Fire", "Wind", "Water", "Lightning", "Ice", "Plague", "Nature", "Light", "Shadow", "Arcane"};
    String[] adjs = {"Caring","Aggressive","Compassionate","Accessible","Active","Adaptable","Admirable","Adventurous","Agreeable","Alert","Allocentric","Amiable","Anticipative","Appreciative","Articulate","Aspiring","Athletic","Attractive","Balanced","Benevolent","Brilliant","Calm","Capable", "Captivating","Caring","Challenging","Charismatic","Charming","Cheerful","Clean","Clear-headed","Clever","Colorful","Companionly","Compassionate","Conciliatory","Confident","Conscientious","Considerate","Constant","Contemplative","Cooperative","Courageous","Courteous","Creative","Cultured","Curious","Daring","Debonair","Decent","Decisive","Dedicated","Deep","Dignified","Directed","Disciplined","Discreet","Dramatic","Dutiful","Dynamic","Earnest","Ebullient","Educated","Efficient","Elegant","Eloquent","Empathetic","Energetic","Enthusiastic","Esthetic","Exciting","Extraordinary","Fair","Faithful","Farsighted","Felicific","Firm","Flexible","Focused","Forecful","Forgiving","Forthright","Freethinking","Friendly","Fun-loving","Gallant","Generous","Gentle","Genuine","Good-natured","Gracious","Hardworking","Healthy","Hearty","Helpful","Herioc","High-minded","Honest","Honorable","Humble","Humorous","Idealistic","Imaginative","Impressive","Incisive","Incorruptible","Independent","Individualistic","Innovative","Inoffensive","Insightful","Insouciant","Intelligent","Intuitive","Invulnerable","Kind","Knowledge","Leaderly","Leisurely","Liberal","Logical","Lovable","Loyal","Lyrical","Magnanimous","Many-sided","Masculine  (Manly)","Mature","Methodical","Maticulous","Moderate","Modest","Multi-leveled","Neat","Nonauthoritarian","Objective","Observant","Open","Optimistic","Orderly","Organized","Original","Painstaking","Passionate","Patient","Patriotic","Peaceful","Perceptive","Perfectionist","Personable","Persuasive","Planful","Playful","Polished","Popular","Practical","Precise","Principled","Profound","Protean","Protective","Providential","Prudent","Punctual","Pruposeful","Rational","Realistic","Reflective","Relaxed","Reliable","Resourceful","Respectful","Responsible","Responsive","Reverential","Romantic","Rustic","Sage","Sane","Scholarly","Scrupulous","Secure","Selfless","Self-critical","Self-defacing","Self-denying","Self-reliant","Self-sufficent","Sensitive","Sentimental","Seraphic","Serious","Sexy","Sharing","Shrewd","Simple","Skillful","Sober","Sociable","Solid","Sophisticated","Spontaneous","Sporting","Stable","Steadfast","Steady","Stoic","Strong","Studious","Suave","Subtle","Sweet","Sympathetic","Systematic","Tasteful","Teacherly","Thorough","Tidy","Tolerant","Tractable","Trusting","Uncomplaining","Understanding","Undogmatic","Unfoolable","Upright","Urbane","Venturesome","Vivacious","Warm","Well-bred","Well-read","Well-rounded","Winning","Wise","Witty","Youthful","Absentminded","Aggressive","Ambitious","Amusing","Artful","Ascetic","Authoritarian","Big-thinking","Boyish","Breezy","Businesslike","Busy","Casual","Crebral","Chummy","Circumspect","Competitive","Complex","Confidential","Conservative","Contradictory","Crisp","Cute","Deceptive","Determined","Dominating","Dreamy","Driving","Droll","Dry","Earthy","Effeminate","Emotional","Enigmatic","Experimental","Familial","Folksy","Formal","Freewheeling","Frugal","Glamorous","Guileless","High-spirited","Huried","Hypnotic","Iconoclastic","Idiosyncratic","Impassive","Impersonal","Impressionable","Intense","Invisible","Irreligious","Irreverent","Maternal","Mellow","Modern","Moralistic","Mystical","Neutral","Noncommittal","Noncompetitive","Obedient","Old-fashined","Ordinary","Outspoken","Paternalistic","Physical","Placid","Political","Predictable","Preoccupied","Private","Progressive","Proud","Pure","Questioning","Quiet","Religious","Reserved","Restrained","Retiring","Sarcastic","Self-conscious","Sensual","Skeptical","Smooth","Soft","Solemn","Solitary","Stern","Stoiid","Strict","Stubborn","Stylish","Subjective","Surprising","Soft","Tough","Unaggressive","Unambitious","Unceremonious","Unchanging","Undemanding","Unfathomable","Unhurried","Uninhibited","Unpatriotic","Unpredicatable","Unreligious","Unsentimental","Whimsical","Abrasive","Abrupt","Agonizing","Aimless","Airy","Aloof","Amoral","Angry","Anxious","Apathetic","Arbitrary","Argumentative","Arrogantt","Artificial","Asocial","Assertive","Astigmatic","Barbaric","Bewildered","Bizarre","Bland","Blunt","Biosterous","Brittle","Brutal","Calculating","Callous","Cantakerous","Careless","Cautious","Charmless","Childish","Clumsy","Coarse","Cold","Colorless","Complacent","Complaintive","Compulsive","Conceited","Condemnatory","Conformist","Confused","Contemptible","Conventional","Cowardly","Crafty","Crass","Crazy","Criminal","Critical","Crude","Cruel","Cynical","Decadent","Deceitful","Delicate","Demanding","Dependent","Desperate","Destructive","Devious","Difficult","Dirty","Disconcerting","Discontented","Discouraging","Discourteous","Dishonest","Disloyal","Disobedient","Disorderly","Disorganized","Disputatious","Disrespectful","Disruptive","Dissolute","Dissonant","Distractible","Disturbing","Dogmatic","Domineering","Dull","Easily Discouraged","Egocentric","Enervated","Envious","Erratic","Escapist","Excitable","Expedient","Extravagant","Extreme","Faithless","False","Fanatical","Fanciful","Fatalistic","Fawning","Fearful","Fickle","Fiery","Fixed","Flamboyant","Foolish","Forgetful","Fraudulent","Frightening","Frivolous","Gloomy","Graceless","Grand","Greedy","Grim","Gullible","Hateful","Haughty","Hedonistic","Hesitant","Hidebound","High-handed","Hostile","Ignorant","Imitative","Impatient","Impractical","Imprudent","Impulsive","Inconsiderate","Incurious","Indecisive","Indulgent","Inert","Inhibited","Insecure","Insensitive","Insincere","Insulting","Intolerant","Irascible","Irrational","Irresponsible","Irritable","Lazy","Libidinous","Loquacious","Malicious","Mannered","Mannerless","Mawkish","Mealymouthed","Mechanical","Meddlesome","Melancholic","Meretricious","Messy","Miserable","Miserly","Misguided","Mistaken","Money-minded","Monstrous","Moody","Morbid","Muddle-headed","Naive","Narcissistic","Narrow","Narrow-minded","Natty","Negativistic","Neglectful","Neurotic","Nihilistic","Obnoxious","Obsessive","Obvious","Odd","Offhand","One-dimensional","One-sided","Opinionated","Opportunistic","Oppressed","Outrageous","Overimaginative","Paranoid","Passive","Pedantic","Perverse","Petty","Pharissical","Phlegmatic","Plodding","Pompous","Possessive","Power-hungry","Predatory","Prejudiced","Presumptuous","Pretentious","Prim","Procrastinating","Profligate","Provocative","Pugnacious","Puritanical","Quirky","Reactionary","Reactive","Regimental","Regretful","Repentant","Repressed","Resentful","Ridiculous","Rigid","Ritualistic","Rowdy","Ruined","Sadistic","Sanctimonious","Scheming","Scornful","Secretive","Sedentary","Selfish","Self-indulgent","Shallow","Shortsighted","Shy","Silly","Single-minded","Sloppy","Slow","Sly","Small-thinking","Softheaded","Sordid","Steely","Stiff","Strong-willed","Stupid","Submissive","Superficial","Superstitious","Suspicious","Tactless","Tasteless","Tense","Thievish","Thoughtless","Timid","Transparent","Treacherous","Trendy","Troublesome","Unappreciative","Uncaring","Uncharitable","Unconvincing","Uncooperative","Uncreative","Uncritical","Unctuous","Undisciplined","Unfriendly","Ungrateful","Unhealthy","Unimaginative","Unimpressive","Unlovable","Unpolished","Unprincipled","Unrealistic","Unreflective","Unreliable","Unrestrained","Unself-critical","Unstable","Vacuous","Vague","Venal","Venomous","Vindictive","Vulnerable","Weak","Weak-willed","Well-meaning","Willful","Wishful","Zany"};
    
    current.setAge(Integer.toString((int)(Math.random()*999))+" "+current.genThing(time)); AgeField.setText(current.getAge());
    current.setStatus(current.genThing(status)); StatusField.setText(current.getStatus());
    current.setLikes(current.genThing(likes)); LikesField.setText(current.getLikes());
    current.setDislikes(current.genThing(likes)); DislikesField.setText(current.getDislikes());
    current.setHobbies(current.genThing(jobs)); HobbiesField.setText(current.getHobbies());
    current.setAlleg(current.genThing(flight)); AllegField.setText(current.getAlleg());
    current.setAllies(current.genThing(flight)+", "+current.genThing(flight)); AlliesField.setText(current.getAllies());
    current.setEnemies(current.genThing(flight)+", "+current.genThing(flight)); EnemiesField.setText(current.getEnemies());
    current.setName(current.genName()); NameField.setText(current.getName());
    current.setAdjs(0, current.genThing(adjs)); current.setAdjs(1, current.genThing(adjs)); current.setAdjs(2, current.genThing(adjs)); current.setAdjs(3, current.genThing(adjs));
    Adj1Field.setText(current.getAdjs(0)); Adj2Field.setText(current.getAdjs(1)); Adj3Field.setText(current.getAdjs(2)); Adj4Field.setText(current.getAdjs(3));
    
    }//GEN-LAST:event_RandomButtonActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        // TODO add your handling code here:
        AcField.setText(""); Adj1Field.setText(""); Adj2Field.setText(""); Adj3Field.setText(""); Adj4Field.setText(""); AgeField.setText(""); AllegField.setText("");
        AlliesField.setText(""); BioField.setText(""); BirthField.setText(""); CodeField.setText(""); DislikesField.setText(""); EnemiesField.setText(""); 
        FriendsField.setText(""); HobbiesField.setText(""); HomeField.setText(""); LikesField.setText(""); LongField.setText(""); MateField.setText("");
        NameField.setText(""); RelativesField.setText(""); ShortQuoteField.setText(""); TSLinkField.setText(""); TSTitleField.setText("");
    }//GEN-LAST:event_ClearButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HevelionBioGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HevelionBioGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HevelionBioGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HevelionBioGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HevelionBioGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AcField;
    private javax.swing.JTextField Adj1Field;
    private javax.swing.JTextField Adj2Field;
    private javax.swing.JTextField Adj3Field;
    private javax.swing.JTextField Adj4Field;
    private javax.swing.JTextField AgeField;
    private javax.swing.JTextField AllegField;
    private javax.swing.JTextField AlliesField;
    private javax.swing.JTextArea BioField;
    private javax.swing.JTextField BirthField;
    private javax.swing.JButton ClearButton;
    private javax.swing.JTextArea CodeField;
    private javax.swing.JTextField DislikesField;
    private javax.swing.JTextField EnemiesField;
    private javax.swing.JButton ExitButton;
    private javax.swing.JTextField FriendsField;
    private javax.swing.JButton GenerateButton;
    private javax.swing.JTextField HobbiesField;
    private javax.swing.JTextField HomeField;
    private javax.swing.JTextField LikesField;
    private javax.swing.JTextField LongField;
    private javax.swing.JTextField MateField;
    private javax.swing.JTextField NameField;
    private javax.swing.JButton RandomButton;
    private javax.swing.JTextField RelativesField;
    private javax.swing.JTextArea ShortQuoteField;
    private javax.swing.JTextField StatusField;
    private javax.swing.JTextField TSLinkField;
    private javax.swing.JTextField TSTitleField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}

class bio {
        public static String genName() {
  String[] prefix = {"anti","auto","de","dis","down","extra","hyper","il","im","in","ir","inter","mega","mid","mis","non","over","out","post","pre","pro","re","semi","sub","sub","super","tele","trans","ultra","un","under","up"};
  String[] firCon = {"t", "n", "s", "r", "d", "f", "c", "b", "z"};
  String[] secCon = {"r", "h", "s","v"};
  String[] firVow = {"e", "a", "i", "o", "oo", "u"};
  String[] thiCon = {"t", "v", "w", "x", "ck", "g", "p", "ch", "sh","ph","rr",};
  String[] secVow = {"e", "i", "o","a","u"}; 
  String[] fouCon = {"r", "s", "y","de","x","ra","le",};
  String[] suffix = {"iode","able","ac","acity","ocity","ade","age","aholic","oholic","al","algia","an","ian","ance","ant","ar","ard","arian","arium","orium","ary","ation","ate","ative","cide","cracy","crat","cule","cy","cycle","dom","dox","ed","ee","ectomy","eer","emia","en","ence","ency","ent","er","ern","escence","ese","esque","ess","est","etic","ette","ful","fy","gam","gamy","gon","gonic","hood","ial","ian","iasis","iatric","ible","ic","ical","ile","ily","ine","ing","ion","ious","ish","ism","ist","ite","itis","ity","ive","ization","ize","less","let","like","ling","loger","logist","log","ly","ment","ness","oid","ology","oma","onym","opia","opsy","or","ory","osis","ostomy","otomy","ous","path","pathy","phile","phobia","phone","phyte","plegia","plegic","pnea","scopy","scope","scribe","script","sect","ship","sion","some","sophy","sophic","th","tion","tome","tomy","tude","trophy","tude","ty","ular","uous","ure","ward","ware","wise"};
  int numnum = (int)(Math.random() * 100000);  
  String result = " ";         
        //start with the prefix
        if(Math.random() < .5) {
            result += prefix[(int)(Math.random() * prefix.length)];
        }
        
        //then the first consonant
        if(Math.random() < .7) {
            result += firCon[(int)(Math.random() * firCon.length)];
        }
        
        //then the possible second consonant
        if(Math.random() < .4) {
            result += secCon[(int)(Math.random() * secCon.length)];
        }
        
        //then the first vowel
        if(Math.random() < .9) {
            result += firVow[(int)(Math.random() * firVow.length)];
        }
        
        //then the third consonant
        if(Math.random() < .8) {
            result += thiCon[(int)(Math.random() * thiCon.length)];
        }
        
        //then the second vowel
        if(Math.random() < .6) {
            result += secVow[(int)(Math.random() * secVow.length)];
        }
        
        //then the fourth consonant
        if(Math.random() < .5) {
            result += fouCon[(int)(Math.random() * fouCon.length)];
        }
        
        //possibly another vowel?
        if(Math.random() < .5) {
            result += secVow[(int)(Math.random() * secVow.length)];
        }
        
        //then the suffix
        if (Math.random() < .5) {
            result += suffix[(int)(Math.random() * suffix.length)];
        }
        
        //if it's short, then maybe repeat it. (Seg -> Segseg)
        if (Math.random() < .7 && (result.length() < 6)) {
        result += result.substring(1,result.length());
        }
        
        //lastly, capitalize the first letter.
        String temp1 = result.substring(1,2);
        String temp2 = result.substring(2,result.length());
        temp1 = temp1.toUpperCase();
        result = temp1 + temp2;
        
        //if it's too long, delete it. 
        if (result.length() > 9) {
             result = result.substring(0,8);
        }  
        return result;     
    }
    public static String genThing(String[] mats) {
        int num = (int)(Math.random()*mats.length);
        return mats[num];
        } 
    
    static String ac = "";
    public static String getAc() {return ac;}
    public static void setAc(String a) {ac=a;}
    
    static String[] adjs = {"Nice","Nice","Nice","Nice"};
    public static String getAdjs(int index) {return adjs[index];}
    public static void setAdjs(int index, String a) {adjs[index]=a;}
    
    static String age = "";
    public static String getAge() {return age;}
    public static void setAge(String a) {age=a;}
    
    static String alleg = "";
    public static String getAlleg() {return alleg;}
    public static void setAlleg(String a) {alleg=a;}
    
    static String allies = "";
    public static String getAllies() {return allies;}
    public static void setAllies(String a) {allies=a;}
    
    static String biotxt = "";
    public static String getBiotxt() {return biotxt;}
    public static void setBiotxt(String a) {biotxt=a;}
    
    static String birth = "";
    public static String getBirth() {return birth;}
    public static void setBirth(String a) {birth=a;}
    
    static String dislikes = "";
    public static String getDislikes() {return dislikes;}
    public static void setDislikes(String a) {dislikes=a;}
    
    static String enemies = "";
    public static String getEnemies() {return enemies;}
    public static void setEnemies(String a) {enemies=a;}
    
    static String friends = "";
    public static String getFriends() {return friends;}
    public static void setFriends(String a) {friends=a;}
    
    static String hobbies = "";
    public static String getHobbies() {return hobbies;}
    public static void setHobbies(String a) {hobbies=a;}
    
    static String home = "";
    public static String getHome() {return home;}
    public static void setHome(String a) {home=a;}
    
    static String likes = "";
    public static String getLikes() {return likes;}
    public static void setLikes(String a) {likes=a;}
    
    static String longquote = "";
    public static String getLongquote() {return longquote;}
    public static void setLongquote(String a) {longquote=a;}
    
    static String mate = "";
    public static String getMate() {return mate;}
    public static void setMate(String a) {mate=a;}
    
    static String name = "";
    public static String getName() {return name;}
    public static void setName(String a) {name=a;}
    
    static String relatives = "";
    public static String getRelatives() {return relatives;}
    public static void setRelatives(String a) {relatives=a;}
    
    static String shortquote = "";
    public static String getShortquote() {return shortquote;}
    public static void setShortquote(String a) {shortquote=a;}
    
    static String status = "";
    public static String getStatus() {return status;}
    public static void setStatus(String a) {status=a;}
    
    static String themelink = "";
    public static String getThemelink() {return themelink;}
    public static void setThemelink(String a) {themelink=a;}
    
    static String themename = "";
    public static String getThemename() {return themename;}
    public static void setThemename(String a) {themename=a;}
    
    public static String makeBio() {
        String bio = "";
        
        bio += "[center][img]http://68.media.tumblr.com/f60712d6373727ab6da95e7a2cbd5bd8/tumblr_o5p2c0WdJI1uhf90do4_500.png[/img][/center]\n" +
"[columns]\n" +
"[img]http://i346.photobucket.com/albums/p432/KaytheBean/Bookmarks_New/Boreal%20WoodI_zpsoe3lor8t.png[/img]\n" +
"[nextcol]\n" +
"[center][size=6][font=Candara][b][color=#9494A9]"+name.toUpperCase()+"[/color][/font][/b][/size]\n" +
"[size=2]| "+adjs[0]+" | "+adjs[1]+" | "+adjs[2]+" | "+adjs[3]+" |\n" +
" \n" +
"[i]"+shortquote+"[/i][/size]\n" +
" \n" +
"[color=#A7A7B9]▬▬▬[/color]\n" +
"\n" +
"[size=2][font=Candara]"+biotxt+"[/font]\n" +
"\n" +
"[color=#A7A7B9]▬▬▬[/color]\n" +
"\n" +
"[img]http://68.media.tumblr.com/bd0f658f8e7e940e793455839ef46aec/tumblr_inline_o61va60TKU1tyc5vd_540.png[/img]\n" +
"\n" +
"[nextcol]\n" +
"[center][img]http://imgur.com/N7JMlPl.gif[/img]\n" +
" \n" +
"[i]"+longquote+"[/i][/center]\n" +
"[/columns]\n" +
"[center]\n" +
"\n" +
"[/center]\n" +
"[columns]\n" +
"[img]http://i346.photobucket.com/albums/p432/KaytheBean/Bookmarks_New/Boreal%20WoodI_zpsoe3lor8t.png[/img]\n" +
"[nextcol]\n" +
"\n" +
"[center][size=4][b][font=Candara]A B O U T[/b][/size]\n" +
"[img]http://68.media.tumblr.com/43bf591fcf2376b41aa23c2119bd15a0/tumblr_inline_o0txwcRSqm1tqyuge_540.png[/img][/center]\n" +
"\n" +
"[columns]\n" +
"[font=Candara]\n" +
"[size=2][b]Current Status:[/b] "+status+"\n" +
"[b]Current Age:[/b] "+age+"\n" +
"[b]Time of Birth:[/b] "+birth+"\n" +
" \n" +
"[b]Mate:[/b] "+mate+"\n" +
"[b]Relatives:[/b] "+relatives+"\n" +
"[b]Friends:[/b] "+friends+"\n" +
"[color=transparent]Friends: "+friends+"[/color]\n" +
"[b]Likes:[/b] "+likes+"\n" +
"[b]Dislikes:[/b] "+dislikes+"\n" +
"[b]Hobbies:[/b] "+hobbies+"\n" +
"[nextcol]\n" +
"[size=2][b]Allegiance:[/b] "+alleg+"\n" +
"[b]Allies:[/b] "+allies+"\n" +
"[b]Enemies:[/b] "+enemies+"\n" +
" \n" +
"[b]Acquisition:[/b] "+ac+"\n" +
"[b]Home Clan:[/b] "+home+"\n" +
"[/columns]\n" +
"-----\n" +
"\n" +
"[center][size=4][b]T H E M E[/b][/size]\n" +
"[img]http://68.media.tumblr.com/43bf591fcf2376b41aa23c2119bd15a0/tumblr_inline_o0txwcRSqm1tqyuge_540.png[/img]\n" +
"[color=transparent]xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx[/color]\n" +
"\n" +
"[center][size=6][font=Candara]"+themename+"[/font][/size][/center]\n" +
" \n" +
"\n" +
"[center][url="+themelink+"][img]http://68.media.tumblr.com/8076afe546ec53bf0935042020f2195f/tumblr_inline_o3ltrvw7WC1tqyuge_500.gif[/img][/url][/center]\n" +
"\n" +
"\n" +
"[center][img]https://68.media.tumblr.com/50f9e1e0465ed91276106b90c8a53a1f/tumblr_inline_nswmwavkan1qiwi8o_500.gif[/img][/center]\n" +
"[nextcol]\n" +
"[img]http://68.media.tumblr.com/56603d1ba6ed576cb6f3b21301147b47/tumblr_o2tq2hhSzg1v8u3r6o5_250.png[/img]\n" +
"[/columns]\n" +
"[center][img]http://68.media.tumblr.com/0e7302e982ccae618f0e52d34e6e86b5/tumblr_ntk4pxMaFq1uc01tdo6_1280.png[/img][/center]";
        
        
        return bio;
    }
    
    
    
    
}
